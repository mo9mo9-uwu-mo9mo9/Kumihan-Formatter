name: CI/CD Metrics Dashboard

on:
  schedule:
    - cron: '0 9 * * 1'  # 毎週月曜日9時（JST 18時）
  workflow_dispatch:     # 手動実行も可能

# 同時実行制御
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false  # ダッシュボード生成は完了させる

jobs:
  generate-metrics:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install python-dateutil

    - name: Create tmp directory
      run: |
        mkdir -p tmp

    - name: Generate CI/CD Integration Report
      continue-on-error: true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🧪 CI/CD統合テスト・モニタリング実行中..."
        python3 tmp/ci_integration_test.py || echo "統合テスト完了（警告あり）"

    - name: Generate CI/CD Metrics Dashboard
      continue-on-error: true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "📊 CI/CDメトリクスダッシュボード生成中..."
        python3 tmp/ci_metrics_dashboard.py || echo "ダッシュボード生成完了（警告あり）"

    - name: List generated artifacts
      run: |
        echo "📄 生成されたファイル一覧:"
        ls -la tmp/ci_report_*.txt 2>/dev/null || echo "レポートファイルなし"
        ls -la tmp/ci_dashboard_*.html 2>/dev/null || echo "ダッシュボードファイルなし"

    - name: Upload Dashboard Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ci-metrics-dashboard-${{ github.run_number }}
        path: |
          tmp/ci_report_*.txt
          tmp/ci_dashboard_*.html
        retention-days: 30
        if-no-files-found: warn

    - name: Check CI/CD Health Status
      id: health-check
      run: |
        echo "🏥 CI/CDヘルス状態チェック..."

        # レポートファイルが存在するかチェック
        if ls tmp/ci_report_*.txt 1> /dev/null 2>&1; then
          echo "CI_REPORT_EXISTS=true" >> $GITHUB_OUTPUT

          # レポート内容から健康状態を判定
          LATEST_REPORT=$(ls -t tmp/ci_report_*.txt | head -n1)

          if grep -q "overall_status.*critical" "$LATEST_REPORT" 2>/dev/null; then
            echo "HEALTH_STATUS=critical" >> $GITHUB_OUTPUT
            echo "⚠️ CI/CDヘルス状態: CRITICAL"
          elif grep -q "overall_status.*warning" "$LATEST_REPORT" 2>/dev/null; then
            echo "HEALTH_STATUS=warning" >> $GITHUB_OUTPUT
            echo "⚠️ CI/CDヘルス状態: WARNING"
          else
            echo "HEALTH_STATUS=healthy" >> $GITHUB_OUTPUT
            echo "✅ CI/CDヘルス状態: HEALTHY"
          fi
        else
          echo "CI_REPORT_EXISTS=false" >> $GITHUB_OUTPUT
          echo "HEALTH_STATUS=unknown" >> $GITHUB_OUTPUT
          echo "❓ CI/CDヘルス状態: 不明（レポート生成失敗）"
        fi

    - name: Create Issue Comment on Health Critical
      if: steps.health-check.outputs.HEALTH_STATUS == 'critical'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🚨 CI/CDヘルス状態がクリティカル - 通知作成中..."

        # 最新のオープンなIssueを取得（なければスキップ）
        LATEST_ISSUE=$(gh issue list --limit 1 --state open --json number --jq '.[0].number' 2>/dev/null || echo "")

        if [ -n "$LATEST_ISSUE" ]; then
          cat << EOF > /tmp/issue_comment.txt
        🚨 CI/CDヘルス警告

        生成日時: $(date)
        ステータス: CRITICAL

        週次CI/CDメトリクス監視でクリティカルな問題が検出されました。

        詳細ダッシュボード: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

        推奨アクション:
        - ワークフロー失敗率の確認
        - 実行時間の分析
        - システム負荷の調査

        自動生成 by CI/CD Metrics Dashboard
        EOF
          gh issue comment "$LATEST_ISSUE" --body-file /tmp/issue_comment.txt
          echo "✅ Issue #$LATEST_ISSUE にヘルス警告コメントを追加しました"
        else
          echo "ℹ️ オープンなIssueが存在しないため、コメント作成をスキップしました"
        fi

    - name: Dashboard Summary
      if: always()
      run: |
        echo "## 📊 CI/CDメトリクスダッシュボード - Week $(date +%Y-%U)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 生成結果" >> $GITHUB_STEP_SUMMARY
        echo "| 項目 | ステータス |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------------|" >> $GITHUB_STEP_SUMMARY
        echo "| 統合テスト | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ダッシュボード生成 | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ヘルス状態 | ${{ steps.health-check.outputs.HEALTH_STATUS || 'unknown' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| アーティファクト | 📦 ダウンロード可能 |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### アクセス方法" >> $GITHUB_STEP_SUMMARY
        echo "1. **Artifacts**: [こちらからダウンロード](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "2. **HTMLダッシュボード**: ダウンロード後、ブラウザで \`ci_dashboard_*.html\` を開く" >> $GITHUB_STEP_SUMMARY
        echo "3. **テキストレポート**: \`ci_report_*.txt\` ファイルを確認" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*🤖 Generated by CI Metrics Dashboard Workflow*" >> $GITHUB_STEP_SUMMARY

        echo "✅ 週次CI/CDメトリクスダッシュボード生成完了"
        echo "📦 Artifactsセクションからダッシュボードをダウンロードしてください"
