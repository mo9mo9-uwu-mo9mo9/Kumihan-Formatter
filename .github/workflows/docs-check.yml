name: Docs / Consistency Check

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'kumihan_formatter/**'
      - 'examples/**'
      - 'pyproject.toml'
      - '**/*.md'
  push:
    branches: [ main ]
    paths:
      - 'pyproject.toml'
      - 'kumihan_formatter/__init__.py'

jobs:
  version-consistency:
    name: Version Consistency Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract versions
      id: versions
      run: |
        # pyproject.toml „Åã„Çâ„Éê„Éº„Ç∏„Éß„É≥„ÇíÊäΩÂá∫
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "pyproject_version=$PYPROJECT_VERSION" >> $GITHUB_OUTPUT
        
        # __init__.py „Åã„Çâ„Éê„Éº„Ç∏„Éß„É≥„ÇíÊäΩÂá∫
        INIT_VERSION=$(grep '__version__ = ' kumihan_formatter/__init__.py | sed 's/__version__ = "\(.*\)"/\1/')
        echo "init_version=$INIT_VERSION" >> $GITHUB_OUTPUT
        
        # README.md „ÅÆ„Éê„ÉÉ„Ç∏„Åã„Çâ„Éê„Éº„Ç∏„Éß„É≥„ÇíÊäΩÂá∫
        README_VERSION=$(grep -o 'version-[0-9.]*-blue' README.md | sed 's/version-\(.*\)-blue/\1/')
        echo "readme_version=$README_VERSION" >> $GITHUB_OUTPUT
        
        echo "Extracted versions:"
        echo "pyproject.toml: $PYPROJECT_VERSION"
        echo "__init__.py: $INIT_VERSION"
        echo "README.md: $README_VERSION"
    
    - name: Check version consistency
      run: |
        PYPROJECT_VERSION="${{ steps.versions.outputs.pyproject_version }}"
        INIT_VERSION="${{ steps.versions.outputs.init_version }}"
        README_VERSION="${{ steps.versions.outputs.readme_version }}"
        
        echo "Checking version consistency..."
        
        if [ "$PYPROJECT_VERSION" != "$INIT_VERSION" ]; then
          echo "‚ùå Version mismatch between pyproject.toml ($PYPROJECT_VERSION) and __init__.py ($INIT_VERSION)"
          exit 1
        fi
        
        if [ "$PYPROJECT_VERSION" != "$README_VERSION" ]; then
          echo "‚ùå Version mismatch between pyproject.toml ($PYPROJECT_VERSION) and README.md ($README_VERSION)"
          exit 1
        fi
        
        echo "‚úÖ All versions are consistent: $PYPROJECT_VERSION"

  feature-docs-check:
    name: Feature Documentation Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.title, 'feat:')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check for parser/renderer changes
      id: check_changes
      run: |
        # parser.py „Åæ„Åü„ÅØ renderer.py „Å´Â§âÊõ¥„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        if git diff --name-only HEAD~1 HEAD | grep -E "(parser\.py|renderer\.py)"; then
          echo "core_changes=true" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è  Core functionality changes detected"
        else
          echo "core_changes=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check documentation updates
      if: steps.check_changes.outputs.core_changes == 'true'
      run: |
        echo "üîç Checking for documentation updates..."
        
        # SPEC.md „ÅÆÊõ¥Êñ∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if ! git diff --name-only HEAD~1 HEAD | grep -q "SPEC.md"; then
          echo "‚ö†Ô∏è  Warning: SPEC.md was not updated despite core functionality changes"
          echo "::warning::Consider updating SPEC.md to reflect any new syntax or behavior changes"
        fi
        
        # examples/ „ÅÆÊõ¥Êñ∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if ! git diff --name-only HEAD~1 HEAD | grep -q "examples/"; then
          echo "‚ö†Ô∏è  Warning: No example files were updated despite core functionality changes"
          echo "::warning::Consider updating example files to demonstrate new features"
        fi
        
        # README.md „ÅÆÊõ¥Êñ∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if ! git diff --name-only HEAD~1 HEAD | grep -q "README.md"; then
          echo "‚ö†Ô∏è  Warning: README.md was not updated despite core functionality changes"
          echo "::warning::Consider updating README.md to document new features"
        fi
        
        echo "‚úÖ Documentation check completed"

  changelog-check:
    name: Changelog Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.title, 'feat:') || contains(github.event.pull_request.title, 'fix:') || contains(github.event.pull_request.title, 'docs:')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check CLAUDE.md updates
      run: |
        echo "üîç Checking for changelog updates..."
        
        if git diff --name-only HEAD~1 HEAD | grep -q "CLAUDE.md"; then
          echo "‚úÖ CLAUDE.md has been updated"
        else
          echo "‚ö†Ô∏è  Warning: CLAUDE.md was not updated"
          echo "::warning::Consider adding an entry to the changelog in CLAUDE.md"
        fi