name: Docs / Unified Checks

# Phase2-A最適化: ブランチ別の最適化とパスフィルターの改善
on:
  pull_request:
    branches: [ main ]
    # PR時はドキュメント関連の変更でのみ実行
    paths:
      - 'pyproject.toml'
      - 'kumihan_formatter/__init__.py'  # バージョン整合性チェック
      - '**/*.md'
      - 'docs/**'
      - '.distignore'
      - '.github/workflows/docs-unified.yml'
    paths-ignore:
      - 'examples/**'  # サンプル変更ではスキップ
  push:
    branches: [ main ]
    # Phase2-A: mainブランチではバージョン関連のみ実行
    paths:
      - 'pyproject.toml'
      - 'kumihan_formatter/__init__.py'
      - '.github/workflows/docs-unified.yml'
    paths-ignore:
      - '**/*.md'  # mainブランチでのドキュメント変更はスキップ

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unified-docs-check:
    name: Unified Documentation Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
    
    # Version Consistency Check
    - name: Extract versions
      id: versions
      run: |
        # pyproject.toml からバージョンを抽出
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "pyproject_version=$PYPROJECT_VERSION" >> $GITHUB_OUTPUT
        
        # __init__.py からバージョンを抽出
        INIT_VERSION=$(grep '__version__ = ' kumihan_formatter/__init__.py | sed 's/__version__ = "\(.*\)"/\1/')
        echo "init_version=$INIT_VERSION" >> $GITHUB_OUTPUT
        
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        echo "__init__.py version: $INIT_VERSION"
    
    - name: Verify version consistency
      run: |
        if [ "${{ steps.versions.outputs.pyproject_version }}" != "${{ steps.versions.outputs.init_version }}" ]; then
          echo "❌ Version mismatch detected!"
          echo "pyproject.toml: ${{ steps.versions.outputs.pyproject_version }}"
          echo "__init__.py: ${{ steps.versions.outputs.init_version }}"
          exit 1
        else
          echo "✅ Versions are consistent: ${{ steps.versions.outputs.pyproject_version }}"
        fi
    
    # Document Consistency Check
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run documentation consistency checks
      run: |
        echo "📋 Checking documentation consistency..."
        
        # Basic file existence checks
        required_files=(
          "README.md"
          "CLAUDE.md"
          "SPEC.md"
          "CONTRIBUTING.md"
          "pyproject.toml"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required file missing: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done
        
        # Check for common issues in markdown files
        echo "🔍 Checking markdown files..."
        find . -name "*.md" -not -path "./.venv/*" -not -path "./node_modules/*" | while read -r file; do
          # Check for broken internal links (basic check)
          if grep -q "\]\(#[^)]*\)" "$file"; then
            echo "📝 Internal links found in: $file"
          fi
          
          # Check file is not empty
          if [ ! -s "$file" ]; then
            echo "⚠️  Empty markdown file: $file"
          fi
        done
        
        echo "✅ Documentation consistency checks completed"
    
    # Feature Documentation Check (conditional)
    - name: Feature Documentation Check
      if: contains(github.event.pull_request.title, 'feat:')
      run: |
        echo "🔍 Checking feature documentation requirements..."
        
        # Check if SPEC.md or CONTRIBUTING.md was updated for feature PRs
        if git diff --name-only HEAD~1 | grep -E "(SPEC\.md|CONTRIBUTING\.md)"; then
          echo "✅ Documentation updated for feature change"
        else
          echo "⚠️  Feature PR detected but no documentation updates found"
          echo "Consider updating SPEC.md or CONTRIBUTING.md if this feature affects user-facing functionality"
        fi
    
    # Summary
    - name: Generate summary
      run: |
        echo "## 📋 Documentation Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Optimization**: Phase2-A (branch-specific path filtering)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Version consistency verified" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Required files present" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Basic markdown validation completed" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ **Optimization**: Selective execution based on change type" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ contains(github.event.pull_request.title, 'feat:') }}" = "true" ]; then
          echo "- 🔍 Feature documentation requirements checked" >> $GITHUB_STEP_SUMMARY
        fi