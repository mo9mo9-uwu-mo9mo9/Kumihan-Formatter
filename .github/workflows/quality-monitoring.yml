name: Quality Monitoring (Temporarily Disabled)

on:
  workflow_dispatch:
    inputs:
      check_gates:
        description: '品質ゲートチェックを実行'
        required: false
        default: 'true'
        type: boolean
  # pull_request: # Temporarily disabled to reduce workflow congestion
  # Phase 3: 段階的復旧 - pull_request追加
  # pull_request:
  #   branches: [ main, develop ]
  #   types: [ opened, synchronize, reopened ]
  push:
    branches: [ 
      main,
      develop,
      'feature/**',
      'fix/**'
    ]

env:
  PYTHON_VERSION: '3.9'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  quality-metrics:
    name: 品質メトリクス収集・分析
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 履歴取得（品質トレンド分析用）
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pyyaml safety bandit  # 品質監視ツール用
    
    - name: Create temp directories
      run: |
        mkdir -p /tmp/quality_test
        mkdir -p quality-reports
    
    - name: Run syntax validation (strict mode)
      run: |
        echo "🔍 厳格モードでの記法検証を実行..."
        python dev/tools/syntax_validator.py examples/*.txt --mode=strict || true
    
    - name: Run syntax validation (error samples)
      run: |
        echo "🔍 エラーサンプルファイルの検証を実行..."
        if ls 記法ツール/**/サンプルファイル/記法エラーサンプル.txt 2>/dev/null; then
          python dev/tools/syntax_validator.py 記法ツール/**/サンプルファイル/記法エラーサンプル.txt --mode=error-sample || true
        else
          echo "エラーサンプルファイルが見つかりません"
        fi
    
    - name: Run unit tests with coverage
      run: |
        echo "🧪 ユニットテスト実行..."
        python -m pytest dev/tests/ -v --tb=short || true
    
    - name: Run performance tests
      run: |
        echo "⚡ パフォーマンステスト実行..."
        # サンプルファイルでの変換テスト
        for file in examples/*.txt; do
          if [ -f "$file" ]; then
            echo "Testing: $file"
            timeout 30s python -m kumihan_formatter.cli convert "$file" --no-preview -o /tmp/quality_test || echo "Failed: $file"
          fi
        done
    
    - name: Collect quality metrics
      run: |
        echo "📊 品質メトリクス収集..."
        python dev/tools/quality_metrics.py . --format=json --output=quality-reports/metrics.json
        python dev/tools/quality_metrics.py . --format=detailed --output=quality-reports/metrics.txt
    
    - name: Record quality snapshot (Phase 3)
      run: |
        echo "📷 品質スナップショット記録..."
        python dev/tools/quality_trend_tracker.py record \
          --metrics-file=quality-reports/metrics.json \
          --commit="${{ github.sha }}" \
          --branch="${{ github.ref_name }}" \
          --environment="ci"
    
    - name: Generate quality trend report (Phase 3)
      run: |
        echo "📈 品質トレンドレポート生成..."
        python dev/tools/quality_trend_tracker.py report \
          --days=30 \
          --output=quality-reports/trend-report.md
    
    - name: Check quality gates
      if: github.event.inputs.check_gates == 'true' || github.event_name == 'push'
      run: |
        echo "🚪 品質ゲートチェック実行..."
        # 品質メトリクスツールでゲートチェック実行
        python dev/tools/quality_metrics.py . --check-gates || {
          echo "⚠️ 品質ゲート基準未達成 - 改善が推奨されます"
          echo "詳細は上記のレポートを確認してください"
          exit 0  # ワークフロー継続（警告のみ）
        }
    
    - name: Generate quality report
      run: |
        echo "📄 品質レポート生成..."
        cat > quality-reports/summary.md << 'EOF'
        # 📊 品質監視レポート
        
        **生成日時**: $(date '+%Y-%m-%d %H:%M:%S UTC')
        **コミット**: ${{ github.sha }}
        **ブランチ**: ${{ github.ref_name }}
        
        ## 📈 品質メトリクス
        
        ```
        $(cat quality-reports/metrics.txt)
        ```
        
        ## 🔗 関連リンク
        
        - [詳細レポート (JSON)](./metrics.json)
        - [GitHub Actions ログ](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        ---
        
        🤖 Generated by GitHub Actions
        EOF
    
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports-${{ github.run_number }}
        path: quality-reports/
        retention-days: 30
    
    - name: Generate PR quality report (Phase 3)
      if: github.event_name == 'pull_request'
      run: |
        echo "📊 PR品質レポート生成..."
        python dev/tools/quality_report_generator.py pr-report \
          --current-metrics=quality-reports/metrics.json \
          --pr-number="${{ github.event.number }}" \
          --pr-title="${{ github.event.pull_request.title }}" \
          --base-branch="${{ github.event.pull_request.base.ref }}" \
          --output=quality-reports/pr-report.md

    - name: Comment PR with enhanced quality report (Phase 3)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            // Phase 3: 強化された品質レポート
            let prReport = '';
            try {
              prReport = fs.readFileSync('quality-reports/pr-report.md', 'utf8');
            } catch (err) {
              console.log('PR レポートが見つかりません、フォールバック使用');
              // フォールバック: 従来の形式
              const metricsJson = JSON.parse(fs.readFileSync('quality-reports/metrics.json', 'utf8'));
              const qualityScore = metricsJson.overall_quality_score;
              const emoji = qualityScore >= 90 ? '🌟' : qualityScore >= 80 ? '✅' : qualityScore >= 70 ? '⚠️' : '🚨';
              
              prReport = `## ${emoji} 品質メトリクス レポート
              
**総合品質スコア**: ${qualityScore}/100
**記法合格率**: ${metricsJson.syntax_pass_rate.toFixed(1)}%
**テスト合格率**: ${metricsJson.test_pass_rate.toFixed(1)}%
**平均変換時間**: ${metricsJson.conversion_time_avg.toFixed(2)}秒

📥 [詳細レポートをダウンロード](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            }
            
            // トレンドレポートの追加
            let trendReport = '';
            try {
              trendReport = fs.readFileSync('quality-reports/trend-report.md', 'utf8');
              prReport += '\n\n<details>\n<summary>📈 品質トレンド分析</summary>\n\n```\n' + trendReport + '\n```\n\n</details>';
            } catch (err) {
              console.log('トレンドレポートが見つかりません');
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: prReport
            });
          } catch (error) {
            console.log('品質レポートコメント生成に失敗:', error);
          }

  quality-trend-analysis:
    name: 品質トレンド分析
    runs-on: ubuntu-latest
    needs: quality-metrics
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 100  # 過去100コミットの履歴
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Download quality reports
      uses: actions/download-artifact@v4
      with:
        name: quality-reports-${{ github.run_number }}
        path: quality-reports/
    
    - name: Analyze quality trends
      run: |
        echo "📈 品質トレンド分析..."
        # 過去のメトリクスと比較（簡易版）
        current_score=$(cat quality-reports/metrics.json | grep -o '"overall_quality_score": [0-9.]*' | grep -o '[0-9.]*')
        echo "現在の品質スコア: $current_score"
        
        # トレンド判定（簡易版）
        if (( $(echo "$current_score > 85.0" | bc -l) )); then
          echo "✅ 品質は良好です"
        elif (( $(echo "$current_score > 70.0" | bc -l) )); then
          echo "⚠️ 品質改善の余地があります"
        else
          echo "🚨 品質が低下しています - 緊急改善が必要"
        fi

  quality-alerts:
    name: 品質アラート通知
    runs-on: ubuntu-latest
    needs: quality-metrics
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "🚨 Kumihan-Formatter 品質チェック失敗",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*🚨 品質チェックが失敗しました*\n\n*リポジトリ*: ${{ github.repository }}\n*ブランチ*: ${{ github.ref_name }}\n*コミット*: ${{ github.sha }}\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|詳細を確認>"
                }
              }
            ]
          }' \
          $SLACK_WEBHOOK_URL || echo "Slack通知の送信に失敗しました"
    
    - name: Create GitHub Issue
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 品質チェック失敗 - 緊急対応が必要',
            body: `## 品質チェック失敗レポート
            
            **実行日時**: ${new Date().toISOString()}
            **ブランチ**: ${{ github.ref_name }}
            **コミット**: ${{ github.sha }}
            **実行ID**: ${{ github.run_id }}
            
            ## 🔗 詳細情報
            
            [GitHub Actions ログ](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ## 📋 対応手順
            
            1. ログを確認して失敗原因を特定
            2. 必要に応じて修正を実装
            3. 品質ゲートが通過することを確認
            4. 本Issueをクローズ
            
            ## 🏷️ ラベル
            
            緊急, バグ
            `,
            labels: ['緊急', 'バグ']
          });

  dependency-vulnerability-scan:
    name: 依存関係脆弱性スキャン
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run security scan
      run: |
        echo "🔒 セキュリティスキャン実行..."
        safety check --json --output safety-report.json || true
        bandit -r kumihan_formatter/ -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_number }}
        path: "*-report.json"
        retention-days: 30