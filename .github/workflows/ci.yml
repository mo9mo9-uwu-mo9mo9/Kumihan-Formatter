name: CI - TDD-First Development System

on:
  push:
    branches: [ main, develop, "feat/*", "fix/*", "hotfix/*" ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  # 必須CI - 全て成功が必要
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Black formatter check
        run: python -m black --check --diff .

      - name: Run isort import sorting check
        run: python -m isort --check-only --diff .

      - name: Run flake8 linting
        run: python -m flake8 kumihan_formatter/ tests/ scripts/

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run mypy type checking
        run: python -m mypy kumihan_formatter/ --ignore-missing-imports

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run pytest with coverage
        run: |
          python -m pytest \
            --cov=kumihan_formatter \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=90 \
            --verbose

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run SQL Injection Tests
        run: python scripts/security_sql_injection_test.py

      - name: Run XSS Protection Tests
        run: python scripts/security_xss_test.py

      - name: Run CSRF Protection Tests  
        run: python scripts/security_csrf_test.py

      - name: Run File Upload Security Tests
        run: python scripts/security_file_upload_test.py

  integration-tests:
    name: Integration Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Cross-platform Integration Tests
        run: python scripts/cross_platform_integration_test.py

      - name: Run Dependency Integrity Check
        run: python scripts/dependency_integrity_checker.py

      - name: Run Performance Regression Monitor
        run: python scripts/performance_regression_monitor.py

  # 全ジョブ成功確認
  ci-success:
    name: CI Success Gate
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, security-tests, integration-tests]
    if: always()
    steps:
      - name: Check all jobs success
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.type-check.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.security-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "✅ All CI checks passed - Ready for merge"
            exit 0
          else
            echo "❌ CI checks failed:"
            echo "  Lint: ${{ needs.lint.result }}"
            echo "  Type Check: ${{ needs.type-check.result }}"
            echo "  Tests: ${{ needs.test.result }}"
            echo "  Security: ${{ needs.security-tests.result }}"
            echo "  Integration: ${{ needs.integration-tests.result }}"
            exit 1
          fi

      - name: Update commit status
        if: always()
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.type-check.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.security-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "CI_STATUS=success" >> $GITHUB_ENV
          else
            echo "CI_STATUS=failure" >> $GITHUB_ENV
          fi