name: CI - TDD-First Development System

on:
  push:
    branches: [ main, develop, "feat/*", "fix/*", "hotfix/*" ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"
  # „Ç≠„É£„ÉÉ„Ç∑„É•ÊúÄÈÅ©ÂåñË®≠ÂÆö
  CACHE_VERSION: "v1"
  # ÊÆµÈöéÁöÑÂÆüË°åÂà∂Âæ°
  ENABLE_PHASED_EXECUTION: true
  SKIP_SLOW_TESTS: ${{ github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'full-ci') }}

jobs:
  # ÂøÖÈ†àCI - ÂÖ®„Å¶ÊàêÂäü„ÅåÂøÖË¶Å
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # ‰æùÂ≠òÈñ¢‰øÇ„Ç≠„É£„ÉÉ„Ç∑„É•
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Black formatter check
        run: python -m black --check --diff .

      - name: Run isort import sorting check
        run: python -m isort --check-only --diff .

      - name: Run flake8 linting
        run: python -m flake8 kumihan_formatter/ tests/ scripts/

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # ‰æùÂ≠òÈñ¢‰øÇ„Ç≠„É£„ÉÉ„Ç∑„É•
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run mypy type checking
        run: python -m mypy kumihan_formatter/ --ignore-missing-imports

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # ‰æùÂ≠òÈñ¢‰øÇ„Ç≠„É£„ÉÉ„Ç∑„É•
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      # ÊÆµÈöéÁöÑ„ÉÜ„Çπ„ÉàÂÆüË°åÔºà„Ç≠„É£„ÉÉ„Ç∑„É•„Åï„Çå„Åü„ÉÜ„Çπ„ÉàÁµêÊûúËÄÉÊÖÆÔºâ
      - name: Cache pytest results
        uses: actions/cache@v4
        with:
          path: |
            .pytest_cache
            .coverage
          key: ${{ runner.os }}-pytest-${{ env.CACHE_VERSION }}-${{ hashFiles('tests/**/*.py', 'kumihan_formatter/**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-pytest-${{ env.CACHE_VERSION }}-

      - name: Run pytest with coverage (Phased)
        run: |
          if [[ "${{ env.SKIP_SLOW_TESTS }}" == "true" ]]; then
            echo "‚ö° Fast CI Mode: Critical tests only"
            python -m pytest \
              --cov=kumihan_formatter \
              --cov-report=xml \
              --cov-report=term-missing \
              --cov-fail-under=80 \
              -m "not slow" \
              --maxfail=5 \
              --verbose \
              tests/unit/test_critical_*
          else
            echo "üîç Full CI Mode: All tests"
            python -m pytest \
              --cov=kumihan_formatter \
              --cov-report=xml \
              --cov-report=html \
              --cov-report=term-missing \
              --cov-fail-under=90 \
              --verbose
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # ‰æùÂ≠òÈñ¢‰øÇ„Ç≠„É£„ÉÉ„Ç∑„É•
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Security Tests (Conditional)
        run: |
          if [[ "${{ env.SKIP_SLOW_TESTS }}" == "true" ]]; then
            echo "‚ö° Fast CI: Essential security tests only"
            python scripts/security_sql_injection_test.py || echo "Warning: SQL injection test failed"
            python scripts/security_xss_test.py || echo "Warning: XSS test failed"
            echo "‚úÖ Essential security tests completed"
          else
            echo "üîç Full security test suite"
            python scripts/security_sql_injection_test.py
            python scripts/security_xss_test.py
            python scripts/security_csrf_test.py
            python scripts/security_file_upload_test.py
            echo "‚úÖ Full security test suite completed"
          fi

  integration-tests:
    name: Integration Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # ‰æùÂ≠òÈñ¢‰øÇ„Ç≠„É£„ÉÉ„Ç∑„É•
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Integration Tests (Conditional)
        run: |
          if [[ "${{ env.SKIP_SLOW_TESTS }}" == "true" ]]; then
            echo "‚ö° Fast CI: Core integration tests only"
            python scripts/dependency_integrity_checker.py
            echo "‚úÖ Core integration tests completed"
          else
            echo "üîç Full integration test suite"
            python scripts/cross_platform_integration_test.py
            python scripts/dependency_integrity_checker.py
            python scripts/performance_regression_monitor.py
            echo "‚úÖ Full integration test suite completed"
          fi

  # ÂÖ®„Ç∏„Éß„ÉñÊàêÂäüÁ¢∫Ë™ç
  ci-success:
    name: CI Success Gate
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, security-tests, integration-tests]
    if: always()
    steps:
      - name: Check all jobs success
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.type-check.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.security-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "‚úÖ All CI checks passed - Ready for merge"
            exit 0
          else
            echo "‚ùå CI checks failed:"
            echo "  Lint: ${{ needs.lint.result }}"
            echo "  Type Check: ${{ needs.type-check.result }}"
            echo "  Tests: ${{ needs.test.result }}"
            echo "  Security: ${{ needs.security-tests.result }}"
            echo "  Integration: ${{ needs.integration-tests.result }}"
            exit 1
          fi

      - name: Update commit status
        if: always()
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.type-check.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.security-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "CI_STATUS=success" >> $GITHUB_ENV
          else
            echo "CI_STATUS=failure" >> $GITHUB_ENV
          fi