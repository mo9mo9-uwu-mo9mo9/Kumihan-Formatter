name: Quality Gate

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'kumihan_formatter/**'
      - 'tests/**'
      - 'pyproject.toml'

# 同時実行制御
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality_check:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        python-version: [3.12, 3.13]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      timeout-minutes: 10
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-xdist pytest-timeout pytest-sugar --upgrade

    - name: Configure Python environment
      run: |
        echo "PYTHONPATH=${GITHUB_WORKSPACE}:$PYTHONPATH" >> $GITHUB_ENV
        echo "Python environment configured with project root"
        python -c "import sys; print(f'Python path: {sys.path[:3]}...')"

    - name: Load quality rules
      run: |
        echo "Loading quality configuration..."
        cat .github/quality/quality_rules.yml

    - name: Pre-commit hook validation
      timeout-minutes: 5
      run: |
        python3 -m tools.automation.pre_commit_hooks --validate

    - name: Automated quality check
      timeout-minutes: 10
      continue-on-error: true  # エラー時も継続
      id: quality_check
      run: |
        echo "Starting quality check with debug mode..."
        python3 -m tools.automation.quality_checker --path kumihan_formatter --output quality_report.json --debug || {
          echo "Quality checker failed, but continuing with basic checks"
          echo "Error details saved for debugging"
          exit 1
        }

    - name: Auto-formatting diff check
      timeout-minutes: 5
      run: |
        python3 -m tools.automation.auto_formatter --diff --path kumihan_formatter

    - name: Code formatting check
      timeout-minutes: 5
      run: |
        echo "Checking code formatting with Black..."
        if ! black --check --diff .; then
          echo "❌ Black formatting check failed"
          echo "Run 'black .' to fix formatting issues"
          exit 1
        fi
        echo "✅ Black formatting check passed"

        echo "Checking import sorting with isort..."
        if ! isort --check-only --diff .; then
          echo "❌ isort check failed"
          echo "Run 'isort .' to fix import sorting issues"
          exit 1
        fi
        echo "✅ isort check passed"

    - name: Lint check
      timeout-minutes: 5
      run: |
        flake8 kumihan_formatter tests

    - name: Type check (Core modules - Phase 1)
      timeout-minutes: 10
      continue-on-error: true  # 段階的導入のため警告レベル
      id: type_check_core
      run: |
        echo "Running mypy type check on core modules (Phase 1)..."

        # Phase 1: 最重要コアモジュールのみチェック
        CORE_MODULES=(
          "kumihan_formatter/core/ast_nodes/node.py"
          "kumihan_formatter/core/parsing/keyword/__init__.py"
          "kumihan_formatter/core/parsing/keyword/parse_result.py"
          "kumihan_formatter/core/rendering/__init__.py"
          "kumihan_formatter/core/utilities"
        )

        TYPE_CHECK_PASSED=true
        for module in "${CORE_MODULES[@]}"; do
          if [ -e "$module" ]; then
            echo "Checking $module..."
            if ! mypy "$module" --strict --no-error-summary; then
              echo "❌ Type check failed for $module"
              TYPE_CHECK_PASSED=false
            else
              echo "✅ Type check passed for $module"
            fi
          else
            echo "⚠️ Module not found: $module"
          fi
        done

        if [ "$TYPE_CHECK_PASSED" = "true" ]; then
          echo "✅ Core modules type check passed"
        else
          echo "⚠️ Core modules type check had issues - continuing in degraded mode"
          echo "Phase 2 will expand to more modules once core issues are resolved"
        fi

    # TODO: Phase 2将拡張到更多模块 - 计划在核心模块修复后启用

    # Issue #1050: カバレッジ段階的向上計画
    # Phase 1 (current): 50% - 現実的なスタート地点
    # Phase 2 (mid-term): 60% - 中期目標
    # Phase 3 (long-term): 70% - 最終目標
    - name: Run tests with coverage
      timeout-minutes: 20
      continue-on-error: false
      env:
        PYTEST_XDIST_WORKER_COUNT: auto
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "Running tests with coverage..."
        echo "Python version: $(python --version)"
        echo "PYTHONPATH: $PYTHONPATH"
        echo "Current directory: $(pwd)"

        pytest tests/ \
          --cov=kumihan_formatter \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=50 \
          --maxfail=5 \
          --timeout=300 \
          --durations=10 \
          --tb=short \
          -n=auto \
          --dist=worksteal \
          -v || {
          echo "❌ Tests failed - see details above"
          echo "Most common causes:"
          echo "  - Import path issues (check PYTHONPATH)"
          echo "  - Missing dependencies"
          echo "  - Test environment setup problems"
          exit 1
        }
        echo "✅ All tests passed with required coverage"

    - name: Comprehensive quality gate evaluation
      timeout-minutes: 10
      continue-on-error: true
      id: comprehensive_quality_check
      run: |
        echo "Starting comprehensive quality gate evaluation with debug mode..."
        python3 -m tools.automation.quality_checker --path kumihan_formatter --output tmp/comprehensive_quality.json --debug || {
          echo "Comprehensive quality check failed, continuing with partial evaluation"
          exit 1
        }
        echo "Quality gate evaluation completed"

    - name: Quality check error details
      if: steps.quality_check.outcome == 'failure'
      run: |
        echo "## Quality Checker Error Details" >> $GITHUB_STEP_SUMMARY
        echo "Quality checker failed but basic quality checks (formatting, lint) passed." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Possible causes:**" >> $GITHUB_STEP_SUMMARY
        echo "- External tool dependency issues" >> $GITHUB_STEP_SUMMARY
        echo "- File permission problems" >> $GITHUB_STEP_SUMMARY
        echo "- Python version compatibility" >> $GITHUB_STEP_SUMMARY
        echo "- AST parsing failures" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Action Required**: See Issues #1066-1069 for detailed fixes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: CI continuing in degraded mode - basic quality assured" >> $GITHUB_STEP_SUMMARY

    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports-${{ matrix.python-version }}
        path: |
          quality_report.json
          tmp/quality_report.json
          tmp/comprehensive_quality.json
          tmp/formatting_report.json
        retention-days: 7

    - name: Quality gate summary
      run: |
        echo "## 🛡️ Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Result | Notes |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Pre-commit hooks | ✅ | PASSED | Validated |" >> $GITHUB_STEP_SUMMARY
        echo "| Code formatting | ✅ | PASSED | black, isort OK |" >> $GITHUB_STEP_SUMMARY
        echo "| Lint check | ✅ | PASSED | flake8 OK |" >> $GITHUB_STEP_SUMMARY
        # 型チェック結果の条件付き表示
        if [ "${{ steps.type_check_core.outcome }}" = "success" ]; then
          echo "| Type check | ✅ | PASSED | Core modules only (Phase 1) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Type check | ⚠️ | PARTIAL | Core modules with issues (Phase 1) |" >> $GITHUB_STEP_SUMMARY
        fi
        echo "| Test coverage | ✅ | PASSED | ≥50% (段階的向上: 50%→60%→70%) |" >> $GITHUB_STEP_SUMMARY

        # Quality checker結果の条件付き表示
        if [ "${{ steps.quality_check.outcome }}" = "success" ] && [ "${{ steps.comprehensive_quality_check.outcome }}" = "success" ]; then
          echo "| Quality checker | ✅ | PASSED | Full automated analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Comprehensive evaluation | ✅ | PASSED | Complete quality gate |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎉 Result: Full Quality Gate PASSED" >> $GITHUB_STEP_SUMMARY
          echo "✅ All quality checks passed successfully"
        elif [ "${{ steps.quality_check.outcome }}" = "failure" ] || [ "${{ steps.comprehensive_quality_check.outcome }}" = "failure" ]; then
          echo "| Quality checker | ⚠️ | FAILED | Automated analysis failed |" >> $GITHUB_STEP_SUMMARY
          echo "| Comprehensive evaluation | ⚠️ | DEGRADED | Partial evaluation only |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ⚠️ Result: Quality Gate PASSED (Degraded Mode)" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ Quality gate passed with warnings - basic quality assured"
          echo "📋 Basic quality checks (formatting, lint, tests) all passed"
          echo "🔧 Advanced quality analysis failed - see error details above"
        else
          echo "| Quality checker | ✅ | PASSED | Automated analysis OK |" >> $GITHUB_STEP_SUMMARY
          echo "| Comprehensive evaluation | ⚠️ | PARTIAL | Some issues detected |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Result: Quality Gate PASSED" >> $GITHUB_STEP_SUMMARY
          echo "✅ Quality gate passed with minor issues"
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Development Workflow Status: CONTINUE ✅" >> $GITHUB_STEP_SUMMARY
