name: Quality Tests (Tier 1)

# 🔍 品質保証テスト - 重要な変更時に実行される詳細検証
# - 条件制御: コア機能変更時のみ実行
# - ドキュメント変更のみでは実行しない
# - 実行時間: 5-10分程度

on:
  push:
    branches: [ main ]
    # Phase2-A最適化: mainブランチではコア機能変更時のみ実行
    paths:
      - 'kumihan_formatter/**/*.py'
      - 'dev/tests/**/*.py'
      - 'pyproject.toml'
      - '.github/workflows/quality-tests.yml'  # 自身の変更時のみ
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'examples/**'
      - 'setup_*'
  pull_request:
    branches: [ main ]
    types: [ready_for_review, synchronize]
    # PR時はサンプルを含む幅広いチェックを実行
    paths:
      - 'kumihan_formatter/**'
      - 'dev/tests/**'
      - 'pyproject.toml'
      - 'examples/**/*.txt'
      - '.github/workflows/quality-tests.yml'
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'README*'
  workflow_dispatch:
    inputs:
      force_run:
        description: '手動実行'
        required: false
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-tests:
    name: Quality Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: []  # Critical Testsとは独立実行
    
    steps:
      - name: Display execution context
        run: |
          echo "## 🔍 Quality Tests (Tier 1) Execution" >> $GITHUB_STEP_SUMMARY
          echo "**Purpose**: Extended validation for core changes" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**PR State**: \${{ github.event.pull_request.draft && 'Draft (Skipped)' || 'Ready for Review' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Optimization**: Phase2-A (main branch path filtering)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Coverage (Tier 1)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Syntax Validation**: Complete Kumihan syntax check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Unit Tests**: Core functionality validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Integration Tests**: End-to-end conversion tests" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **Optimization**: Selective execution based on change impact" >> $GITHUB_STEP_SUMMARY
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Enhanced syntax validation
        run: |
          echo "🔍 Complete syntax validation..."
          
          # 全体的な構文チェック（警告含む）
          flake8 kumihan_formatter --count --max-complexity=15 --max-line-length=100 --statistics
          
          echo "✅ Enhanced syntax validation completed"
      
      - name: Kumihan syntax validation
        run: |
          echo "📝 Kumihan syntax validation..."
          
          # サンプルファイルのKumihan記法チェック
          if ls examples/*.txt >/dev/null 2>&1; then
            python dev/tools/syntax_validator.py examples/*.txt
            echo "✅ Example files syntax validated"
          else
            echo "⚠️ No example files found"
          fi
          
          # サンプル内容の妥当性チェック
          if [ -f "dev/tools/sample_content_validator.py" ]; then
            python dev/tools/sample_content_validator.py
            echo "✅ Sample content validated"
          fi
      
      - name: Unit tests execution
        run: |
          echo "🧪 Running unit tests..."
          
          # 単体テスト実行（詳細ログ付き）
          pytest dev/tests/ -v --tb=short --durations=10
          
          echo "✅ Unit tests completed"
      
      - name: Integration tests
        run: |
          echo "🔗 Running integration tests..."
          
          # 複数形式での変換テスト
          mkdir -p /tmp/quality_test_output
          
          # 基本変換テスト
          if [ -f "examples/01-quickstart.txt" ]; then
            echo "n" | python -m kumihan_formatter convert examples/01-quickstart.txt -o /tmp/quality_test_output --no-preview
            echo "✅ Basic conversion test passed"
          fi
          
          # ソース表示機能テスト
          if [ -f "examples/02-comprehensive.txt" ]; then
            echo "n" | python -m kumihan_formatter convert examples/02-comprehensive.txt -o /tmp/quality_test_output --with-source-toggle --no-preview
            echo "✅ Source toggle test passed"
          fi
          
          # サンプル生成テスト
          echo "n" | python -m kumihan_formatter generate-sample -o /tmp/quality_test_output
          echo "✅ Sample generation test passed"
      
      - name: Package functionality validation
        run: |
          echo "📦 Package functionality validation..."
          
          # 各モジュールの機能テスト
          python -c "
          from kumihan_formatter.parser import Parser
          from kumihan_formatter.renderer import Renderer
          from kumihan_formatter.config import Config
          
          # パーサテスト
          parser = Parser()
          ast = parser.parse(';;;見出し1\nテスト\n;;;')
          print('✅ Parser functionality validated')
          
          # レンダラテスト
          renderer = Renderer()
          html = renderer.render(ast)
          print('✅ Renderer functionality validated')
          
          # 設定テスト
          config = Config()
          print('✅ Config functionality validated')
          "
      
      - name: Performance validation
        run: |
          echo "⚡ Performance validation..."
          
          # 大きなファイルでのパフォーマンステスト
          python -c "
          import time
          from kumihan_formatter.parser import Parser
          from kumihan_formatter.renderer import Renderer
          
          # 大きなテストコンテンツ生成
          large_content = []
          for i in range(100):
              large_content.extend([
                  f';;;見出し2',
                  f'セクション {i}',
                  f';;;',
                  f'',
                  f'これはセクション {i} の内容です。',
                  f'',
                  f'- 項目1',
                  f'- 項目2',
                  f'- 項目3',
                  f''
              ])
          
          content = '\n'.join(large_content)
          
          # パフォーマンス測定
          start_time = time.time()
          parser = Parser()
          ast = parser.parse(content)
          renderer = Renderer()
          html = renderer.render(ast)
          end_time = time.time()
          
          duration = end_time - start_time
          print(f'✅ Performance test completed in {duration:.2f}s')
          
          if duration > 5.0:
              print(f'⚠️ Performance warning: took {duration:.2f}s (>5s)')
          else:
              print(f'✅ Performance acceptable: {duration:.2f}s (<5s)')
          "
      
      - name: Quality tests summary
        if: always()
        run: |
          echo ""
          echo "🔍 Quality Tests (Tier 1) completed"
          echo ""
          echo "✅ Extended validation ensures:"
          echo "  - Complete syntax and style compliance"
          echo "  - Kumihan markup syntax integrity"
          echo "  - Unit and integration test coverage"
          echo "  - Package functionality validation"
          echo "  - Performance within acceptable limits"
          echo ""
          echo "📈 Next level:"
          echo "  - Full Tests (Tier 2): Complete cross-platform matrix"
          echo "  - Coverage Report: Detailed code coverage analysis"