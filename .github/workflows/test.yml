name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # 軽量チェック（push時とPR時）
  quick-check:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Quick lint check
      run: |
        # 重要なエラーのみチェック
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Quick format check
      run: |
        black --check kumihan_formatter tests || true

    - name: Fast test run
      run: |
        pytest -x --ff -q tests/

  # フルチェック（PR時）
  full-test:
    if: github.event_name == 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      shell: bash
      run: |
        if [ -d "tests" ]; then
          black --check kumihan_formatter tests
        else
          echo "tests directory not found, checking only kumihan_formatter"
          black --check kumihan_formatter
        fi

    - name: Import sort check with isort
      shell: bash
      run: |
        if [ -d "tests" ]; then
          isort --check-only kumihan_formatter tests
        else
          echo "tests directory not found, checking only kumihan_formatter"
          isort --check-only kumihan_formatter
        fi

    - name: Test with pytest
      shell: bash
      run: |
        if [ -d "tests" ] && [ "$(find tests -name '*.py' -not -name '__init__.py' | wc -l)" -gt 0 ]; then
          pytest --cov=kumihan_formatter --cov-report=xml --cov-report=term
        else
          echo "No test files found, creating minimal test to ensure pytest works"
          mkdir -p tests
          echo "def test_minimal(): assert True" > tests/test_minimal.py
          pytest tests/test_minimal.py --cov=kumihan_formatter --cov-report=xml --cov-report=term
        fi

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Generate coverage badge
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        pip install coverage-badge
        coverage-badge -o coverage.svg -f

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          .coverage
