name: Test Quality Gate

# Issue #1120: テスト品質ガイドライン策定
# テスト肥大化防止のための自動品質チェック

on:
  pull_request:
    paths:
      - 'tests/**'
      - 'scripts/test_quality_checker.py'
      - 'docs/TESTING_GUIDELINES.md'
  push:
    branches: [main]
    paths:
      - 'tests/**'
  schedule:
    # 毎週月曜9時にテスト品質レビュー
    - cron: '0 9 * * 1'
  workflow_dispatch:

# 同時実行制御
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test_quality_check:
    runs-on: ubuntu-latest
    name: Test Quality Analysis

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Make test quality checker executable
      run: chmod +x scripts/test_quality_checker.py

    - name: Run Test Quality Check
      id: quality_check
      run: |
        echo "📊 テスト品質自動チェック実行中..."
        # 警告モード: 品質チェックを実行するが、CI/CDを失敗させない
        if python3 scripts/test_quality_checker.py --verbose; then
          echo "QUALITY_RESULT=success" >> $GITHUB_OUTPUT
        else
          echo "QUALITY_RESULT=warning" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Generate Quality Report
      run: |
        echo "📋 詳細品質レポート生成中..."
        python3 scripts/test_quality_checker.py --verbose > test_quality_report.txt

    - name: Upload Quality Report
      uses: actions/upload-artifact@v4
      with:
        name: test-quality-report-${{ github.run_number }}
        path: test_quality_report.txt
        retention-days: 30

    - name: Test Count Analysis
      run: |
        echo ""
        echo "📊 テスト数詳細分析"
        echo "=================="

        # 現在のテスト数
        TOTAL_TESTS=$(find tests -name 'test_*.py' -exec grep -h 'def test_' {} \; | wc -l)
        TOTAL_FILES=$(find tests -name 'test_*.py' | wc -l)

        echo "📈 現在の状況:"
        echo "  総テスト数: ${TOTAL_TESTS}"
        echo "  テストファイル数: ${TOTAL_FILES}"
        echo "  平均テスト密度: $((TOTAL_TESTS / TOTAL_FILES))個/ファイル"

        # Issue #1120基準との比較
        LIMIT=1500
        PERCENTAGE=$((TOTAL_TESTS * 100 / LIMIT))

        echo ""
        echo "🎯 ガイドライン基準との比較:"
        echo "  上限: ${LIMIT}個"
        echo "  現在: ${TOTAL_TESTS}個"
        echo "  使用率: ${PERCENTAGE}%"

        if [ $TOTAL_TESTS -gt $LIMIT ]; then
          echo "❌ テスト数上限超過 - 改善必要"
        elif [ $PERCENTAGE -gt 90 ]; then
          echo "⚠️ 上限に接近 - 注意が必要"
        else
          echo "✅ 適正範囲内"
        fi

    - name: Category Distribution Check
      run: |
        echo ""
        echo "📊 カテゴリ別テスト分布"
        echo "===================="

        # 主要カテゴリの分析
        echo "📋 主要カテゴリ:"

        if [ -d "tests/unit" ]; then
          UNIT_TESTS=$(find tests/unit -name 'test_*.py' -exec grep -h 'def test_' {} \; 2>/dev/null | wc -l)
          echo "  unit: ${UNIT_TESTS}個 (上限: 1450)"
        fi

        if [ -d "tests/integration" ]; then
          INTEGRATION_TESTS=$(find tests/integration -name 'test_*.py' -exec grep -h 'def test_' {} \; 2>/dev/null | wc -l)
          echo "  integration: ${INTEGRATION_TESTS}個 (上限: 100)"
        fi

        if [ -d "tests/performance" ]; then
          PERFORMANCE_TESTS=$(find tests/performance -name 'test_*.py' -exec grep -h 'def test_' {} \; 2>/dev/null | wc -l)
          echo "  performance: ${PERFORMANCE_TESTS}個 (上限: 50)"
        fi

        # サブカテゴリ分析
        echo ""
        echo "📋 unit サブカテゴリ:"
        for subdir in tests/unit/*/; do
          if [ -d "$subdir" ]; then
            SUBCAT_TESTS=$(find "$subdir" -name 'test_*.py' -exec grep -h 'def test_' {} \; 2>/dev/null | wc -l)
            SUBCAT_NAME=$(basename "$subdir")
            echo "  unit/${SUBCAT_NAME}: ${SUBCAT_TESTS}個"
          fi
        done

    - name: Test Growth Analysis (PR only)
      if: github.event_name == 'pull_request'
      run: |
        echo ""
        echo "📈 テスト増加分析 (PR)"
        echo "==================="

        # PRでの変更分析
        git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^tests/" | grep "test_.*\.py$" || echo "テストファイルの変更なし"

        # 新規追加テスト数
        NEW_TEST_FILES=$(git diff --name-only --diff-filter=A origin/${{ github.base_ref }}...HEAD | grep "^tests/" | grep "test_.*\.py$" | wc -l)

        if [ $NEW_TEST_FILES -gt 0 ]; then
          echo "📁 新規テストファイル: ${NEW_TEST_FILES}個"
          git diff --name-only --diff-filter=A origin/${{ github.base_ref }}...HEAD | grep "^tests/" | grep "test_.*\.py$" | while read file; do
            if [ -f "$file" ]; then
              NEW_TESTS=$(grep -c 'def test_' "$file")
              echo "  ${file}: ${NEW_TESTS}個のテスト"
            fi
          done
        fi

        # 修正されたテストファイル
        MODIFIED_TEST_FILES=$(git diff --name-only --diff-filter=M origin/${{ github.base_ref }}...HEAD | grep "^tests/" | grep "test_.*\.py$" | wc -l)

        if [ $MODIFIED_TEST_FILES -gt 0 ]; then
          echo "📝 修正テストファイル: ${MODIFIED_TEST_FILES}個"
        fi

    - name: Quality Gate Decision
      run: |
        echo ""
        echo "🚪 品質ゲート判定"
        echo "================"

        # 品質チェック結果の確認
        QUALITY_RESULT="${{ steps.quality_check.outputs.QUALITY_RESULT }}"
        echo "品質チェック結果: ${QUALITY_RESULT}"

        if [ "${QUALITY_RESULT}" = "warning" ]; then
          echo "⚠️ 品質改善推奨事項が検出されました（警告モード）"
          echo ""
          echo "📋 推奨対応（必須ではありません）:"
          echo "1. テスト品質レポートを確認"
          echo "2. docs/TESTING_GUIDELINES.md のガイドラインを参照"
          echo "3. python3 scripts/test_quality_checker.py で詳細確認"
          echo "4. 時間があるときに改善を実施"
          echo ""
          echo "🔗 詳細: https://github.com/${{ github.repository }}/blob/main/docs/TESTING_GUIDELINES.md"
          echo "✅ CI/CDは継続（警告モード）"
        else
          echo "✅ 全品質基準をクリア"
          echo ""
          echo "🎉 テスト品質が適切に維持されています。"
          echo "📊 定期的な品質監視により、持続可能な開発環境を実現。"
          echo ""
          echo "💡 継続改善:"
          echo "- 月次: テスト品質指標レビュー"
          echo "- 四半期: ガイドライン基準見直し"
        fi

    - name: Weekly Quality Summary (Schedule only)
      if: github.event_name == 'schedule'
      run: |
        echo ""
        echo "📅 週次品質サマリー"
        echo "=================="

        # 過去1週間のテスト変更状況
        SINCE_DATE=$(date -d '1 week ago' +%Y-%m-%d)
        echo "📊 過去1週間の変更 (${SINCE_DATE}以降):"

        # Gitログからテスト関連の変更を分析
        git log --since="${SINCE_DATE}" --oneline --grep="test" --grep="テスト" | head -10 | while read line; do
          echo "  ${line}"
        done || echo "  テスト関連の変更なし"

        echo ""
        echo "🔄 推奨アクション:"
        echo "- 品質レポートの確認"
        echo "- ガイドライン適用状況の評価"
        echo "- 必要に応じてテスト整理の実施"

    - name: Comment PR (PR only)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            const report = fs.readFileSync('test_quality_report.txt', 'utf8');
            const comment = `## 📊 テスト品質チェック結果

          このPRのテスト品質を自動分析しました。

          <details>
          <summary>📋 詳細レポート</summary>

          \`\`\`
          ${report}
          \`\`\`

          </details>

          ### 📖 参考ドキュメント
          - [テスト品質ガイドライン](https://github.com/${{ github.repository }}/blob/main/docs/TESTING_GUIDELINES.md)
          - [自動チェッカーの使用方法](https://github.com/${{ github.repository }}/blob/main/scripts/test_quality_checker.py)

          ### 🔧 ローカルでの確認方法
          \`\`\`bash
          python3 scripts/test_quality_checker.py --verbose
          \`\`\`

          ---
          🤖 Issue #1120: テスト品質ガイドライン策定`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('コメント作成をスキップ: レポートファイル未生成');
          }
