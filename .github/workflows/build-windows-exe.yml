name: Build Windows EXE (Experimental)

on:
  # Manual trigger only for experimental branch
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'experimental/windows-exe-packaging'
        type: choice
        options:
          - 'experimental/windows-exe-packaging'
      commit_results:
        description: 'Commit results back to branch?'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

  # Trigger on push to experimental branch only
  push:
    branches:
      - 'experimental/windows-exe-packaging'
    paths:
      - 'kumihan_formatter/**'
      - 'build_windows.py'
      - 'kumihan_formatter.spec'
      - 'version_info.txt'

jobs:
  build-windows-exe:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pyinstaller

    - name: Verify installation
      run: |
        python -c "import kumihan_formatter; print('✅ Package imported successfully')"
        python -c "import tkinter; print('✅ tkinter available')"
        pyinstaller --version

    - name: Clean previous builds
      run: |
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        Write-Host "✅ Cleaned previous builds"

    - name: Build Windows executable
      run: |
        Write-Host "🔨 Starting Windows EXE build..."
        pyinstaller --clean --noconfirm kumihan_formatter.spec
        Write-Host "✅ Build completed"

    - name: Create distribution package
      run: |
        Write-Host "📦 Creating distribution package..."

        # Check if executable exists
        if (-not (Test-Path "dist/Kumihan-Formatter.exe")) {
          Write-Host "❌ Executable not found"
          exit 1
        }

        $exeSize = (Get-Item "dist/Kumihan-Formatter.exe").Length / 1MB
        Write-Host "📊 Executable size: $([math]::Round($exeSize, 1)) MB"

        # Create ZIP package using PowerShell
        $packageName = "Kumihan-Formatter-v1.0-Windows"
        $zipPath = "dist/$packageName.zip"

        # Create README content
        $readmeContent = @'
Kumihan-Formatter v1.0 - Windows版

【インストール方法】
1. このZIPファイルを任意の場所に展開してください
2. Kumihan-Formatter.exe をダブルクリックして起動してください

【システム要件】
- Windows 10 / 11 (64-bit)
- インターネット接続不要
- Pythonのインストール不要

【使い方】
1. アプリケーションを起動
2. 「参照」ボタンから変換したいテキストファイルを選択
3. 「変換実行」ボタンをクリック

【サポート】
- GitHub: https://github.com/mo9mo9-uwu-mo9mo9/Kumihan-Formatter
- Issues: https://github.com/mo9mo9-uwu-mo9mo9/Kumihan-Formatter/issues

【ライセンス】
MIT License - Copyright © 2025 mo9mo9-uwu-mo9mo9
'@

        # Save README
        $readmeContent | Out-File -FilePath "dist/README.txt" -Encoding UTF8

        # Create ZIP
        Compress-Archive -Path "dist/Kumihan-Formatter.exe", "dist/README.txt" -DestinationPath $zipPath -Force

        $zipSize = (Get-Item $zipPath).Length / 1MB
        Write-Host "📦 Package size: $([math]::Round($zipSize, 1)) MB"
        Write-Host "✅ Distribution package created: $zipPath"

    - name: Verify build output
      run: |
        if (Test-Path "dist/Kumihan-Formatter.exe") {
          Write-Host "✅ Windows executable created successfully"
          $size = (Get-Item "dist/Kumihan-Formatter.exe").Length / 1MB
          Write-Host "📊 Executable size: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "❌ Executable not found"
          exit 1
        }

        if (Test-Path "dist/Kumihan-Formatter-v1.0-Windows.zip") {
          Write-Host "✅ Distribution package created"
          $zipSize = (Get-Item "dist/Kumihan-Formatter-v1.0-Windows.zip").Length / 1MB
          Write-Host "📦 Package size: $([math]::Round($zipSize, 1)) MB"
        } else {
          Write-Host "❌ Distribution package not found"
          exit 1
        }

    - name: Test executable (basic check)
      run: |
        Write-Host "🧪 Testing executable..."
        try {
          # Try to run executable with timeout (it's a GUI app)
          $process = Start-Process -FilePath "dist/Kumihan-Formatter.exe" -ArgumentList "--help" -Wait -PassThru -WindowStyle Hidden -RedirectStandardOutput "test_output.txt" -RedirectStandardError "test_error.txt"
          Write-Host "⚠️  Process exited with code: $($process.ExitCode) (expected for GUI app)"
        } catch {
          Write-Host "⚠️  GUI app test - normal behavior: $($_.Exception.Message)"
        }

        # Check if file is executable
        $fileInfo = Get-Item "dist/Kumihan-Formatter.exe"
        Write-Host "✅ File type verification passed"
        Write-Host "   File: $($fileInfo.Name)"
        Write-Host "   Size: $([math]::Round($fileInfo.Length / 1MB, 1)) MB"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kumihan-formatter-windows-exe-${{ github.run_number }}
        path: |
          dist/Kumihan-Formatter.exe
          dist/Kumihan-Formatter-v1.0-Windows.zip
          dist/README.txt
        retention-days: 30

    - name: Commit results to experimental branch
      if: ${{ github.event.inputs.commit_results == 'true' || github.event_name == 'push' }}
      run: |
        Write-Host "💾 Committing results to experimental branch..."

        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Add Windows build results
        git add -f dist/Kumihan-Formatter.exe
        git add -f dist/Kumihan-Formatter-v1.0-Windows.zip
        git add -f dist/README.txt

        # Check if there are changes to commit
        $changes = git diff --cached --name-only
        if ($changes) {
          Write-Host "📋 Files to commit:"
          $changes | ForEach-Object { Write-Host "   - $_" }

          # Commit changes
          git commit -m "feat: Windows EXE自動生成完了 (GitHub Actions)

- Windows 10/11対応のEXEファイル生成完了
- サイズ: $([math]::Round((Get-Item 'dist/Kumihan-Formatter.exe').Length / 1MB, 1)) MB
- 配布パッケージ: Kumihan-Formatter-v1.0-Windows.zip
- PyInstaller 6.x使用、全依存関係バンドル済み

🤖 Generated by GitHub Actions
Co-Authored-By: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

          # Push to experimental branch
          git push origin HEAD
          Write-Host "✅ Successfully committed and pushed Windows EXE to experimental branch"
        } else {
          Write-Host "ℹ️  No new changes to commit"
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build summary
      run: |
        Write-Host "## 🏗️ Windows Build Summary"
        Write-Host ""
        Write-Host "### ✅ Successfully built Windows executable"
        Write-Host ""
        Write-Host "- **Branch**: ${{ github.ref_name }}"
        Write-Host "- **Python Version**: 3.11"
        Write-Host "- **Build OS**: Windows Latest"
        Write-Host "- **PyInstaller**: $(pyinstaller --version)"
        Write-Host "- **Run Number**: ${{ github.run_number }}"
        Write-Host ""
        Write-Host "### 📦 Artifacts Created"
        Write-Host "- ``Kumihan-Formatter.exe`` - Windows executable"
        Write-Host "- ``Kumihan-Formatter-v1.0-Windows.zip`` - Distribution package"
        Write-Host "- ``README.txt`` - Installation instructions"
        Write-Host ""
        Write-Host "### 🔗 Next Steps"
        Write-Host "1. Download artifacts from GitHub Actions"
        Write-Host "2. Test on different Windows versions"
        Write-Host "3. Verify all GUI functionality works"
        Write-Host "4. Test file conversion and sample generation"
