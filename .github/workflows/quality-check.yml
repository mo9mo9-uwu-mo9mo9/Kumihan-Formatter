name: Quality Check

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Check file sizes and architecture (警告のみ)
      run: |
        echo "⚠️ 技術的負債チェック（Issue #497: 警告表示のみ）"
        python scripts/check_file_size.py --max-lines=300 || echo "📏 ファイルサイズ警告を検出"
        python scripts/architecture_check.py || echo "🏗️ アーキテクチャ警告を検出"

    - name: Code formatting check (Black)
      run: |
        if [ -d "tests" ]; then
          black --check kumihan_formatter/ tests/ || true
        else
          black --check kumihan_formatter/ || true
        fi

    - name: Import sorting check (isort)
      run: |
        if [ -d "tests" ]; then
          isort --check-only --diff kumihan_formatter/ tests/ || true
        else
          isort --check-only --diff kumihan_formatter/ || true
        fi

    - name: Linting (flake8)
      run: |
        if [ -d "tests" ]; then
          flake8 kumihan_formatter/ tests/ || true
        else
          flake8 kumihan_formatter/ || true
        fi

    - name: Type checking (mypy - strict mode)
      run: |
        echo "🔍 型チェック実行（strictモード）"
        mypy kumihan_formatter/ --strict

    - name: Run tests with coverage
      timeout-minutes: 10
      run: |
        echo "🧪 テスト実行（カバレッジ付き）"
        if [ -d "tests" ] && [ "$(find tests -name '*.py' -not -name '__init__.py' | wc -l)" -gt 0 ]; then
          # テスト実行（カバレッジ付き）
          pytest tests/ -v --cov=kumihan_formatter --cov-report=xml --cov-report=html
        else
          echo "⚠️ テストファイルが見つかりません。軽量テストを作成して実行します"
          echo "⚠️ Issue #554: テスト削除によりカバレッジ要件を一時的に緩和"
          mkdir -p tests
          echo "def test_minimal_import():" > tests/test_minimal.py
          echo "    \"\"\"最小限のインポートテスト\"\"\"" >> tests/test_minimal.py
          echo "    import kumihan_formatter" >> tests/test_minimal.py
          echo "    assert hasattr(kumihan_formatter, '__version__')" >> tests/test_minimal.py
          # カバレッジ要件を緩和して実行
          pytest tests/test_minimal.py --cov=kumihan_formatter --cov-report=xml --cov-report=html --cov-fail-under=0 || echo "⚠️ カバレッジ不足を警告として処理"
        fi

    - name: Upload coverage reports to Codecov
      if: true
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
