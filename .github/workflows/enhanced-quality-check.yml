name: Enhanced Quality Check (Temporarily Disabled)

on:
  workflow_dispatch:
  # pull_request: # Temporarily disabled to reduce workflow congestion
  # Phase 3: 完全自動化復旧
  # pull_request:
  #   branches: [ main, develop ]
  #   paths:
  #     - '**/*.txt'
  #     - 'dev/tools/**/*.py'
  #     - '.validation-config.yml'
  #     - 'kumihan_formatter/**/*.py'
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.txt'
      - 'dev/tools/**/*.py'
      - '.validation-config.yml'
      - 'kumihan_formatter/**/*.py'

jobs:
  enhanced-syntax-validation:
    runs-on: ubuntu-latest
    name: Enhanced Syntax Validation
    timeout-minutes: 15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pyyaml  # 設定ファイル読み込み用
        
    - name: Enhanced Syntax Validation - Examples
      run: |
        echo "🔍 Examplesファイルの厳格チェック..."
        if find examples -name "*.txt" -type f | head -1 | grep -q .; then
          find examples -name "*.txt" -type f | xargs python dev/tools/syntax_validator.py --mode=strict
        else
          echo "No examples files found"
        fi
        
    - name: Enhanced Syntax Validation - Error Samples
      run: |
        echo "🚨 エラーサンプルの検証..."
        echo "⏭️ エラーサンプル検証は現在無効化されています（Issueで改善中）"
        echo "📝 対象ファイル数: $(find . -name "*エラー*.txt" -o -name "*error*.txt" 2>/dev/null | wc -l || echo 0) ファイル"
        
    - name: Enhanced Syntax Validation - Auto Mode
      run: |
        echo "🔄 自動モード判定による全ファイルチェック..."
        if find . -name "*.txt" -type f -not -path "./.git/*" -not -path "./.venv/*" | head -1 | grep -q .; then
          find . -name "*.txt" -type f -not -path "./.git/*" -not -path "./.venv/*" | head -10 | xargs python dev/tools/syntax_validator.py
        else
          echo "No text files found"
        fi
        
    - name: Quality Metrics Report
      if: always()
      run: |
        echo "📊 品質メトリクス概要"
        echo "============================================"
        
        # ファイル数の集計
        EXAMPLES_COUNT=$(find examples -name "*.txt" -type f 2>/dev/null | wc -l || echo "0")
        ERROR_SAMPLES_COUNT=$(find . -name "*エラー*.txt" -o -name "*error*.txt" 2>/dev/null | wc -l || echo "0")
        TOTAL_TXT_COUNT=$(find . -name "*.txt" -type f -not -path "./.git/*" -not -path "./.venv/*" 2>/dev/null | wc -l || echo "0")
        
        echo "📂 ファイル統計:"
        echo "  - Examples: ${EXAMPLES_COUNT} ファイル"
        echo "  - Error Samples: ${ERROR_SAMPLES_COUNT} ファイル"
        echo "  - 総テキストファイル: ${TOTAL_TXT_COUNT} ファイル"
        
        # 品質ツールの実行可能性チェック
        echo ""
        echo "🛠️ 品質ツール状況:"
        if [ -f "dev/tools/syntax_validator.py" ]; then
          echo "  ✅ Syntax Validator: 利用可能"
        else
          echo "  ❌ Syntax Validator: 未インストール"
        fi
        
        if [ -f "dev/tools/syntax_fixer.py" ]; then
          echo "  ✅ Syntax Fixer: 利用可能"
        else
          echo "  ❌ Syntax Fixer: 未インストール"
        fi
        
        if [ -f ".validation-config.yml" ]; then
          echo "  ✅ Validation Config: 設定済み"
        else
          echo "  ⚠️ Validation Config: デフォルト設定使用"
        fi
        
        echo ""
        echo "✅ Enhanced Quality Check 完了"

  performance-benchmark:
    runs-on: ubuntu-latest
    name: Performance Benchmark
    timeout-minutes: 10
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pyyaml  # 設定ファイル読み込み用
        
    - name: Performance Test
      run: |
        echo "⚡ パフォーマンステスト実行中..."
        
        # サンプルファイルでの変換時間測定
        if [ -f "examples/01-quickstart.txt" ]; then
          echo "📊 変換時間ベンチマーク:"
          start_time=$(date +%s.%N)
          python -m kumihan_formatter.cli convert examples/01-quickstart.txt -o /tmp/bench_output --no-preview
          end_time=$(date +%s.%N)
          duration=$(echo "$end_time - $start_time" | bc)
          echo "  📝 examples/01-quickstart.txt: ${duration}s"
          
          # HTMLファイルサイズチェック
          if [ -f "/tmp/bench_output/examples/01-quickstart.html" ]; then
            html_size=$(stat -f%z "/tmp/bench_output/examples/01-quickstart.html" 2>/dev/null || stat -c%s "/tmp/bench_output/examples/01-quickstart.html" 2>/dev/null || echo "unknown")
            echo "  📦 HTML出力サイズ: ${html_size} bytes"
          fi
        else
          echo "⏭️ ベンチマーク用ファイルが見つかりません"
        fi
        
        # 品質基準チェック
        echo ""
        echo "🎯 品質基準確認:"
        echo "  - 変換時間目標: < 5.0秒"
        echo "  - HTMLサイズ目標: < 50KB (小規模ファイル)"
        echo "  - メモリ使用量目標: < 100MB"