name: Alpha Release Build

on:
  push:
    branches: [ "main" ]
    tags: [ "v*-alpha*" ]
  workflow_dispatch:
    inputs:
      version_suffix:
        description: 'Alpha version suffix (e.g., alpha.1)'
        required: true
        default: 'alpha.1'

jobs:
  # リリース前にビルドテストを実行
  test-builds:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
    - name: Trigger build tests
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: workflow } = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'build-test-packages.yml',
            ref: 'main',
            inputs: {
              test_windows: 'true',
              test_macos: 'true'
            }
          });

          console.log('Build test workflow triggered');

          // ワークフロー実行を待機
          await new Promise(resolve => setTimeout(resolve, 10000));

          // 最新のワークフロー実行を確認
          const { data: runs } = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'build-test-packages.yml',
            per_page: 1
          });

          if (runs.workflow_runs.length === 0) {
            throw new Error('No workflow runs found');
          }

          const runId = runs.workflow_runs[0].id;
          console.log(`Monitoring workflow run: ${runId}`);

          // ワークフローの完了を待機
          let attempts = 0;
          const maxAttempts = 60; // 30分待機

          while (attempts < maxAttempts) {
            const { data: run } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });

            console.log(`Attempt ${attempts + 1}: Status = ${run.status}, Conclusion = ${run.conclusion}`);

            if (run.status === 'completed') {
              if (run.conclusion === 'success') {
                console.log('Build tests passed successfully');
                return;
              } else {
                throw new Error(`Build tests failed with conclusion: ${run.conclusion}`);
              }
            }

            await new Promise(resolve => setTimeout(resolve, 30000)); // 30秒待機
            attempts++;
          }

          throw new Error('Build tests timed out');

  build:
    needs: test-builds
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: macos
            executable_name: kumihan_formatter_macos
          - os: windows-latest
            platform: windows
            executable_name: kumihan_formatter_windows.exe

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install pyinstaller Pillow PyYAML

    - name: Install package
      run: pip install -e .

    - name: Build executable
      run: |
        echo "from kumihan_formatter.cli import main; main()" > entry_point.py
        pyinstaller --onefile --name ${{ matrix.executable_name }} --add-data "kumihan_formatter/templates:kumihan_formatter/templates" entry_point.py

    - name: Test executable
      run: |
        ./dist/${{ matrix.executable_name }} --help

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-executable
        path: dist/${{ matrix.executable_name }}
        retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, 'alpha')
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create distribution packages
      run: |
        # Create distribution packages with README files
        cd macos-executable
        zip -r "../Kumihan-Formatter-${{ github.ref_name }}-macOS.zip" kumihan_formatter_macos
        cd ../windows-executable
        zip -r "../Kumihan-Formatter-${{ github.ref_name }}-Windows.zip" kumihan_formatter_windows.exe

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Kumihan-Formatter-${{ github.ref_name }}-macOS.zip
          Kumihan-Formatter-${{ github.ref_name }}-Windows.zip
        draft: false
        prerelease: true
        name: "Alpha Release ${{ github.ref_name }}"
        body: |
          ## アルファ版リリース - ${{ github.ref_name }}

          **⚠️ 警告: これはテスト版です**
          - 本番環境での使用は推奨されません
          - バグや不具合が含まれる可能性があります
          - フィードバックをお待ちしています

          ### 配布パッケージ
          - `Kumihan-Formatter-${{ github.ref_name }}-macOS.zip`: macOS用実行ファイル
          - `Kumihan-Formatter-${{ github.ref_name }}-Windows.zip`: Windows用実行ファイル

          ### 使用方法
          1. お使いのOS用のZIPファイルをダウンロード
          2. ZIPファイルを展開
          3. 実行権限を付与（macOSの場合）
          4. コマンドラインから実行

          ### ライセンス
          このソフトウェアはプロプライエタリライセンスです。
          改変・再配布は禁止されています。
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
