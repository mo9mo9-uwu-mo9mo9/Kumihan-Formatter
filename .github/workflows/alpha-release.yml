name: Alpha Release Build

on:
  push:
    branches: [ "main" ]
    tags: [ "v*-alpha*" ]
  workflow_dispatch:
    inputs:
      version_suffix:
        description: 'Alpha version suffix (e.g., alpha.1)'
        required: true
        default: 'alpha.1'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: macos
            executable_name: kumihan_formatter_macos
          - os: windows-latest
            platform: windows
            executable_name: kumihan_formatter_windows.exe

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install pyinstaller

    - name: Install package
      run: pip install -e .

    - name: Build executable
      run: |
        echo "from kumihan_formatter.gui_launcher import main; main()" > entry_point.py
        echo "=== Debug: Created entry_point.py ==="
        cat entry_point.py
        echo "=== Debug: Platform = ${{ matrix.platform }} ==="
        echo "=== Debug: Available templates ==="
        ls -la kumihan_formatter/templates/ || echo "Templates directory not found"
        if [ "${{ matrix.platform }}" = "macos" ]; then
          echo "=== Building for macOS ==="
          pyinstaller --onefile --windowed --name ${{ matrix.executable_name }} --add-data "kumihan_formatter/templates:kumihan_formatter/templates" entry_point.py
        else
          echo "=== Building for Windows ==="
          pyinstaller --onefile --windowed --name ${{ matrix.executable_name }} --add-data "kumihan_formatter/templates;kumihan_formatter/templates" entry_point.py
        fi
        echo "=== Debug: Build completed, checking output ==="
        ls -la dist/

    - name: Test executable
      run: |
        if [ "${{ matrix.platform }}" = "macos" ]; then
          # Mac: Test .app bundle or executable
          if [ -d "./dist/${{ matrix.executable_name }}.app" ]; then
            echo "Testing .app bundle"
            ./dist/${{ matrix.executable_name }}.app/Contents/MacOS/${{ matrix.executable_name }} || echo "GUI test completed"
          else
            echo "Testing executable"
            timeout 5 ./dist/${{ matrix.executable_name }} || echo "GUI test completed"
          fi
        else
          # Windows: Test executable with timeout
          echo "Testing Windows executable"
          timeout 5 ./dist/${{ matrix.executable_name }} || echo "GUI test completed"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-executable
        path: |
          dist/${{ matrix.executable_name }}*
        retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, 'alpha')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          macos-executable/*
          windows-executable/*
        draft: false
        prerelease: true
        name: "Alpha Release ${{ github.ref_name }}"
        body: |
          ## アルファ版リリース - ${{ github.ref_name }}

          **⚠️ 警告: これはテスト版です**
          - 本番環境での使用は推奨されません
          - バグや不具合が含まれる可能性があります
          - フィードバックをお待ちしています

          ### 実行ファイル
          - `kumihan_formatter_macos`: macOS用実行ファイル
          - `kumihan_formatter_windows.exe`: Windows用実行ファイル

          ### 使用方法
          1. お使いのOS用のファイルをダウンロード
          2. 実行権限を付与（macOSの場合）
          3. コマンドラインから実行

          ### ライセンス
          このソフトウェアはプロプライエタリライセンスです。
          改変・再配布は禁止されています。
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
