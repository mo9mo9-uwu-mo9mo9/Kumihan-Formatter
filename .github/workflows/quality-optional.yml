# オプション品質チェック - Issue #602対応
name: Quality Check (Optional)
run-name: 🎯 Optional Quality Check - ${{ github.event.pull_request.title || github.ref }}

on:
  # 週1回の定期実行（日曜日 午前9時 JST）
  schedule:
    - cron: '0 0 * * 0'  # UTC 0:00 = JST 9:00

  # リリースPR時（release/**ブランチ）
  pull_request:
    branches:
      - 'release/**'

  # 手動実行
  workflow_dispatch:
    inputs:
      run_full_analysis:
        description: '完全分析を実行'
        required: false
        default: 'false'
        type: boolean

jobs:
  # ティア別品質ゲート
  tiered-quality-gate:
    name: 🎯 ティア別品質ゲート
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - name: チェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Pythonセットアップ
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: 依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: ティア別品質チェック実行
      run: |
        echo "🔍 ティア別品質チェック実行中..."
        python scripts/tiered_quality_gate.py > quality_report.txt 2>&1 || true
        cat quality_report.txt

    - name: 段階的改善プラン
      if: ${{ github.event.inputs.run_full_analysis == 'true' || github.event_name == 'schedule' }}
      run: |
        echo "## 📊 段階的改善プラン" >> $GITHUB_STEP_SUMMARY
        python scripts/gradual_improvement_planner.py --summary >> $GITHUB_STEP_SUMMARY || true

  # アーキテクチャ分析（週次のみ）
  architecture-analysis:
    name: 🏗️ アーキテクチャ分析
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ github.event_name == 'schedule' || github.event.inputs.run_full_analysis == 'true' }}
    steps:
    - name: チェックアウト
      uses: actions/checkout@v4

    - name: Pythonセットアップ
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: メトリクス依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon
        pip install -e .

    - name: アーキテクチャチェック
      run: |
        echo "## 🏗️ アーキテクチャ分析結果" >> $GITHUB_STEP_SUMMARY
        python scripts/architecture_check.py --target-dir=kumihan_formatter >> $GITHUB_STEP_SUMMARY || echo "アーキテクチャ改善推奨" >> $GITHUB_STEP_SUMMARY

    - name: コード複雑度分析
      run: |
        echo "## 📊 コード複雑度分析" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        radon cc kumihan_formatter/ --min=B --show-complexity || true
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: コードベース統計
      run: |
        echo "## 📈 コードベース統計" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "=== ファイル統計 ==="
        find kumihan_formatter -name "*.py" | wc -l | xargs echo "Pythonファイル数:"
        find kumihan_formatter -name "*.py" -exec wc -l {} + | tail -1 | awk '{print "総行数: " $1}'
        echo ""
        echo "=== Issue #602統合効果 ==="
        echo "Phase 0-2完了: 9ファイル統合による品質向上達成"
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # 結果サマリー
  quality-summary:
    name: 📋 品質チェック結果
    runs-on: ubuntu-latest
    needs: [tiered-quality-gate, architecture-analysis]
    if: always()
    steps:
    - name: 結果集計
      run: |
        echo "# 🎯 オプション品質チェック結果" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**実行タイミング**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.tiered-quality-gate.result }}" == "success" ]; then
          echo "✅ **ティア別品質ゲート**: 完了" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **ティア別品質ゲート**: 改善推奨" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.architecture-analysis.result }}" == "success" ]; then
          echo "✅ **アーキテクチャ分析**: 完了" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.architecture-analysis.result }}" == "skipped" ]; then
          echo "⏭️ **アーキテクチャ分析**: スキップ" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **アーキテクチャ分析**: 改善推奨" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "💡 **注意**: このチェックは参考情報です。PRはブロックされません。" >> $GITHUB_STEP_SUMMARY
