name: Coverage Report

on:
  push:
    branches: [ main ]  # mainブランチマージ時は必ず実行
    paths:
      - 'kumihan_formatter/**'
      - 'dev/tests/**'
      - 'pyproject.toml'
      - '.github/workflows/coverage.yml'
  pull_request:
    types: [ready_for_review, synchronize]  # Phase2.5: ドラフト中は実行しない
    branches: [ main ]
    paths:
      - 'kumihan_formatter/**/*.py'
      - 'dev/tests/**/*.py'
      - 'pyproject.toml'
      - '.github/workflows/coverage.yml'
    paths-ignore:
      # Phase2.5: 軽微な変更では実行しない（AI開発機動力確保）
      - '**/*.md'             # ドキュメント変更のみ除外
      # NOTE: テストファイル変更時もカバレッジ測定は重要（品質保証）
  workflow_dispatch:  # 手動実行（重要なオプション）
    inputs:
      force_run:
        description: '強制実行（ドラフトPRでも実行）'
        required: false
        default: false
        type: boolean
      target_branch:
        description: '対象ブランチ（デフォルト：現在のブランチ）'
        required: false
        default: ''
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Phase2最適化: タイムアウト設定追加
    
    steps:
      - name: Display execution context
        run: |
          echo "## 📊 Coverage Report Execution Context" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**PR State**: ${{ github.event.pull_request.draft && 'Draft' || 'Ready for Review' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Phase2.5 Optimization" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **AI Development Agility**: Skipped for draft PRs and minor changes" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Quality Assurance**: Executed for ready-for-review PRs and main branch" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Manual Override**: Available via workflow_dispatch" >> $GITHUB_STEP_SUMMARY
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Run tests with coverage
        run: |
          pytest --cov=kumihan_formatter --cov-report=xml --cov-report=term-missing dev/tests/ || echo "Some tests failed, but coverage will still be generated"
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Coverage comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINIMUM_GREEN: 80
          MINIMUM_ORANGE: 70
          ANNOTATE_MISSING_LINES: true
      
      - name: Generate coverage badge
        run: |
          pip install coverage-badge
          coverage-badge -o coverage.svg
      
      - name: Upload coverage badge
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: coverage.svg
      
      - name: Coverage analysis
        run: |
          python dev/tools/coverage_analyzer.py