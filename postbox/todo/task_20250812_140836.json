{
  "task_id": "task_20250812_140836",
  "type": "micro_code_modification",
  "priority": "high",
  "description": "type-arg バッチ修正 - kumihan_formatter/core/utilities/parallel_processor.py Batch#2",
  "target_files": [
    "kumihan_formatter/core/utilities/parallel_processor.py"
  ],
  "requirements": {
    "error_type": "type-arg",
    "batch_info": {
      "batch_id": 2,
      "tasks": [
        {
          "type": "micro_fix",
          "target_file": "kumihan_formatter/core/utilities/parallel_processor.py",
          "target_function": "get_parallel_metrics",
          "error_type": "type-arg",
          "error_count": 1,
          "errors": [
            {
              "file": "kumihan_formatter/core/utilities/parallel_processor.py",
              "line": 350,
              "message": "Missing type parameters for generic type \"dict\" ",
              "error_code": "type-arg"
            }
          ],
          "function_code": [
            "350:     def get_parallel_metrics(self) -> dict:",
            "351:         \"\"\"並列処理メトリクスを取得\"\"\"",
            "352:         return {",
            "353:             \"max_workers\": self.max_workers,",
            "354:             \"chunk_size\": self.chunk_size,",
            "355:             \"cpu_count\": os.cpu_count(),",
            "356:             \"active_threads\": threading.active_count(),",
            "357:         }",
            "358: "
          ],
          "flash_instruction": "🎯 修正対象: get_parallel_metrics関数\n🔧 修正内容: List[str], Dict[str, int] など具体的な型を指定\n📊 エラー数: 1件\n\n📝 具体的手順:\n1. get_parallel_metrics関数を見つける\n2. List[str], Dict[str, int] など具体的な型を指定\n3. 修正例: items: List[str] = []\n\n⚠️ 注意:\n- 既存のロジックは変更しない\n- インポート文が必要な場合は追加\n- 修正後の形式を正確に確認\n\n🐛 修正対象エラー:\n1. Line 350: Missing type parameters for generic type \"dict\"",
          "complexity": "medium",
          "estimated_time": 2
        },
        {
          "type": "micro_fix",
          "target_file": "kumihan_formatter/core/utilities/parallel_processor.py",
          "target_function": "parse_file_parallel",
          "error_type": "type-arg",
          "error_count": 1,
          "errors": [
            {
              "file": "kumihan_formatter/core/utilities/parallel_processor.py",
              "line": 490,
              "message": "Missing type parameters for generic type \"Callable\" ",
              "error_code": "type-arg"
            }
          ],
          "function_code": [],
          "flash_instruction": "🎯 修正対象: parse_file_parallel関数\n🔧 修正内容: List[str], Dict[str, int] など具体的な型を指定\n📊 エラー数: 1件\n\n📝 具体的手順:\n1. parse_file_parallel関数を見つける\n2. List[str], Dict[str, int] など具体的な型を指定\n3. 修正例: items: List[str] = []\n\n⚠️ 注意:\n- 既存のロジックは変更しない\n- インポート文が必要な場合は追加\n- 修正後の形式を正確に確認\n\n🐛 修正対象エラー:\n1. Line 490: Missing type parameters for generic type \"Callable\"",
          "complexity": "medium",
          "estimated_time": 2
        },
        {
          "type": "micro_fix",
          "target_file": "kumihan_formatter/core/utilities/parallel_processor.py",
          "target_function": "parse_text_parallel",
          "error_type": "type-arg",
          "error_count": 1,
          "errors": [
            {
              "file": "kumihan_formatter/core/utilities/parallel_processor.py",
              "line": 517,
              "message": "Missing type parameters for generic type \"Callable\" ",
              "error_code": "type-arg"
            }
          ],
          "function_code": [],
          "flash_instruction": "🎯 修正対象: parse_text_parallel関数\n🔧 修正内容: List[str], Dict[str, int] など具体的な型を指定\n📊 エラー数: 1件\n\n📝 具体的手順:\n1. parse_text_parallel関数を見つける\n2. List[str], Dict[str, int] など具体的な型を指定\n3. 修正例: items: List[str] = []\n\n⚠️ 注意:\n- 既存のロジックは変更しない\n- インポート文が必要な場合は追加\n- 修正後の形式を正確に確認\n\n🐛 修正対象エラー:\n1. Line 517: Missing type parameters for generic type \"Callable\"",
          "complexity": "medium",
          "estimated_time": 2
        }
      ],
      "estimated_time": 6,
      "complexity": "medium"
    },
    "micro_tasks": [
      {
        "type": "micro_fix",
        "target_file": "kumihan_formatter/core/utilities/parallel_processor.py",
        "target_function": "get_parallel_metrics",
        "error_type": "type-arg",
        "error_count": 1,
        "errors": [
          {
            "file": "kumihan_formatter/core/utilities/parallel_processor.py",
            "line": 350,
            "message": "Missing type parameters for generic type \"dict\" ",
            "error_code": "type-arg"
          }
        ],
        "function_code": [
          "350:     def get_parallel_metrics(self) -> dict:",
          "351:         \"\"\"並列処理メトリクスを取得\"\"\"",
          "352:         return {",
          "353:             \"max_workers\": self.max_workers,",
          "354:             \"chunk_size\": self.chunk_size,",
          "355:             \"cpu_count\": os.cpu_count(),",
          "356:             \"active_threads\": threading.active_count(),",
          "357:         }",
          "358: "
        ],
        "flash_instruction": "🎯 修正対象: get_parallel_metrics関数\n🔧 修正内容: List[str], Dict[str, int] など具体的な型を指定\n📊 エラー数: 1件\n\n📝 具体的手順:\n1. get_parallel_metrics関数を見つける\n2. List[str], Dict[str, int] など具体的な型を指定\n3. 修正例: items: List[str] = []\n\n⚠️ 注意:\n- 既存のロジックは変更しない\n- インポート文が必要な場合は追加\n- 修正後の形式を正確に確認\n\n🐛 修正対象エラー:\n1. Line 350: Missing type parameters for generic type \"dict\"",
        "complexity": "medium",
        "estimated_time": 2
      },
      {
        "type": "micro_fix",
        "target_file": "kumihan_formatter/core/utilities/parallel_processor.py",
        "target_function": "parse_file_parallel",
        "error_type": "type-arg",
        "error_count": 1,
        "errors": [
          {
            "file": "kumihan_formatter/core/utilities/parallel_processor.py",
            "line": 490,
            "message": "Missing type parameters for generic type \"Callable\" ",
            "error_code": "type-arg"
          }
        ],
        "function_code": [],
        "flash_instruction": "🎯 修正対象: parse_file_parallel関数\n🔧 修正内容: List[str], Dict[str, int] など具体的な型を指定\n📊 エラー数: 1件\n\n📝 具体的手順:\n1. parse_file_parallel関数を見つける\n2. List[str], Dict[str, int] など具体的な型を指定\n3. 修正例: items: List[str] = []\n\n⚠️ 注意:\n- 既存のロジックは変更しない\n- インポート文が必要な場合は追加\n- 修正後の形式を正確に確認\n\n🐛 修正対象エラー:\n1. Line 490: Missing type parameters for generic type \"Callable\"",
        "complexity": "medium",
        "estimated_time": 2
      },
      {
        "type": "micro_fix",
        "target_file": "kumihan_formatter/core/utilities/parallel_processor.py",
        "target_function": "parse_text_parallel",
        "error_type": "type-arg",
        "error_count": 1,
        "errors": [
          {
            "file": "kumihan_formatter/core/utilities/parallel_processor.py",
            "line": 517,
            "message": "Missing type parameters for generic type \"Callable\" ",
            "error_code": "type-arg"
          }
        ],
        "function_code": [],
        "flash_instruction": "🎯 修正対象: parse_text_parallel関数\n🔧 修正内容: List[str], Dict[str, int] など具体的な型を指定\n📊 エラー数: 1件\n\n📝 具体的手順:\n1. parse_text_parallel関数を見つける\n2. List[str], Dict[str, int] など具体的な型を指定\n3. 修正例: items: List[str] = []\n\n⚠️ 注意:\n- 既存のロジックは変更しない\n- インポート文が必要な場合は追加\n- 修正後の形式を正確に確認\n\n🐛 修正対象エラー:\n1. Line 517: Missing type parameters for generic type \"Callable\"",
        "complexity": "medium",
        "estimated_time": 2
      }
    ],
    "flash_instruction": "\n🚀 Flash 2.5 バッチ修正指示\n\n📦 バッチ概要:\n- 修正対象: 3個の関数\n- エラータイプ: ジェネリック型引数不足\n- 難易度: medium\n\n\n🎯 ジェネリック型引数追加\n📝 手順:\n1. List, Dict, Set, Tuple を見つける\n2. 角括弧[]で型引数を追加\n3. 型引数の選び方:\n   - List[str]: 文字列のリスト\n   - Dict[str, Any]: 文字列キー、任意の値\n   - Set[int]: 整数のセット\n\n✅ 修正例:\nitems: List = []  → items: List[str] = []\ndata: Dict = {}   → data: Dict[str, Any] = {}\n\n💡 よく使う型:\n- str, int, bool (基本型)\n- Any (なんでも)\n\n\n📋 修正対象リスト:\n1. get_parallel_metrics関数 (1エラー)\n2. parse_file_parallel関数 (1エラー)\n3. parse_text_parallel関数 (1エラー)\n\n⚡ Flash 2.5 最適化ルール:\n1. 上記リストの順番で1つずつ修正\n2. 各関数の修正完了後、次の関数へ\n3. 分からない場合は type: ignore 使用\n4. 修正時間: 1関数あたり最大5分\n\n🎯 成功パターン:\n- 例に従った正確な修正\n- 既存コードの最小変更\n- 段階的な進行\n",
    "max_context_tokens": 2000,
    "step_by_step": true
  },
  "claude_analysis": "\n📊 Claude微細タスク分析 - type-arg\n\n🎯 対象ファイル: kumihan_formatter/core/utilities/parallel_processor.py\n🔧 エラータイプ: type-arg\n📦 バッチサイズ: 3件\n\n🧠 分析結果:\n\n  • get_parallel_metrics関数:\n    - エラー数: 1件\n    - 複雑度: medium\n    - 推定時間: 2分\n    - Flash指示: 適用済み\n\n  • parse_file_parallel関数:\n    - エラー数: 1件\n    - 複雑度: medium\n    - 推定時間: 2分\n    - Flash指示: 適用済み\n\n  • parse_text_parallel関数:\n    - エラー数: 1件\n    - 複雑度: medium\n    - 推定時間: 2分\n    - Flash指示: 適用済み\n\n⚠️ Flash 2.5 考慮事項:\n- コンテキスト制限: 2000トークン以内\n- 具体的例示による指示\n- 段階的実行による確実性\n- エラー時の適切なフォールバック\n\n📋 推奨アプローチ:\n1. 関数単位での逐次処理\n2. 修正パターンの厳格適用\n3. 各ステップでの検証\n4. 予期しない状況でのtype: ignore使用\n",
  "expected_outcome": "バッチ内全タスク完了 (3件)",
  "constraints": [
    "Flash 2.5コンテキスト制限遵守",
    "1バッチ20分以内",
    "具体的指示に従った修正のみ"
  ],
  "context": {
    "batch_id": 2,
    "total_batches": 2,
    "execution_plan": {
      "max_context_per_task": 2000,
      "simple_instruction_style": true,
      "concrete_examples": true,
      "step_by_step": true
    },
    "session_id": "session_20250812_140752"
  },
  "timestamp": "2025-08-12T14:08:36.880817",
  "created_by": "claude_code"
}
