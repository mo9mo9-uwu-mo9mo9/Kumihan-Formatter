#!/usr/bin/env bash
# Kumihan-Formatter macOS App Launcher
# Auto-generated launcher script for easy double-click execution

set -e

# アプリバンドル内のパス設定
APP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
PROJECT_DIR="$(cd "$APP_DIR/.." && pwd)"
# より安全なスクリプト検索（フォールバック対応）
PYTHON_SCRIPT_CANDIDATES=(
    "$PROJECT_DIR/Kumihan変換ツール.py"
    "$PROJECT_DIR/kumihan_interactive.py"
    "$PROJECT_DIR/KumihanConverter.py"
)

PYTHON_SCRIPT=""
for script in "${PYTHON_SCRIPT_CANDIDATES[@]}"; do
    if [ -f "$script" ]; then
        PYTHON_SCRIPT="$script"
        break
    fi
done

# ログファイル設定
LOG_FILE="$HOME/Library/Logs/Kumihan-Formatter.log"
mkdir -p "$(dirname "$LOG_FILE")"

echo "$(date): Kumihan-Formatter starting..." >> "$LOG_FILE"
echo "APP_DIR: $APP_DIR" >> "$LOG_FILE"
echo "PROJECT_DIR: $PROJECT_DIR" >> "$LOG_FILE"
echo "PYTHON_SCRIPT: $PYTHON_SCRIPT" >> "$LOG_FILE"

# Python環境の検出と設定
detect_python() {
    local python_candidates=(
        "python3.12"
        "python3.11" 
        "python3.10"
        "python3.9"
        "python3"
        "python"
    )
    
    for py in "${python_candidates[@]}"; do
        if command -v "$py" >/dev/null 2>&1; then
            # より正確なバージョン比較
            if $py -c "import sys; exit(0 if sys.version_info >= (3, 9) else 1)" 2>/dev/null; then
                echo "$py"
                return 0
            fi
        fi
    done
    return 1
}

# Python実行環境確認
PYTHON_CMD=$(detect_python)
if [ $? -ne 0 ]; then
    echo "$(date): ERROR: Python 3.9+ not found" >> "$LOG_FILE"
    osascript -e 'display alert "Python環境エラー" message "Python 3.9以上がインストールされていません。\n\nHomebrew等でPythonをインストールしてください:\nbrew install python@3.12" buttons {"OK"} default button "OK"'
    exit 1
fi

echo "$(date): Using Python: $PYTHON_CMD ($($PYTHON_CMD --version))" >> "$LOG_FILE"

# 作業ディレクトリをプロジェクトルートに設定
cd "$PROJECT_DIR"

# Python環境チェック & 依存関係確認
check_dependencies() {
    echo "$(date): Checking dependencies..." >> "$LOG_FILE"
    
    if ! $PYTHON_CMD -c "import kumihan_formatter" >/dev/null 2>&1; then
        echo "$(date): Kumihan-Formatter not found, requesting user permission for installation..." >> "$LOG_FILE"
        
        # ユーザーに確認を求める
        user_choice=$(osascript -e 'display dialog "Kumihan-Formatterの依存関係をインストールする必要があります。\n\n自動インストールを実行しますか？" buttons {"キャンセル", "手動で実行", "自動インストール"} default button "自動インストール"' 2>/dev/null | awk -F'button returned:' '{print $2}' || echo "キャンセル")
        
        case "$user_choice" in
            "自動インストール")
                echo "$(date): User approved automatic installation" >> "$LOG_FILE"
                if ! $PYTHON_CMD -m pip install -e . >> "$LOG_FILE" 2>&1; then
                    echo "$(date): ERROR: Failed to install dependencies" >> "$LOG_FILE"
                    osascript -e 'display alert "依存関係エラー" message "自動インストールに失敗しました。\n\nターミナルで手動実行してください:\ncd '"'$PROJECT_DIR'"'\npython3 -m pip install -e ." buttons {"OK"} default button "OK"'
                    return 1
                fi
                ;;
            "手動で実行")
                echo "$(date): User chose manual installation" >> "$LOG_FILE"
                osascript -e 'display alert "手動インストール" message "ターミナルで以下を実行してください:\n\ncd '"'$PROJECT_DIR'"'\npython3 -m pip install -e .\n\n完了後、再度アプリを起動してください。" buttons {"OK"} default button "OK"'
                return 1
                ;;
            *)
                echo "$(date): User cancelled installation" >> "$LOG_FILE"
                return 1
                ;;
        esac
    fi
    
    return 0
}

# メイン実行スクリプトの存在確認（改善版）
if [ -z "$PYTHON_SCRIPT" ] || [ ! -f "$PYTHON_SCRIPT" ]; then
    echo "$(date): No valid Python script found in candidates" >> "$LOG_FILE"
    osascript -e 'display alert "スクリプトファイルエラー" message "Kumihan変換ツール.py または kumihan_interactive.py が見つかりません。\n\nプロジェクトルートに適切なスクリプトファイルがあることを確認してください。\n\n候補: Kumihan変換ツール.py, kumihan_interactive.py" buttons {"OK"} default button "OK"'
    exit 1
fi

echo "$(date): Using script: $PYTHON_SCRIPT" >> "$LOG_FILE"

# 依存関係チェック
if ! check_dependencies; then
    exit 1
fi

# Kumihan-Formatter GUI起動
echo "$(date): Launching Kumihan-Formatter GUI..." >> "$LOG_FILE"

# ターミナルウィンドウで実行（ユーザーとの対話が必要なため）
osascript << EOF
tell application "Terminal"
    activate
    set newTab to do script "cd '$PROJECT_DIR' && '$PYTHON_CMD' '$PYTHON_SCRIPT'"
    set custom title of newTab to "🚀 Kumihan-Formatter"
end tell
EOF

echo "$(date): Kumihan-Formatter launched successfully" >> "$LOG_FILE"