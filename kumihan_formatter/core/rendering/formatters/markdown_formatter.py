"""MarkdownÂá∫ÂäõÂ∞ÇÁî®„Éï„Ç©„Éº„Éû„ÉÉ„Çø„Éº

Issue #912 RendererÁ≥ªÁµ±Âêà„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞ÂØæÂøú
MarkdownÂá∫Âäõ„Å´ÁâπÂåñ„Åó„ÅüÁµ±Âêà„Éï„Ç©„Éº„Éû„ÉÉ„Çø„Éº„ÇØ„É©„Çπ
"""

import re
from datetime import datetime
from typing import Any, Dict, List, Optional

from ...ast_nodes import Node
from ...utilities.logger import get_logger
from ..base.renderer_protocols import (
    MarkdownRendererProtocol,
    RenderContext,
    RenderResult,
    create_render_result,
)


class MarkdownFormatter(MarkdownRendererProtocol):
    """MarkdownÂá∫ÂäõÂ∞ÇÁî®„Éï„Ç©„Éº„Éû„ÉÉ„Çø„Éº

    Áµ±Âêà„Åï„Çå„ÅüÊ©üËÉΩ:
    - MarkdownË¶ÅÁ¥†„É¨„É≥„ÉÄ„É™„É≥„Ç∞
    - HTML‚ÜíMarkdown„Éë„Çø„Éº„É≥Â§âÊèõ
    - ÊÆµËêΩ„ÉªË¶ãÂá∫„ÅóÂá¶ÁêÜ
    - MarkdownË®òÊ≥ïÊ∫ñÊã†Âá∫Âäõ
    """

    def __init__(self, config: Optional[Any] = None) -> None:
        """Markdown „Éï„Ç©„Éº„Éû„ÉÉ„Çø„Éº„ÇíÂàùÊúüÂåñ

        Args:
            config: Ë®≠ÂÆö„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÔºà„Ç™„Éó„Ç∑„Éß„Éä„É´Ôºâ
        """
        self.logger = get_logger(__name__)
        self.config = config

        # Markdown„Éë„Çø„Éº„É≥ÂÆöÁæ©
        self.patterns = {
            "h1": re.compile(r"<h1[^>]*>(.*?)</h1>", re.IGNORECASE | re.DOTALL),
            "h2": re.compile(r"<h2[^>]*>(.*?)</h2>", re.IGNORECASE | re.DOTALL),
            "h3": re.compile(r"<h3[^>]*>(.*?)</h3>", re.IGNORECASE | re.DOTALL),
            "h4": re.compile(r"<h4[^>]*>(.*?)</h4>", re.IGNORECASE | re.DOTALL),
            "h5": re.compile(r"<h5[^>]*>(.*?)</h5>", re.IGNORECASE | re.DOTALL),
            "h6": re.compile(r"<h6[^>]*>(.*?)</h6>", re.IGNORECASE | re.DOTALL),
            "strong": re.compile(
                r"<strong[^>]*>(.*?)</strong>", re.IGNORECASE | re.DOTALL
            ),
            "em": re.compile(r"<em[^>]*>(.*?)</em>", re.IGNORECASE | re.DOTALL),
            "code": re.compile(r"<code[^>]*>(.*?)</code>", re.IGNORECASE | re.DOTALL),
            "pre": re.compile(r"<pre[^>]*>(.*?)</pre>", re.IGNORECASE | re.DOTALL),
            "ul": re.compile(r"<ul[^>]*>(.*?)</ul>", re.IGNORECASE | re.DOTALL),
            "ol": re.compile(r"<ol[^>]*>(.*?)</ol>", re.IGNORECASE | re.DOTALL),
            "li": re.compile(r"<li[^>]*>(.*?)</li>", re.IGNORECASE | re.DOTALL),
            "a": re.compile(
                r'<a[^>]*href="([^"]*)"[^>]*>(.*?)</a>', re.IGNORECASE | re.DOTALL
            ),
            "img": re.compile(
                r'<img[^>]*src="([^"]*)"[^>]*alt="([^"]*)"[^>]*/?>', re.IGNORECASE
            ),
            "br": re.compile(r"<br\s*/?>\s*", re.IGNORECASE),
            "p": re.compile(r"<p[^>]*>(.*?)</p>", re.IGNORECASE | re.DOTALL),
        }

        self.logger.debug("MarkdownFormatter initialized")

    def format(self, nodes: List[Node]) -> str:
        """„Éé„Éº„Éâ„É™„Çπ„Éà„ÇíMarkdownÂΩ¢Âºè„Åß„Éï„Ç©„Éº„Éû„ÉÉ„Éà

        Args:
            nodes: „Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åô„ÇãAST„Éé„Éº„Éâ„É™„Çπ„Éà

        Returns:
            str: ÁîüÊàê„Åï„Çå„ÅüMarkdown
        """
        self.logger.debug(f"Formatting {len(nodes)} nodes to Markdown")

        markdown_parts = []
        for node in nodes:
            markdown = self.format_node(node)
            if markdown:
                markdown_parts.append(markdown)

        result = "\n\n".join(markdown_parts)
        self.logger.debug(f"Generated Markdown: {len(result)} characters")
        return result

    def format_node(self, node: Node) -> str:
        """Âçò‰∏Ä„Éé„Éº„Éâ„ÇíMarkdownÂåñ

        Args:
            node: „Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åô„ÇãAST„Éé„Éº„Éâ

        Returns:
            str: ÁîüÊàê„Åï„Çå„ÅüMarkdown
        """
        if not isinstance(node, Node):
            raise TypeError(f"Expected Node instance, got {type(node)}")

        # „Éá„É™„Ç≤„Éº„Éà„É°„ÇΩ„ÉÉ„Éâ„ÇíÂãïÁöÑ„Å´Ê§úÁ¥¢„Åó„Å¶Âëº„Å≥Âá∫„Åó
        method_name = f"_format_{node.type}"
        formatter_method = getattr(self, method_name, self._format_generic)
        return formatter_method(node)

    def convert_html_to_markdown(self, html_content: str) -> str:
        """HTML„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíMarkdown„Å´Â§âÊèõ

        Args:
            html_content: Â§âÊèõ„Åô„ÇãHTML„Ç≥„É≥„ÉÜ„É≥„ÉÑ

        Returns:
            str: Â§âÊèõ„Åï„Çå„ÅüMarkdown
        """
        content = html_content

        # Ë¶ãÂá∫„Åó„ÅÆÂ§âÊèõ
        content = self.patterns["h1"].sub(r"# \1", content)
        content = self.patterns["h2"].sub(r"## \1", content)
        content = self.patterns["h3"].sub(r"### \1", content)
        content = self.patterns["h4"].sub(r"#### \1", content)
        content = self.patterns["h5"].sub(r"##### \1", content)
        content = self.patterns["h6"].sub(r"###### \1", content)

        # Âº∑Ë™ø„ÉªÊñú‰Ωì„ÅÆÂ§âÊèõ
        content = self.patterns["strong"].sub(r"**\1**", content)
        content = self.patterns["em"].sub(r"*\1*", content)

        # „Ç≥„Éº„Éâ„ÅÆÂ§âÊèõ
        content = self.patterns["code"].sub(r"`\1`", content)
        content = self.patterns["pre"].sub(r"```\n\1\n```", content)

        # „É™„É≥„ÇØ„ÅÆÂ§âÊèõ
        content = self.patterns["a"].sub(r"[\2](\1)", content)

        # ÁîªÂÉè„ÅÆÂ§âÊèõ
        content = self.patterns["img"].sub(r"![\2](\1)", content)

        # „É™„Çπ„Éà„ÅÆÂ§âÊèõ
        content = self._convert_lists(content)

        # ÊîπË°å„ÅÆÂ§âÊèõ
        content = self.patterns["br"].sub("\n", content)

        # ÊÆµËêΩ„ÅÆÂ§âÊèõ
        content = self.patterns["p"].sub(r"\1\n", content)

        # ‰ΩôÂàÜ„Å™Á©∫ÁôΩ„ÇíÂâäÈô§
        content = re.sub(r"\n{3,}", "\n\n", content)
        content = content.strip()

        return content

    def create_full_markdown_document(
        self, title: str, content: str, source_filename: str
    ) -> str:
        """ÂÆåÂÖ®„Å™Markdown„Éâ„Ç≠„É•„É°„É≥„Éà„Çí‰ΩúÊàê

        Args:
            title: „Éâ„Ç≠„É•„É°„É≥„Éà„Çø„Ç§„Éà„É´
            content: Markdown„Ç≥„É≥„ÉÜ„É≥„ÉÑ
            source_filename: ÂÖÉ„Éï„Ç°„Ç§„É´Âêç

        Returns:
            str: ÂÆåÂÖ®„Å™Markdown„Éâ„Ç≠„É•„É°„É≥„Éà
        """
        generation_time = datetime.now().strftime("%YÂπ¥%mÊúà%dÊó• %H:%M:%S")

        markdown_document = f"""# {title}

{content}

---

**üìÑ ÊñáÊõ∏ÊÉÖÂ†±**
- ÂÖÉ„Éï„Ç°„Ç§„É´: {source_filename}
- Â§âÊèõÊó•ÊôÇ: {generation_time}
- Â§âÊèõ„ÉÑ„Éº„É´: Kumihan-Formatter
"""

        return markdown_document

    # === „Éó„É©„Ç§„Éô„Éº„Éà„É°„ÇΩ„ÉÉ„Éâ: „Éé„Éº„ÉâÂà•„Éï„Ç©„Éº„Éû„ÉÉ„Éà ===

    def _format_generic(self, node: Node) -> str:
        """Ê±éÁî®„Éé„Éº„Éâ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return content

    def _format_p(self, node: Node) -> str:
        """ÊÆµËêΩ„Éé„Éº„Éâ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return content

    def _format_strong(self, node: Node) -> str:
        """Â§™Â≠ó„Éé„Éº„Éâ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return f"**{content}**"

    def _format_em(self, node: Node) -> str:
        """Êñú‰Ωì„Éé„Éº„Éâ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return f"*{content}*"

    def _format_h1(self, node: Node) -> str:
        """h1Ë¶ãÂá∫„Åó„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return f"# {content}"

    def _format_h2(self, node: Node) -> str:
        """h2Ë¶ãÂá∫„Åó„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return f"## {content}"

    def _format_h3(self, node: Node) -> str:
        """h3Ë¶ãÂá∫„Åó„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return f"### {content}"

    def _format_h4(self, node: Node) -> str:
        """h4Ë¶ãÂá∫„Åó„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return f"#### {content}"

    def _format_h5(self, node: Node) -> str:
        """h5Ë¶ãÂá∫„Åó„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return f"##### {content}"

    def _format_h6(self, node: Node) -> str:
        """h6Ë¶ãÂá∫„Åó„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return f"###### {content}"

    def _format_ul(self, node: Node) -> str:
        """È†ÜÂ∫è„Å™„Åó„É™„Çπ„Éà„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        items = []
        if isinstance(node.content, list):
            for item in node.content:
                if hasattr(item, "type") and item.type == "li":
                    item_content = self._format_content(item.content)
                    items.append(f"- {item_content}")
                else:
                    item_content = self._format_content(item)
                    items.append(f"- {item_content}")
        else:
            content = self._format_content(node.content)
            items.append(f"- {content}")

        return "\n".join(items)

    def _format_ol(self, node: Node) -> str:
        """È†ÜÂ∫è„ÅÇ„Çä„É™„Çπ„Éà„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        items = []
        if isinstance(node.content, list):
            for i, item in enumerate(node.content, 1):
                if hasattr(item, "type") and item.type == "li":
                    item_content = self._format_content(item.content)
                    items.append(f"{i}. {item_content}")
                else:
                    item_content = self._format_content(item)
                    items.append(f"{i}. {item_content}")
        else:
            content = self._format_content(node.content)
            items.append(f"1. {content}")

        return "\n".join(items)

    def _format_li(self, node: Node) -> str:
        """„É™„Çπ„ÉàÈ†ÖÁõÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return content

    def _format_code(self, node: Node) -> str:
        """„Ç§„É≥„É©„Ç§„É≥„Ç≥„Éº„Éâ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        return f"`{content}`"

    def _format_pre(self, node: Node) -> str:
        """Êï¥ÂΩ¢Ê∏à„Åø„ÉÜ„Ç≠„Çπ„Éà„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = self._format_content(node.content)
        language = (
            node.get_attribute("language", "") if hasattr(node, "get_attribute") else ""
        )

        if language:
            return f"```{language}\n{content}\n```"
        else:
            return f"```\n{content}\n```"

    def _format_image(self, node: Node) -> str:
        """ÁîªÂÉèË¶ÅÁ¥†„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        filename = node.content if isinstance(node.content, str) else str(node.content)
        src = f"images/{filename}"
        alt = (
            node.get_attribute("alt", filename)
            if hasattr(node, "get_attribute")
            else filename
        )

        return f"![{alt}]({src})"

    def _format_div(self, node: Node) -> str:
        """divË¶ÅÁ¥†„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºàMarkdown„Åß„ÅØÂÜÖÂÆπ„ÅÆ„ÅøÔºâ"""
        content = self._format_content(node.content)
        return content

    def _format_details(self, node: Node) -> str:
        """detailsË¶ÅÁ¥†„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºàMarkdown„Åß„ÅØÂ±ïÈñãÂΩ¢ÂºèÔºâ"""
        summary = (
            node.get_attribute("summary", "Ë©≥Á¥∞")
            if hasattr(node, "get_attribute")
            else "Ë©≥Á¥∞"
        )
        content = self._format_content(node.content)

        return f"**{summary}**\n\n{content}"

    def _format_toc(self, node: Node) -> str:
        """ÁõÆÊ¨°„Éû„Éº„Ç´„Éº„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        return "<!-- TOC -->"

    def _format_error(self, node: Node) -> str:
        """„Ç®„É©„Éº„Éé„Éº„Éâ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        content = str(node.content)
        return f"[ERROR: {content}]"

    # === „Éó„É©„Ç§„Éô„Éº„Éà„É°„ÇΩ„ÉÉ„Éâ: „Éò„É´„Éë„ÉºÊ©üËÉΩ ===

    def _format_content(self, content: Any) -> str:
        """„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºàÂÜçÂ∏∞ÁöÑÔºâ

        Args:
            content: „Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åô„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ

        Returns:
            str: „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÁµêÊûú
        """
        # Âçò‰∏Ä„Éé„Éº„Éâ„ÅÆÂ†¥Âêà
        if hasattr(content, "type"):
            return self.format_node(content)

        # „É™„Çπ„Éà„ÅÆÂ†¥Âêà
        if isinstance(content, list):
            parts = []
            for item in content:
                if hasattr(item, "type"):
                    parts.append(self.format_node(item))
                elif isinstance(item, str):
                    parts.append(self._process_text_content(item))
                else:
                    parts.append(self._process_text_content(str(item)))
            return "".join(parts)

        # ÊñáÂ≠óÂàó„ÅÆÂ†¥Âêà
        if isinstance(content, str):
            return self._process_text_content(content)

        # „Åù„ÅÆ‰ªñ
        return self._process_text_content(str(content))

    def _process_text_content(self, text: str) -> str:
        """„ÉÜ„Ç≠„Çπ„Éà„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂá¶ÁêÜ

        Args:
            text: Âá¶ÁêÜ„Åô„Çã„ÉÜ„Ç≠„Çπ„Éà

        Returns:
            str: Âá¶ÁêÜ„Åï„Çå„Åü„ÉÜ„Ç≠„Çπ„Éà
        """
        # Markdown„Ç®„Çπ„Ç±„Éº„ÉóÂá¶ÁêÜ
        text = text.replace("\\", "\\\\")
        text = text.replace("`", "\\`")
        text = text.replace("*", "\\*")
        text = text.replace("_", "\\_")
        text = text.replace("#", "\\#")
        text = text.replace("[", "\\[")
        text = text.replace("]", "\\]")
        text = text.replace("(", "\\(")
        text = text.replace(")", "\\)")

        return text

    def _convert_lists(self, content: str) -> str:
        """„É™„Çπ„Éà„ÇíMarkdownÂΩ¢Âºè„Å´Â§âÊèõ

        Args:
            content: Â§âÊèõ„Åô„ÇãHTML„Ç≥„É≥„ÉÜ„É≥„ÉÑ

        Returns:
            str: Â§âÊèõ„Åï„Çå„Åü„Ç≥„É≥„ÉÜ„É≥„ÉÑ
        """

        # È†ÜÂ∫è„Å™„Åó„É™„Çπ„Éà„ÅÆÂ§âÊèõ
        def convert_ul(match: Any) -> str:
            ul_content = match.group(1)
            items = self.patterns["li"].findall(ul_content)
            markdown_items = [f"- {item.strip()}" for item in items]
            return "\n".join(markdown_items)

        content = self.patterns["ul"].sub(convert_ul, content)

        # È†ÜÂ∫è„ÅÇ„Çä„É™„Çπ„Éà„ÅÆÂ§âÊèõ
        def convert_ol(match: Any) -> str:
            ol_content = match.group(1)
            items = self.patterns["li"].findall(ol_content)
            markdown_items = [f"{i+1}. {item.strip()}" for i, item in enumerate(items)]
            return "\n".join(markdown_items)

        content = self.patterns["ol"].sub(convert_ol, content)

        return content

    def _extract_title_from_content(self, content: str) -> Optional[str]:
        """„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åã„ÇâÊúÄÂàù„ÅÆH1Ë¶ãÂá∫„Åó„ÇíÊäΩÂá∫

        Args:
            content: ÊäΩÂá∫ÂØæË±°„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ

        Returns:
            Optional[str]: ÊäΩÂá∫„Åï„Çå„Åü„Çø„Ç§„Éà„É´
        """
        match = self.patterns["h1"].search(content)
        return match.group(1).strip() if match else None

    def _convert_paragraphs(self, text: str) -> str:
        """ÊÆµËêΩ„Çí‰ΩúÊàê

        Args:
            text: Â§âÊèõ„Åô„Çã„ÉÜ„Ç≠„Çπ„Éà

        Returns:
            str: ÊÆµËêΩ„Åå‰ΩúÊàê„Åï„Çå„Åü„ÉÜ„Ç≠„Çπ„Éà
        """
        lines = text.split("\n")
        result = []
        current_paragraph: List[str] = []

        for line in lines:
            line = line.strip()

            # Markdown„Çø„Ç∞„ÅåÂê´„Åæ„Çå„ÇãË°å„ÅØ„Åù„ÅÆ„Åæ„ÅæËøΩÂä†
            if (
                line.startswith("#")
                or line.startswith("-")
                or line.startswith("*")
                or line.startswith("1.")
                or line == ""
                or line.startswith("---")
                or line.startswith("```")
            ):
                # ÁèæÂú®„ÅÆÊÆµËêΩ„ÇíÁµÇ‰∫Ü
                if current_paragraph:
                    para_text = " ".join(current_paragraph).strip()
                    if para_text:
                        result.append(para_text)
                    current_paragraph = []

                # Markdown„Çø„Ç∞„ÅÆË°å„Çí„Åù„ÅÆ„Åæ„ÅæËøΩÂä†
                if line:
                    result.append(line)
            else:
                # ÈÄöÂ∏∏„ÅÆ„ÉÜ„Ç≠„Çπ„ÉàË°å
                if line:
                    current_paragraph.append(line)
                else:
                    # Á©∫Ë°å„ÅßÊÆµËêΩ„ÇíÂå∫Âàá„Çã
                    if current_paragraph:
                        para_text = " ".join(current_paragraph).strip()
                        if para_text:
                            result.append(para_text)
                        current_paragraph = []

        # ÊúÄÂæå„ÅÆÊÆµËêΩ„ÇíÂá¶ÁêÜ
        if current_paragraph:
            para_text = " ".join(current_paragraph).strip()
            if para_text:
                result.append(para_text)

        return "\n\n".join(result)

    # ==========================================
    # „Éó„É≠„Éà„Ç≥„É´Ê∫ñÊã†„É°„ÇΩ„ÉÉ„ÉâÔºàMarkdownRendererProtocolÂÆüË£ÖÔºâ
    # ==========================================

    def render(
        self, nodes: List[Node], context: Optional[RenderContext] = None
    ) -> RenderResult:
        """Áµ±‰∏Ä„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπÔºà„Éó„É≠„Éà„Ç≥„É´Ê∫ñÊã†Ôºâ"""
        try:
            if not nodes:
                return create_render_result(content="", success=True)

            # Ë§áÊï∞„Éé„Éº„Éâ„ÇíÈ†ÜÊ¨°Âá¶ÁêÜ
            markdown_parts = []
            for node in nodes:
                markdown_content = self.format_node(node)
                markdown_parts.append(markdown_content)

            combined_content = "\n\n".join(markdown_parts)
            return create_render_result(content=combined_content, success=True)
        except Exception as e:
            result = create_render_result(success=False)
            result.add_error(f"Markdown„É¨„É≥„ÉÄ„É™„É≥„Ç∞Â§±Êïó: {e}")
            return result

    def validate(
        self, node: Node, context: Optional[RenderContext] = None
    ) -> List[str]:
        """„Éê„É™„Éá„Éº„Ç∑„Éß„É≥ÂÆüË£ÖÔºà„Éó„É≠„Éà„Ç≥„É´Ê∫ñÊã†Ôºâ"""
        errors = []
        try:
            # MarkdownÁâπÊúâ„ÅÆÊ§úË®º
            if not node:
                errors.append("„Éé„Éº„Éâ„ÅåÁ©∫„Åß„Åô")
            elif not hasattr(node, "node_type"):
                errors.append("„Éé„Éº„Éâ„Çø„Ç§„Éó„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
            # Markdown„É¨„É≥„ÉÄ„É™„É≥„Ç∞ÂèØËÉΩÊÄß„ÅÆÁ¢∫Ë™ç
            elif not hasattr(node, "content"):
                errors.append("„Éé„Éº„Éâ„Å´„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
        except Exception as e:
            errors.append(f"Markdown„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº: {e}")
        return errors

    def get_renderer_info(self) -> Dict[str, Any]:
        """„É¨„É≥„ÉÄ„É©„ÉºÊÉÖÂ†±Ôºà„Éó„É≠„Éà„Ç≥„É´Ê∫ñÊã†Ôºâ"""
        return {
            "name": "MarkdownFormatter",
            "version": "2.0.0",
            "supported_formats": ["markdown"],
            "capabilities": ["markdown_formatting", "html_to_markdown_conversion"],
            "output_format": "markdown",
        }

    def supports_format(self, format_hint: str) -> bool:
        """„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂØæÂøúÂà§ÂÆöÔºà„Éó„É≠„Éà„Ç≥„É´Ê∫ñÊã†Ôºâ"""
        return format_hint in ["markdown", "md", "text"]

    def render_markdown(
        self, nodes: List[Node], context: Optional[RenderContext] = None
    ) -> str:
        """MarkdownÂõ∫Êúâ„É¨„É≥„ÉÄ„É™„É≥„Ç∞„É°„ÇΩ„ÉÉ„ÉâÔºà„Éó„É≠„Éà„Ç≥„É´Ê∫ñÊã†Ôºâ"""
        if not nodes:
            return ""

        # Ë§áÊï∞„Éé„Éº„Éâ„ÇíÈ†ÜÊ¨°Âá¶ÁêÜ
        markdown_parts = []
        for node in nodes:
            markdown_content = self.format_node(node)
            markdown_parts.append(markdown_content)

        return "\n\n".join(markdown_parts)

    def to_html(self, markdown_content: str) -> str:
        """Markdown„Åã„ÇâHTML„Å´Â§âÊèõÔºà„Éó„É≠„Éà„Ç≥„É´Ê∫ñÊã†Ôºâ"""
        # Á∞°Âçò„Å™Â§âÊèõÂÆüË£ÖÔºàÂÆüÈöõ„Å´„ÅØ„Çà„ÇäË©≥Á¥∞„Å™ÂÆüË£Ö„ÅåÂøÖË¶ÅÔºâ
        content = markdown_content

        # Ë¶ãÂá∫„ÅóÂ§âÊèõ: # Title -> <h1>Title</h1>
        content = re.sub(r"^# (.+)$", r"<h1>\1</h1>", content, flags=re.MULTILINE)
        content = re.sub(r"^## (.+)$", r"<h2>\1</h2>", content, flags=re.MULTILINE)

        # Âº∑Ë™øÂ§âÊèõ: **text** -> <strong>text</strong>
        content = re.sub(r"\*\*([^*]+)\*\*", r"<strong>\1</strong>", content)
        content = re.sub(r"\*([^*]+)\*", r"<em>\1</em>", content)

        return content

    def convert_from_kumihan(
        self, kumihan_text: str, context: Optional[RenderContext] = None
    ) -> str:
        """KumihanË®òÊ≥ï„Åã„ÇâMarkdown„Å´Â§âÊèõÔºà„Éó„É≠„Éà„Ç≥„É´Ê∫ñÊã†Ôºâ"""
        # Âü∫Êú¨ÁöÑ„Å™Â§âÊèõÂÆüË£Ö
        return self._convert_from_html(kumihan_text)

    def _convert_from_html(self, html_content: str) -> str:
        """HTML„Åã„ÇâMarkdown„Å´Â§âÊèõÔºàÂÜÖÈÉ®„É°„ÇΩ„ÉÉ„ÉâÔºâ"""
        # Âü∫Êú¨ÁöÑ„Å™HTML‚ÜíMarkdownÂ§âÊèõ
        # „Çà„ÇäË§áÈõë„Å™Â§âÊèõ„ÅåÂøÖË¶Å„Å™Â†¥Âêà„ÅØÂ§ñÈÉ®„É©„Ç§„Éñ„É©„É™Ôºàhtml2textÁ≠âÔºâ„Çí‰ΩøÁî®
        content = html_content

        # Á∞°Âçò„Å™HTMLË¶ÅÁ¥†„ÇíMarkdown„Å´Â§âÊèõ
        content = content.replace("<strong>", "**").replace("</strong>", "**")
        content = content.replace("<em>", "*").replace("</em>", "*")
        content = content.replace("<br>", "\n").replace("<br/>", "\n")
        content = content.replace("<p>", "").replace("</p>", "\n\n")
        content = content.replace("<h1>", "# ").replace("</h1>", "\n")
        content = content.replace("<h2>", "## ").replace("</h2>", "\n")
        content = content.replace("<h3>", "### ").replace("</h3>", "\n")

        return content.strip()

    def get_markdown_extensions(self) -> List[str]:
        """„Çµ„Éù„Éº„Éà„Åô„ÇãMarkdownÊã°ÂºµÊ©üËÉΩ„ÅÆ„É™„Çπ„Éà„ÇíËøî„ÅôÔºàÊäΩË±°„É°„ÇΩ„ÉÉ„ÉâÂÆüË£ÖÔºâ"""
        return ["tables", "fenced_code", "toc", "strikethrough"]

    def validate_options(self, options: Dict[str, Any]) -> List[str]:
        """„Ç™„Éó„Ç∑„Éß„É≥„ÅÆÂ¶•ÂΩìÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºà„Éó„É≠„Éà„Ç≥„É´Ê∫ñÊã†Ôºâ"""
        errors = []

        # Âü∫Êú¨ÁöÑ„Å™Ê§úË®ºÂÆüË£Ö
        if not isinstance(options, dict):
            errors.append("„Ç™„Éó„Ç∑„Éß„É≥„ÅØËæûÊõ∏ÂΩ¢Âºè„ÅßÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
            return errors

        # ÊúâÂäπ„Å™„Ç™„Éó„Ç∑„Éß„É≥„Ç≠„Éº„ÅÆÂÆöÁæ©
        valid_keys = {
            "include_title",
            "include_metadata",
            "table_of_contents",
            "code_highlight",
            "strict_mode",
            "extensions",
        }

        # ‰∏çÊòé„Å™„Ç≠„Éº„Åå„Å™„ÅÑ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        for key in options.keys():
            if key not in valid_keys:
                errors.append(f"‰∏çÊòé„Å™„Ç™„Éó„Ç∑„Éß„É≥„Ç≠„Éº: {key}")

        return errors

    def render_node(self, node: Node, context: Optional[RenderContext] = None) -> str:
        """Âçò‰∏Ä„Éé„Éº„Éâ„É¨„É≥„ÉÄ„É™„É≥„Ç∞ÔºàBaseRendererProtocolÊ∫ñÊã†Ôºâ"""
        return self.format_node(node)

    def get_supported_formats(self) -> List[str]:
        """ÂØæÂøú„Éï„Ç©„Éº„Éû„ÉÉ„Éà‰∏ÄË¶ß„ÇíÂèñÂæóÔºàBaseRendererProtocolÊ∫ñÊã†Ôºâ"""
        return ["markdown", "md", "text"]

    def validate_markdown_syntax(self, markdown: str) -> List[str]:
        """MarkdownÊßãÊñáÊ§úË®ºÔºàMarkdownRendererProtocolÊ∫ñÊã†Ôºâ"""
        errors = []
        try:
            # Âü∫Êú¨ÁöÑ„Å™MarkdownÊßãÊñá„ÉÅ„Çß„ÉÉ„ÇØ
            lines = markdown.split("\n")
            for i, line in enumerate(lines, 1):
                # Ë¶ãÂá∫„ÅóÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØ
                if line.startswith("#"):
                    if not line.startswith("# ") and len(line) > 1:
                        errors.append(f"Ë°å {i}: Ë¶ãÂá∫„ÅóË®òÂè∑„ÅÆÂæå„Å´„Çπ„Éö„Éº„Çπ„ÅåÂøÖË¶Å„Åß„Åô")

                # „É™„Çπ„ÉàÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØ
                if line.strip().startswith("-") or line.strip().startswith("*"):
                    stripped = line.strip()
                    if len(stripped) > 1 and not stripped[1] == " ":
                        errors.append(f"Ë°å {i}: „É™„Çπ„ÉàË®òÂè∑„ÅÆÂæå„Å´„Çπ„Éö„Éº„Çπ„ÅåÂøÖË¶Å„Åß„Åô")
        except Exception as e:
            errors.append(f"MarkdownÊßãÊñáÊ§úË®º„Ç®„É©„Éº: {e}")

        return errors
