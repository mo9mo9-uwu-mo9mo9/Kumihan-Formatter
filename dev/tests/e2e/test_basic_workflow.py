"""
基本ワークフローのE2Eテスト

実際のユーザー使用シナリオに基づいた
エンドツーエンドのワークフローテスト
"""

import pytest
import platform
import os
from pathlib import Path
from dev.tests.e2e.utils.execution import UserActionSimulator, ExecutionResult
from dev.tests.e2e.utils.validation import validate_html_file, extract_performance_metrics


class TestBasicWorkflow:
    """基本的なワークフローのテスト"""
    
    def test_cli_basic_conversion(self, test_workspace: Path, sample_test_file: Path, output_directory: Path):
        """CLI経由での基本的な変換テスト"""
        simulator = UserActionSimulator(test_workspace)
        
        # CLI変換を実行
        result = simulator.simulate_cli_conversion(sample_test_file, output_directory)
        
        # 実行結果の検証
        assert result.returncode == 0, f"CLI conversion failed: {result.stderr}"
        assert len(result.output_files) > 0, "No output files generated"
        assert result.execution_time < 30.0, f"Conversion took too long: {result.execution_time}s"
        
        # 出力ファイルの存在確認
        html_file = result.output_files[0]
        assert html_file.exists(), f"Output HTML file not found: {html_file}"
        assert html_file.suffix == '.html', f"Output file is not HTML: {html_file}"
        
        # HTML内容の検証
        validation_result = validate_html_file(html_file)
        assert validation_result.get('overall_success', False), \
            f"HTML validation failed: {validation_result}"
    
    def test_cli_comprehensive_conversion(self, test_workspace: Path, comprehensive_test_file: Path, output_directory: Path):
        """包括的機能を含むファイルの変換テスト"""
        simulator = UserActionSimulator(test_workspace)
        
        result = simulator.simulate_cli_conversion(comprehensive_test_file, output_directory)
        
        # 基本的な成功確認
        assert result.returncode == 0, f"Comprehensive conversion failed: {result.stderr}"
        assert len(result.output_files) > 0, "No output files generated"
        
        # HTML検証
        html_file = result.output_files[0]
        validation_result = validate_html_file(html_file)
        
        # 複合記法の正しい変換確認
        content_structure = validation_result.get('content_structure', {})
        assert content_structure.get('heading_count', 0) >= 3, "Expected multiple headings"
        assert content_structure.get('highlight_block_count', 0) > 0, "Expected highlight blocks"
        # comprehensive_test.txtには実際にdetails要素が含まれることを確認済み
        assert content_structure.get('details_count', 0) >= 2, f"Expected at least 2 collapsible blocks, got {content_structure.get('details_count', 0)}"
        
        # エラーマーカーの確認
        syntax_compliance = validation_result.get('syntax_compliance', {})
        assert syntax_compliance.get('error_marker_count', 1) == 0, \
            f"Found error markers: {syntax_compliance.get('error_markers', [])}"
    
    @pytest.mark.skipif(platform.system() != "Windows", reason="Windows batch file test")
    def test_windows_batch_conversion(self, test_workspace: Path, sample_test_file: Path):
        """Windowsバッチファイル経由の変換テスト"""
        simulator = UserActionSimulator(test_workspace)
        
        # バッチファイルのパス
        batch_file = test_workspace / "WINDOWS" / "変換ツール.bat"
        
        if not batch_file.exists():
            pytest.skip("Windows batch file not found in test workspace")
        
        # バッチファイル実行
        result = simulator.simulate_batch_file_execution(batch_file, sample_test_file)
        
        # プラットフォーム固有のスキップ確認
        if result.returncode == -2:
            pytest.skip("Batch file execution skipped on non-Windows platform")
        
        # 実行結果の検証
        assert result.returncode == 0, f"Batch file execution failed: {result.stderr}"
        assert len(result.output_files) > 0, "No output files generated by batch file"
        
        # 出力品質の確認
        html_file = result.output_files[0]
        validation_result = validate_html_file(html_file)
        assert validation_result.get('overall_success', False), \
            f"Batch file output validation failed: {validation_result}"
    
    @pytest.mark.skipif(platform.system() != "Darwin", reason="macOS command file test")
    def test_macos_command_conversion(self, test_workspace: Path, sample_test_file: Path):
        """macOSコマンドファイル経由の変換テスト"""
        simulator = UserActionSimulator(test_workspace)
        
        # コマンドファイルのパス
        command_file = test_workspace / "MAC" / "変換ツール.command"
        
        if not command_file.exists():
            pytest.skip("macOS command file not found in test workspace")
        
        # .commandファイルが実行可能かどうか確認
        if not os.access(command_file, os.X_OK):
            pytest.skip("macOS command file is not executable")
        
        # コマンドファイル実行
        result = simulator.simulate_command_file_execution(command_file, sample_test_file)
        
        # プラットフォーム固有のスキップ確認
        if result.returncode == -2:
            pytest.skip("Command file execution skipped on non-macOS platform")
        
        # 実行結果の検証
        assert result.returncode == 0, f"Command file execution failed: {result.stderr}"
        assert len(result.output_files) > 0, "No output files generated by command file"
        
        # 出力品質の確認
        html_file = result.output_files[0]
        validation_result = validate_html_file(html_file)
        assert validation_result.get('overall_success', False), \
            f"Command file output validation failed: {validation_result}"
    
    def test_drag_and_drop_simulation(self, test_workspace: Path, sample_test_file: Path):
        """ドラッグ&ドロップシミュレーションテスト"""
        simulator = UserActionSimulator(test_workspace)
        
        # プラットフォームに応じた実行ファイルを選択
        if platform.system() == "Windows":
            executable = test_workspace / "WINDOWS" / "変換ツール.bat"
        elif platform.system() == "Darwin":
            executable = test_workspace / "MAC" / "変換ツール.command"
        else:
            pytest.skip("D&D simulation not supported on this platform")
        
        if not executable.exists():
            pytest.skip(f"Executable not found: {executable}")
        
        # D&Dシミュレーション実行
        result = simulator.simulate_drag_and_drop(sample_test_file, executable)
        
        # プラットフォーム固有のスキップ確認
        if result.returncode == -2:
            pytest.skip("D&D simulation skipped due to platform limitations")
        
        # 実行結果の検証
        assert result.returncode == 0, f"D&D simulation failed: {result.stderr}"
        assert len(result.output_files) > 0, "No output files generated by D&D"
    
    def test_multiple_file_conversion(self, test_workspace: Path, output_directory: Path):
        """複数ファイルの連続変換テスト"""
        simulator = UserActionSimulator(test_workspace)
        
        # 複数のテストファイルを準備
        test_files = [
            test_workspace / "test_data" / "basic_test.txt",
            test_workspace / "test_data" / "comprehensive_test.txt"
        ]
        
        # 存在するファイルのみを対象とする
        existing_files = [f for f in test_files if f.exists()]
        assert len(existing_files) > 1, "Not enough test files for multiple conversion test"
        
        # 連続変換実行
        results = []
        for test_file in existing_files:
            result = simulator.simulate_cli_conversion(test_file, output_directory)
            results.append(result)
        
        # 全ての変換が成功したことを確認
        for i, result in enumerate(results):
            assert result.returncode == 0, f"Conversion {i+1} failed: {result.stderr}"
            assert len(result.output_files) > 0, f"No output files for conversion {i+1}"
        
        # 全ての出力ファイルが生成されたことを確認
        total_output_files = sum(len(r.output_files) for r in results)
        assert total_output_files >= len(existing_files), "Not all conversions produced output files"
    
    def test_performance_baseline(self, test_workspace: Path, sample_test_file: Path, output_directory: Path):
        """パフォーマンスベースラインテスト"""
        simulator = UserActionSimulator(test_workspace)
        
        # 基本変換のパフォーマンス測定
        result = simulator.simulate_cli_conversion(sample_test_file, output_directory)
        
        # 実行成功確認
        assert result.returncode == 0, f"Performance test failed: {result.stderr}"
        
        # パフォーマンス指標の抽出
        metrics = extract_performance_metrics(result)
        
        # パフォーマンス要件の確認
        assert metrics['execution_time'] < 10.0, \
            f"Basic conversion too slow: {metrics['execution_time']}s (expected < 10s)"
        
        assert metrics['performance_rating'] in ['excellent', 'good', 'acceptable'], \
            f"Poor performance rating: {metrics['performance_rating']}"
        
        # 出力ファイル数の確認
        assert metrics['output_file_count'] > 0, "No output files produced"
    
    def test_concurrent_conversion(self, test_workspace: Path, output_directory: Path):
        """同時変換処理のテスト"""
        simulator = UserActionSimulator(test_workspace)
        
        # 同じファイルを同時に変換（リソース競合テスト）
        test_file = test_workspace / "test_data" / "basic_test.txt"
        
        if not test_file.exists():
            pytest.skip("Test file not found for concurrent test")
        
        import concurrent.futures
        import threading
        
        results = []
        
        def convert_file():
            # 各スレッドで異なる出力ディレクトリを使用
            thread_id = threading.current_thread().ident
            thread_output_dir = output_directory / f"thread_{thread_id}"
            thread_output_dir.mkdir(exist_ok=True)
            
            return simulator.simulate_cli_conversion(test_file, thread_output_dir)
        
        # 3つの同時変換を実行
        with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
            futures = [executor.submit(convert_file) for _ in range(3)]
            results = [future.result() for future in concurrent.futures.as_completed(futures)]
        
        # 全ての変換が成功したことを確認
        for i, result in enumerate(results):
            assert result.returncode == 0, f"Concurrent conversion {i+1} failed: {result.stderr}"
            assert len(result.output_files) > 0, f"No output files for concurrent conversion {i+1}"