# 見出し1 #
Kumihan-Formatter 完全チュートリアル
##

# 見出し2 #
はじめに
##

このチュートリアルでは、# 太字 # Kumihan-Formatter ## の使い方を
# ハイライト color=blue # ステップバイステップ ## で学習します。

# 情報 #
## 📚 このチュートリアルで学べること

✅ # ハイライト color=green # 基本的な記法の使い方 ##
✅ # ハイライト color=green # 実践的な文書作成方法 ##
✅ # ハイライト color=green # 高度な機能の活用法 ##
✅ # ハイライト color=green # トラブルシューティング ##
##

# 見出し2 #
Chapter 1: 環境準備
##

# 見出し3 #
Step 1-1: インストール
##

まず、Kumihan-Formatterをインストールしましょう。

# コードブロック #
```bash
# Pythonパッケージからインストール
pip install kumihan-formatter

# 開発版をインストールする場合
pip install -e ".[dev]"
```
##

# 注意 #
## ⚠️ システム要件

インストール前に以下の要件を確認してください：
- # 太字 color=red # Python 3.12以上 ## （必須）
- # コード # UTF-8 ## エンコーディング対応環境
- 十分なディスク容量（最低100MB以上）
##

# 見出し3 #
Step 1-2: 動作確認
##

インストールが完了したら、動作確認を行いましょう。

# コードブロック #
```bash
# バージョン確認
kumihan --version

# ヘルプ表示
kumihan --help

# テストファイル変換
echo "# 太字 # Hello Kumihan! ##" | kumihan convert -
```
##

期待される出力：
# 枠線 #
# コード # Kumihan-Formatter version 2.2.0-alpha ##
変換が正常に完了すれば、セットアップ成功です！
##

# 見出し2 #
Chapter 2: 基本記法マスター
##

# 見出し3 #
Step 2-1: 文字装飾を覚えよう
##

Kumihan記法の基本は # 太字 # 文字装飾 ## から始まります。

### 実習: 基本装飾を使ってみる

以下のテキストを入力ファイル # コード # lesson1.txt ## として保存してください：

# コードブロック #
```
# 太字 # これは太字です ##
# イタリック # これはイタリック（斜体）です ##
# 下線 # これは下線付きです ##
# 取り消し線 # これは取り消し線です ##
# コード # これはコード表記です ##
```
##

変換してみましょう：

# コードブロック #
```bash
kumihan convert lesson1.txt -o output/
```
##

# 情報 #
## 💡 ポイント

記法の基本構文は # コード # # キーワード # 内容 ## ## です。
- # ハイライト color=yellow # 開始マーカー ## : `# キーワード #`
- # ハイライト color=green # 終了マーカー ## : `##`
##

# 見出し3 #
Step 2-2: 色を使った表現
##

次に、色付きの装飾を学びましょう。

### 実習: カラーハイライトを活用する

# コード # lesson2.txt ## を作成：

# コードブロック #
```
# ハイライト color=red # 赤色で注意喚起 ##
# ハイライト color=blue # 青色で情報提供 ##
# ハイライト color=green # 緑色で成功表示 ##
# ハイライト color=yellow # 黄色で警告表示 ##
# ハイライト color=#ff6b6b # カスタムカラーも可能 ##

# 太字 color=purple # 色付き太字 ##
# イタリック color=orange # 色付きイタリック ##
```
##

# 折りたたみ #
## 🎨 使用可能な色一覧

### 基本色名
- # ハイライト color=red # red ## / # ハイライト color=blue # blue ## / # ハイライト color=green # green ##
- # ハイライト color=yellow # yellow ## / # ハイライト color=orange # orange ## / # ハイライト color=purple # purple ##
- # ハイライト color=pink # pink ## / # ハイライト color=cyan # cyan ## / # ハイライト color=magenta # magenta ##
- # ハイライト color=lime # lime ## / # ハイライト color=teal # teal ## / # ハイライト color=navy # navy ##

### 16進数カラーコード
# コード # #ff0000 ## (赤) / # コード # #00ff00 ## (緑) / # コード # #0000ff ## (青)
カスタムカラーで細かい色調整が可能です。
##

# 見出し2 #
Chapter 3: ブロック記法をマスターする
##

# 見出し3 #
Step 3-1: 情報ブロックの使い方
##

文書を見やすくする # 太字 # ブロック記法 ## を学びましょう。

### 実習: 各種ブロックを使い分ける

# コード # lesson3.txt ## を作成：

# コードブロック #
```
# 情報 #
重要な情報をお知らせします。
この部分は青い背景で表示されます。
##

# 注意 #
注意が必要な内容です。
この部分は黄色い背景で表示されます。
##

# 枠線 #
枠線で囲んで強調したい内容です。
重要なお知らせなどに使用します。
##

# 引用 #
"これは引用文です。"
— 著者名
##
```
##

変換して結果を確認してみましょう！

# 見出し3 #
Step 3-2: 折りたたみ機能を使う
##

長い説明を # ハイライト color=blue # コンパクト ## にまとめる方法を学びます。

### 実習: 折りたたみブロックの活用

# コードブロック #
```
# 折りたたみ #
詳細説明

ここに長い説明文を書きます。
通常は折りたたまれて表示され、
クリックすると展開されます。

複数行の内容も問題なく
折りたたむことができます。
##
```
##

# 情報 #
## 💡 活用シーン

- # 太字 # FAQ ## : よくある質問と回答
- # 太字 # 技術詳細 ## : 詳しい技術説明
- # 太字 # 補足情報 ## : 追加の説明
##

# 見出し2 #
Chapter 4: 実践的な文書作成
##

# 見出し3 #
Step 4-1: 構造化された文書を作る
##

実際のプロジェクトで使える文書を作成してみましょう。

### 実習: プロジェクト提案書を作成

# コード # project_proposal.txt ## を作成：

# コードブロック #
```
# 見出し1 #
新プロジェクト提案書
##

# 見出し2 #
プロジェクト概要
##

本プロジェクトは # 太字 # 革新的なソリューション ## の開発を目的としています。

# 情報 #
## 🎯 プロジェクト目標

- # ハイライト color=green # 市場投入時期 ## : 2024年Q4
- # ハイライト color=blue # 開発期間 ## : 6ヶ月
- # ハイライト color=orange # 予算 ## : 5,000万円
##

# 見出し2 #
技術仕様
##

# 枠線 #
## 主要技術スタック

- バックエンド: # コード # Python 3.12 ##
- フロントエンド: # コード # React 18.x ##
- データベース: # コード # PostgreSQL 15 ##
- インフラ: # コード # AWS/Kubernetes ##
##

# 見出し2 #
リスク分析
##

# 注意 #
## ⚠️ 主要リスク

1. # 太字 color=red # 技術的リスク ## : 新技術導入による不確実性
2. # 太字 color=orange # スケジュールリスク ## : 開発遅延の可能性
3. # 太字 color=purple # 市場リスク ## : 競合他社の動向
##

# 見出し2 #
期待される成果
##

# 引用 #
"このプロジェクトにより、# 太字 # 市場シェア20%向上 ## と
# ハイライト color=green # 年間売上50億円増加 ## が期待されます。"
— プロジェクトマネージャー
##
```
##

# 見出し3 #
Step 4-2: コードドキュメントの作成
##

開発者向けのドキュメントを作成しましょう。

### 実習: API仕様書の作成

# コードブロック #
```
# 見出し1 #
User API 仕様書
##

# 見出し2 #
エンドポイント一覧
##

# 枠線 #
## GET /api/users

### 概要
全ユーザー情報を取得します。

### パラメータ
- # コード # limit ## : 取得件数（デフォルト: 20）
- # コード # offset ## : オフセット（デフォルト: 0）

### レスポンス例
# コードブロック #
```json
{
  "users": [
    {
      "id": 1,
      "name": "田中太郎",
      "email": "tanaka@example.com"
    }
  ],
  "total": 100
}
```
##

### エラーコード
- # ハイライト color=red # 400 ## : 不正なリクエスト
- # ハイライト color=orange # 401 ## : 認証エラー
- # ハイライト color=red # 500 ## : サーバーエラー
##
```
##

# 見出し2 #
Chapter 5: 高度なテクニック
##

# 見出し3 #
Step 5-1: 記法の組み合わせ
##

複数の記法を # 太字 # 効果的に組み合わせる ## 方法を学びます。

### 実習: 複雑な文書構造の作成

# コードブロック #
```
# 枠線 #
## システム設計書

### アーキテクチャ概要

このシステムは # 太字 color=blue # マイクロサービス ## アーキテクチャを採用し、
# ハイライト color=green # 高可用性 ## と # ハイライト color=orange # スケーラビリティ ## を実現します。

# 情報 #
#### 主要コンポーネント

1. # 太字 # API Gateway ## : # コード # Kong ##
   - # イタリック # 役割 ## : リクエストルーティング
   - # イタリック # 特徴 ## : # ハイライト color=blue # 認証・認可機能内蔵 ##

2. # 太字 # User Service ## : # コード # Python/FastAPI ##
   - # イタリック # 役割 ## : ユーザー管理
   - # イタリック # 特徴 ## : # ハイライト color=green # RESTful API ##

# 折りたたみ #
##### 詳細設計

# コードブロック #
```yaml
services:
  api-gateway:
    image: kong:latest
    ports:
      - "8000:8000"
  
  user-service:
    image: user-service:v1.0
    environment:
      - DATABASE_URL=postgresql://localhost:5432/users
```
##
##
##
##
```
##

# 見出し3 #
Step 5-2: パフォーマンス最適化
##

大きな文書を効率的に処理する方法を学びます。

# 情報 #
## ⚡ パフォーマンス向上のコツ

### ファイル分割
大きな文書は複数のファイルに分割しましょう：
# コード # chapter1.txt ## , # コード # chapter2.txt ## , ...

### バッチ処理
複数ファイルを一括変換：
```bash
kumihan convert *.txt -o output/
```

### パフォーマンスモード
大容量ファイルの処理時：
```bash
kumihan convert large_file.txt --performance
```
##

# 見出し2 #
Chapter 6: トラブルシューティング
##

# 見出し3 #
よくある問題と解決方法
##

# 注意 #
## 🔧 問題解決ガイド

### 問題1: 文字化けが発生する

**症状**: 日本語が正しく表示されない
**解決**: エンコーディングを明示指定
```bash
kumihan convert input.txt -e utf-8
```

### 問題2: 記法が認識されない

**症状**: # 太字 # などが太字にならない
**解決**: 構文チェックを実行
```bash
python -m kumihan_formatter check-syntax input.txt
```

### 問題3: 処理が遅い

**症状**: 大きなファイルの変換に時間がかかる
**解決**: パフォーマンスモードを使用
```bash
kumihan convert large.txt --performance
```
##

# 見出し2 #
まとめ
##

# 枠線 #
## 🎓 チュートリアル完了おめでとうございます！

### 習得したスキル
✅ # ハイライト color=green # 基本記法の使い方 ## - 文字装飾とブロック記法
✅ # ハイライト color=green # 色彩豊かな表現 ## - カラーパレットの活用
✅ # ハイライト color=green # 構造化文書作成 ## - プロジェクト文書の実践
✅ # ハイライト color=green # 高度なテクニック ## - 記法の組み合わせ
✅ # ハイライト color=green # 問題解決能力 ## - トラブルシューティング

### 次のステップ
1. # 太字 # 実際のプロジェクト ## でKumihan-Formatterを活用
2. # 太字 # 高度な機能 ## （脚注、表組み等）の探求
3. # 太字 # コミュニティ参加 ## - 経験や知識の共有

# 情報 #
## 📚 追加リソース

- # 下線 # 公式ドキュメント ## : 最新の機能情報
- # 下線 # GitHub リポジトリ ## : ソースコードと Issue 報告
- # 下線 # コミュニティフォーラム ## : ユーザー同士の情報交換
##
##

# 引用 #
"素晴らしい文書は、優れたツールと正しい知識から生まれます。
Kumihan-Formatterで、あなたの表現力を最大限に発揮してください！"
— Kumihan-Formatter開発チーム
##

チュートリアル完了 - あなたもKumihan-Formatterマスターです！ 🎉