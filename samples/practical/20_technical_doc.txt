# 見出し1 #
Kumihan-Formatter 技術文書サンプル
##

# 見出し2 #
システム概要
##

本文書は、# 太字 # Kumihan-Formatter ## の技術仕様書として作成されました。
本フォーマッターは、独自の # ハイライト color=blue # Kumihan記法 ## を用いて、
豊富な表現力を持つ文書作成を可能にします。

# 注意 #
## ⚠️ 重要事項

本システムは # 太字 color=red # Python 3.12以上 ## での動作を前提としています。
旧バージョンでの動作は # ハイライト color=orange # 保証されません ##。
##

# 見出し2 #
アーキテクチャ設計
##

# 見出し3 #
システム構成図
##

# 枠線 #
## 🏗️ システムアーキテクチャ

### コアコンポーネント
```
┌─────────────────────────────────────┐
│           # 太字 # Frontend ##        │
├─────────────────────────────────────┤
│    # コード # CLI Interface ##        │
│    # コード # Web Interface ##        │
└─────────────────────────────────────┘
                    │
                    ▼
┌─────────────────────────────────────┐
│        # 太字 # Parser Engine ##      │
├─────────────────────────────────────┤
│  # コード # KeywordParser ##          │
│  # コード # MarkerParser ##           │
│  # コード # BlockParser ##            │
│  # コード # SyntaxValidator ##        │
└─────────────────────────────────────┘
                    │
                    ▼
┌─────────────────────────────────────┐
│       # 太字 # Renderer Engine ##     │
├─────────────────────────────────────┤
│  # コード # HTMLRenderer ##           │
│  # コード # PDFRenderer ##            │
│  # コード # MarkdownRenderer ##       │
└─────────────────────────────────────┘
```
##

# 見出し3 #
データフロー
##

# 情報 #
## 📊 処理フロー詳細

### 入力段階
1. # ハイライト color=blue # ファイル読み込み ## - UTF-8エンコーディング対応
2. # ハイライト color=green # 構文解析前処理 ## - 改行コード正規化
3. # ハイライト color=purple # 文字エンコーディング検証 ## - 不正文字検出

### 解析段階
1. # コード # tokenize() ## - トークン分割処理
2. # コード # parse_syntax() ## - 構文木生成
3. # コード # validate_structure() ## - 構造検証
4. # コード # optimize_tree() ## - AST最適化

### 出力段階
1. # ハイライト color=orange # レンダリング ## - 指定形式への変換
2. # ハイライト color=red # 品質チェック ## - 出力品質検証
3. # ハイライト color=cyan # ファイル出力 ## - 最終ファイル生成
##

# 見出し2 #
API仕様
##

# 見出し3 #
コマンドラインインタフェース
##

# コードブロック #
```bash
# 基本的な変換コマンド
kumihan convert [INPUT_FILE] [OPTIONS]

# オプション一覧
--output, -o          出力ディレクトリ指定
--format, -f          出力形式 (html|pdf|md)
--encoding, -e        文字エンコーディング指定
--strict             厳密モード有効化
--performance        パフォーマンスモード
--help, -h           ヘルプ表示
--version, -v         バージョン情報
```
##

### 使用例

# 枠線 #
基本的な使用例：

# コード # kumihan convert document.txt -o output/ -f html ##
→ document.txtをHTML形式でoutput/ディレクトリに変換

# コード # kumihan convert large_file.txt --performance -f pdf ##
→ 大容量ファイルをパフォーマンスモードでPDF変換

# コード # kumihan convert --strict multi_file.txt -e utf-8 ##
→ 厳密モードでUTF-8エンコーディング指定変換
##

# 見出し3 #
Python API
##

# コードブロック #
```python
from kumihan_formatter import KumihanFormatter

# フォーマッターインスタンス作成
formatter = KumihanFormatter(
    strict_mode=True,
    performance_mode=False,
    encoding='utf-8'
)

# ファイル変換
result = formatter.convert_file(
    input_path='document.txt',
    output_path='output/document.html',
    output_format='html'
)

# 文字列変換
content = "# 太字 # サンプルテキスト ##"
html_output = formatter.convert_string(
    content, 
    output_format='html'
)

# バッチ処理
files = ['doc1.txt', 'doc2.txt', 'doc3.txt']
formatter.batch_convert(
    files, 
    output_dir='batch_output/',
    output_format='html'
)
```
##

# 見出し2 #
記法仕様詳細
##

# 見出し3 #
基本記法リファレンス
##

# 情報 #
## 📝 実装済み記法一覧

### 文字装飾記法
| 記法 | 構文 | 例 |
|------|------|-----|
| # 太字 # 太字 ## | `# 太字 # テキスト ##` | # 太字 # 強調表示 ## |
| # イタリック # 斜体 ## | `# イタリック # テキスト ##` | # イタリック # 補足説明 ## |
| # 下線 # 下線 ## | `# 下線 # テキスト ##` | # 下線 # 重要項目 ## |
| # 取り消し線 # 削除 ## | `# 取り消し線 # テキスト ##` | # 取り消し線 # 修正前 ## |
| # コード # コード ## | `# コード # code ##` | # コード # function() ## |

### ハイライト記法
| 色指定方法 | 構文例 | 表示例 |
|------------|--------|--------|
| 色名指定 | `# ハイライト color=red # テキスト ##` | # ハイライト color=red # 赤色ハイライト ## |
| 16進数指定 | `# ハイライト color=#ff6b6b # テキスト ##` | # ハイライト color=#ff6b6b # カスタムカラー ## |

### 構造記法
| 記法 | 構文 | 用途 |
|------|------|------|
| # 引用 # 引用ブロック ## | `# 引用 # 内容 ##` | 引用文表示 |
| # 枠線 # 枠線ブロック ## | `# 枠線 # 内容 ##` | 重要情報囲み |
| # 折りたたみ # 展開可能 ## | `# 折りたたみ # 内容 ##` | 詳細情報隠蔽 |
##

# 見出し3 #
高度な記法組み合わせ
##

# 折りたたみ #
## 🔽 複雑な記法組み合わせ例

### ネスト構造での使用

# 枠線 #
### プロジェクト仕様

このプロジェクトでは # 太字 color=blue # 最新技術 ## を使用し、
# ハイライト color=yellow # 高性能な処理 ## を実現しています。

# 注意 #
#### 重要な制約事項

- # コード # memory_limit: 1GB ## 以下での動作
- # ハイライト color=red # Python 3.12+ ## 必須
- # 太字 # UTF-8エンコーディング ## 対応必須
##

#### 技術スタック
- バックエンド: # コード # Python 3.12 ##
- パーサー: # コード # Custom Parser Engine ##
- レンダラー: # コード # Multi-format Renderer ##
##
##

# 見出し2 #
パフォーマンス特性
##

# 見出し3 #
ベンチマーク結果
##

# 枠線 #
## 📈 パフォーマンステスト結果

### 処理速度
| ファイルサイズ | 処理時間 | 処理速度 |
|---------------|----------|----------|
| 1KB | # ハイライト color=green # 0.01秒 ## | 100KB/秒 |
| 10KB | # ハイライト color=green # 0.05秒 ## | 200KB/秒 |
| 100KB | # ハイライト color=blue # 0.4秒 ## | 250KB/秒 |
| 1MB | # ハイライト color=yellow # 3.2秒 ## | 312KB/秒 |
| 10MB | # ハイライト color=orange # 28秒 ## | 357KB/秒 |

### メモリ使用量
| ファイルサイズ | メモリ使用量 | 効率 |
|---------------|-------------|------|
| 1KB | # ハイライト color=green # 15MB ## | ✅ 優秀 |
| 10KB | # ハイライト color=green # 18MB ## | ✅ 優秀 |
| 100KB | # ハイライト color=blue # 35MB ## | ✅ 良好 |
| 1MB | # ハイライト color=yellow # 120MB ## | ⚠️ 注意 |
| 10MB | # ハイライト color=orange # 850MB ## | ⚠️ 要監視 |
##

# 見出し3 #
最適化指針
##

# 注意 #
## ⚡ パフォーマンス最適化のポイント

### メモリ効率化
1. # 太字 # ストリーミング処理 ## - 大容量ファイル対応
2. # 太字 # バッファリング最適化 ## - I/O効率向上
3. # 太字 # ガベージコレクション調整 ## - メモリリーク防止

### 処理速度向上
1. # コード # multiprocessing ## - 並列処理活用
2. # コード # cython最適化 ## - クリティカルパス高速化
3. # コード # キャッシュ機構 ## - 重複処理削減

### 品質保証
1. # ハイライト color=green # 単体テスト ## - 99%カバレッジ達成
2. # ハイライト color=blue # 統合テスト ## - 実用性検証
3. # ハイライト color=purple # 負荷テスト ## - 限界値確認
##

# 見出し2 #
開発・運用ガイド
##

# 見出し3 #
開発環境セットアップ
##

# コードブロック #
```bash
# 開発環境構築手順

# 1. リポジトリクローン
git clone https://github.com/your-repo/kumihan-formatter.git
cd kumihan-formatter

# 2. 仮想環境作成
python -m venv venv
source venv/bin/activate  # Linux/Mac
# venv\Scripts\activate     # Windows

# 3. 依存関係インストール
pip install -e ".[dev]"

# 4. 開発ツールセットアップ
pre-commit install
make install-dev-tools

# 5. テスト実行
make test lint

# 6. 品質チェック
make check-quality
```
##

# 見出し3 #
デプロイメント
##

# 情報 #
## 🚀 本番環境デプロイ手順

### コンテナ化デプロイ

# コードブロック #
```dockerfile
FROM python:3.12-slim

WORKDIR /app

# 依存関係インストール
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# アプリケーションコピー
COPY . .

# ポート公開
EXPOSE 8000

# 実行コマンド
CMD ["python", "-m", "kumihan_formatter", "serve", "--host", "0.0.0.0"]
```
##

### Kubernetes設定

# コードブロック #
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kumihan-formatter
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kumihan-formatter
  template:
    metadata:
      labels:
        app: kumihan-formatter
    spec:
      containers:
      - name: kumihan-formatter
        image: kumihan-formatter:latest
        ports:
        - containerPort: 8000
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
```
##
##

# 見出し2 #
トラブルシューティング
##

# 見出し3 #
よくある問題と解決方法
##

# 枠線 #
## 🔧 FAQ

### Q1: # 太字 # 文字化けが発生する ##
**症状**: 出力ファイルで日本語が正しく表示されない

**原因**: エンコーディング設定の不一致

**解決方法**:
```bash
# UTF-8エンコーディング明示指定
kumihan convert input.txt -e utf-8 -o output/
```

### Q2: # 太字 # メモリ不足エラー ##
**症状**: # コード # MemoryError ## が発生

**原因**: 大容量ファイル処理時のメモリ不足

**解決方法**:
```bash
# パフォーマンスモード有効化
kumihan convert large_file.txt --performance
```

### Q3: # 太字 # 記法が正しく認識されない ##
**症状**: Kumihan記法が正常に変換されない

**原因**: 記法の構文エラー

**解決方法**:
```bash
# 構文チェック実行
python -m kumihan_formatter check-syntax input.txt
```
##

# 見出し2 #
技術文書まとめ
##

本技術文書では、Kumihan-Formatterの包括的な技術仕様を説明しました。

# 枠線 #
## 📋 本文書のカバー範囲

✅ # ハイライト color=green # システムアーキテクチャ ## - 完全網羅
✅ # ハイライト color=green # API仕様詳細 ## - 実装済み機能
✅ # ハイライト color=green # 記法仕様リファレンス ## - 全記法対応
✅ # ハイライト color=green # パフォーマンス特性 ## - ベンチマーク完了
✅ # ハイライト color=green # 開発・運用ガイド ## - 実践的手順
✅ # ハイライト color=green # トラブルシューティング ## - 問題解決支援

### 今後の拡張予定
🔄 # ハイライト color=blue # 表組み機能 ## - Phase 3実装予定
🔄 # ハイライト color=blue # 脚注機能拡張 ## - 自動移動機能
🔄 # ハイライト color=blue # 傍注（ルビ）機能 ## - 日本語対応強化
##

技術文書サンプル作成完了。実際のプロジェクトドキュメントとして十分に活用可能な構成となっています。