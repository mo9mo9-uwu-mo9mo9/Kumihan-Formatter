# Serena Project Configuration Template - Issue #803/#804 Optimization Settings
# 🚀 Kumihan-Formatter Serena最適化設定継承テンプレート
# 💡 66.8%トークン削減効果を新規環境で完全再現
# 📅 Generated from Issue #803 Phase B.2完全実装版
#
# 使用方法:
# 1. {LANGUAGE} を対象言語に置換 (python, typescript, go, rust, java, cpp, ruby, csharp)
# 2. {PROJECT_NAME} をプロジェクト名に置換
# 3. {PROJECT_PATH} をプロジェクトパスに置換（省略可）

# ================================================
# 基本設定セクション
# ================================================

# language of the project (csharp, python, rust, java, typescript, go, cpp, or ruby)
#  * For C, use cpp
#  * For JavaScript, use typescript
# Special requirements:
#  * csharp: Requires the presence of a .sln file in the project folder.
language: {LANGUAGE}

# whether to use the project's gitignore file to ignore files
# Added on 2025-04-07
ignore_all_files_in_gitignore: true
# list of additional paths to ignore
# same syntax as gitignore, so you can use * and **
# Was previously called `ignored_dirs`, please update your config if you are using that.
# Added (renamed)on 2025-04-07
ignored_paths: []

# whether the project is in read-only mode
# If set to true, all editing tools will be disabled and attempts to use them will result in an error
# Added on 2025-04-18
read_only: false

# list of tool names to exclude. We recommend not excluding any tools, see the readme for more details.
excluded_tools: []

# initial prompt for the project. It will always be given to the LLM upon activating the project
# (contrary to the memories, which are loaded on demand).
initial_prompt: ""

project_name: "{PROJECT_NAME}"

# ================================================
# 🚀 Issue #803 Phase B.2完全実装：Serena最適化設定
# 📊 トークン使用量66.8%削減効果を完全継承
# ================================================

# トークン使用量最適化設定 - Issue #801 Phase1対応
# max_answer_chars の段階的設定（デフォルト200000から大幅削減）
default_settings:
  max_answer_chars:
    overview: 5000           # 96%削減 - get_symbols_overview用
    symbol_search: 15000     # 92.5%削減 - find_symbol用
    pattern_search: 10000    # 95%削減 - search_for_pattern用
    detailed_read: 50000     # 75%削減 - read_file, 詳細操作用
    large_edit: 100000       # 50%削減 - replace_symbol_body, 大規模編集用
    insert_ops: 80000        # 60%削減 - insert系操作用
    reference_search: 30000  # 85%削減 - find_referencing_symbols用
    default: 80000           # 60%削減 - その他のツール用

# ツール別適用マッピング（参考情報）
# overview: get_symbols_overview
# symbol_search: find_symbol
# pattern_search: search_for_pattern
# detailed_read: read_file
# large_edit: replace_symbol_body
# insert_ops: insert_after_symbol, insert_before_symbol
# reference_search: find_referencing_symbols

# ================================================
# 🤖 Phase B.1: 動的設定調整・高度最適化システム設定
# Issue #803対応 - Phase A（58%削減）基盤上に追加3-5%削減実現
# ================================================
phase_b_settings:
  # 動的設定調整機能
  adaptive_settings:
    enabled: true
    monitoring_window_size: 100
    adjustment_threshold: 0.05      # 5%以上の改善見込みで調整実行
    learning_rate: 0.1              # 学習アルゴリズムの更新率
    context_pattern_expiry: 86400   # パターン情報の有効期限（秒）

    # コンテキスト別設定調整ルール
    context_rules:
      small_content:    # <5KB
        max_answer_chars_factor: 0.6   # 40%削減
        cache_templates: false
        monitoring_interval: 2.0
      medium_content:   # 5-50KB
        max_answer_chars_factor: 0.8   # 20%削減
        cache_templates: true
        monitoring_interval: 1.0
      large_content:    # 50-500KB
        max_answer_chars_factor: 1.2   # 20%増加
        cache_templates: true
        monitoring_interval: 0.5
      huge_content:     # >500KB
        max_answer_chars_factor: 1.5   # 50%増加
        cache_templates: true
        monitoring_interval: 0.3

  # Token効率性分析システム
  token_efficiency:
    enabled: true
    analysis_window: 100
    baseline_auto_update: true
    efficiency_thresholds:
      excellent: 0.9
      good: 0.7
      acceptable: 0.5
      poor: 0.3

    # 効率性メトリクス重み設定
    metric_weights:
      time_efficiency: 0.4      # トークン/秒
      memory_efficiency: 0.4    # トークン/MB
      token_usage_efficiency: 0.2  # 使用量効率性

  # 非効率パターン検出システム
  pattern_detection:
    enabled: true
    detection_window: 50
    pattern_frequency_threshold: 5    # 5回以上で高頻度と判定
    impact_threshold: 0.3            # 30%以上の影響で重要と判定

    # 検出ルール設定
    detection_rules:
      high_token_usage:
        enabled: true
        threshold: 2.0              # tokens/char
        severity: "high"
      memory_inefficiency:
        enabled: true
        threshold: 1000             # tokens/MB
        severity: "medium"
      slow_processing:
        enabled: true
        threshold: 100              # tokens/sec
        severity: "medium"
      repetitive_operations:
        enabled: true
        frequency_threshold: 5
        severity: "low"
      context_switching:
        enabled: true
        efficiency_variance_threshold: 0.3
        severity: "medium"

  # 高度アラートシステム
  alert_system:
    enabled: true
    alert_history_size: 500

    # アラート閾値設定
    thresholds:
      efficiency_threshold: 0.3           # 効率性最低閾値
      pattern_frequency_threshold: 5      # パターン頻度閾値
      critical_impact_threshold: 0.8      # 重大影響閾値
      prediction_confidence_threshold: 0.7 # 予測信頼度閾値

    # アラート種別設定
    alert_types:
      low_efficiency:
        enabled: true
        severity: "high"
        auto_response: true
      efficiency_degradation:
        enabled: true
        severity: "medium"
        auto_response: false
      high_frequency_pattern:
        enabled: true
        severity_mapping: "pattern_severity"
        auto_response: true
      high_impact_pattern:
        enabled: true
        severity: "critical"
        auto_response: true
      predictive_efficiency_drop:
        enabled: true
        severity: "warning"
        auto_response: false

  # A/Bテスト設定
  ab_testing:
    enabled: true
    default_sample_size: 10
    confidence_threshold: 0.95
    improvement_threshold: 0.05     # 5%以上の改善で採用

    # テスト対象パラメータ
    test_parameters:
      - parameter: "serena.max_answer_chars"
        test_values: [10000, 15000, 20000, 25000, 30000]
        metric: "token_efficiency"
      - parameter: "performance.max_recursion_depth"
        test_values: [30, 50, 80, 100]
        metric: "processing_speed"
      - parameter: "performance.cache_templates"
        test_values: [true, false]
        metric: "memory_efficiency"

# Phase B.1統合設定
phase_b1_integration:
  # Phase A基盤維持設定
  maintain_phase_a_benefits: true
  phase_a_baseline_efficiency: 0.58  # 58%削減ベースライン

  # 追加削減目標
  additional_reduction_target: 0.04   # 4%追加削減目標（3-5%範囲）
  target_confidence: 0.85             # 85%信頼度で達成

  # 統合監視設定
  integrated_monitoring:
    enabled: true
    comprehensive_reporting: true
    phase_comparison: true
    automatic_rollback: true          # Phase A性能を下回る場合の自動復元

# ================================================
# 🧠 Phase B.2: 簡易版最適化システム設定
# Issue #803 Phase B.2対応 - Phase B.1基盤上にさらに5%削減実現
# ================================================
phase_b2_settings:
  # 基本パターン学習システム
  pattern_learning:
    enabled: true
    learning_data_threshold: 5         # 最小学習データ閾値
    efficiency_threshold: 0.6          # 低効率判定閾値
    pattern_expiry_hours: 24           # パターンデータ有効期限

    # 学習効率性計算重み
    learning_weights:
      complexity_efficiency: 0.4        # 複雑性効率性
      size_efficiency: 0.4              # サイズ効率性
      frequency_bonus: 0.2              # 頻度ボーナス（最大）

    # 最適化機会特定設定
    optimization_detection:
      large_content_size_threshold: 30000    # 大規模コンテンツ閾値
      high_complexity_threshold: 0.8         # 高複雑性閾値
      high_frequency_threshold: 15           # 高頻度閾値

      # 推奨改善設定
      recommendations:
        max_answer_chars_reduction: 0.08     # 8%改善期待
        recursion_depth_increase: 0.05       # 5%改善期待
        caching_optimization: 0.03           # 3%改善期待

  # A/Bテスト基本運用システム
  simple_ab_testing:
    enabled: true
    default_sample_size: 10            # 簡易テスト用サンプルサイズ
    test_duration_minutes: 30          # 短時間テスト
    confidence_threshold: 0.6          # 簡易版信頼度閾値
    improvement_threshold: 0.03        # 3%以上の改善で採用

    # 簡易テスト対象
    quick_test_parameters:
      - parameter: "serena.max_answer_chars"
        reduction_factors: [1.0, 0.9, 0.8]  # 現在値、10%削減、20%削減
        expected_improvement: 0.05

  # 自動設定調整強化
  enhanced_auto_adjustment:
    enabled: true
    auto_apply_threshold: 0.05         # 5%以上で自動適用
    confidence_threshold: 0.6          # 自動適用信頼度閾値
    max_adjustment_per_cycle: 3        # サイクル毎最大調整数

    # 調整種別設定
    adjustment_types:
      max_answer_chars_adjustment:
        enabled: true
        min_value: 15000
        max_reduction_factor: 0.8      # 最大20%削減
        expected_improvement: 0.08

      aggressive_optimization:
        enabled: true
        efficiency_threshold: 0.4      # 40%以下で発動
        expected_improvement: 0.15
        actions:
          - "enable_progressive_output"
          - "increase_monitoring_frequency"
          - "activate_memory_optimization"

  # Phase B.2統合システム
  integration_system:
    enabled: true
    adaptive_manager_integration: true
    efficiency_analyzer_integration: true

    # 学習サイクル設定
    learning_cycle:
      auto_run: false                  # 手動実行制御
      cycle_interval_minutes: 60       # 自動実行時の間隔
      max_cycles_per_session: 5        # セッション毎最大サイクル数

    # 統合分析設定
    integrated_analysis:
      adaptive_weight: 0.6             # AdaptiveSettingsManager重み
      analyzer_weight: 0.4             # TokenEfficiencyAnalyzer重み
      confidence_calculation_method: "sample_based"

    # メトリクス追跡
    metrics_tracking:
      patterns_learned: true
      optimizations_applied: true
      ab_tests_completed: true
      total_improvement: true
      session_history_size: 50

# ================================================
# 📊 Phase B.2目標設定・監視
# ================================================
phase_b2_targets:
  # 削減目標
  additional_reduction_target: 0.05    # 5%追加削減目標（簡易版）
  total_target: 0.668                  # Phase B.1(61.8%) + Phase B.2(5%) = 66.8%
  confidence_target: 0.8               # 80%信頼度

  # 進捗監視
  progress_monitoring:
    enabled: true
    real_time_tracking: true
    target_achievement_alerts: true

  # 品質保証
  quality_assurance:
    phase_b1_performance_maintenance: true  # Phase B.1性能維持
    automatic_rollback_threshold: 0.02      # 2%以上の性能低下で自動復元
    stability_monitoring: true

# ================================================
# 🔧 Phase B.4準備設定（未来のAI駆動型最適化対応）
# Issue #803 Phase B.4対応準備
# ================================================
phase_b4_preparation:
  # AI/ML基盤準備
  ai_foundation:
    enabled: false                     # 本実装時にtrueに変更
    ml_libraries_ready: false          # scikit-learn, lightgbm等の準備状況
    prediction_engine_ready: false     # 予測エンジン準備状況
    learning_system_ready: false       # 学習システム準備状況

  # 予測最適化準備
  prediction_readiness:
    data_collection_enabled: false     # Phase B.1/B.2データ活用準備
    feature_engineering_ready: false   # 特徴量エンジニアリング準備
    model_training_ready: false        # モデル学習準備

  # 自律制御準備
  autonomous_control_preparation:
    monitoring_enhanced: false         # 高度監視システム準備
    decision_engine_ready: false       # 意思決定エンジン準備
    action_execution_ready: false      # 行動実行システム準備

# ================================================
# ⚙️ セットアップ完了マーカー・メタデータ
# ================================================
setup_metadata:
  # セットアップ情報
  template_version: "2.0.0"
  optimization_level: "phase_b2_complete"    # phase_a / phase_b1 / phase_b2_complete / phase_b4_ai
  source_project: "Kumihan-Formatter"
  generation_date: "{GENERATION_DATE}"

  # 効果期待値
  expected_benefits:
    token_reduction_percentage: 66.8   # 66.8%削減期待
    baseline_comparison: 200000        # デフォルト200000からの削減
    optimized_default: 80000           # 最適化後のデフォルト値

  # 適用確認項目
  verification_checklist:
    language_setting: false            # {LANGUAGE} 置換確認
    project_name_setting: false        # {PROJECT_NAME} 置換確認
    mcp_integration: false             # MCP統合確認
    serena_connectivity: false         # Serena接続確認
    optimization_activation: false     # 最適化機能有効化確認

# ================================================
# Phase B.2実装完了マーカー
# ================================================
phase_b2_status:
  implementation_version: "1.0.0"
  implementation_date: "template"      # セットアップ時に自動更新
  baseline_phase: "B.1_61.8_percent"
  target_achieved: null                # 実運用で更新
  last_learning_cycle: null            # 実行時に更新

# ================================================
# 🏷️ テンプレート使用方法
# ================================================
# 1. 以下の置換を実行：
#    - {LANGUAGE} → プロジェクト言語 (python/typescript/go/rust/java/cpp/ruby/csharp)
#    - {PROJECT_NAME} → プロジェクト名
#    - {GENERATION_DATE} → セットアップ実行日時
#
# 2. MCPサーバー設定確認：
#    - Serenaローカルホスト設定
#    - context7, gemini-cli設定
#
# 3. 最適化効果確認：
#    - Phase B.2完全実装により66.8%削減効果
#    - リアルタイム監視・学習機能
#    - 自動調整・A/Bテスト機能
#
# 4. 将来拡張準備：
#    - Phase B.4 AI駆動型最適化準備済み
#    - 74-78%削減目標対応可能
#
# ================================================
