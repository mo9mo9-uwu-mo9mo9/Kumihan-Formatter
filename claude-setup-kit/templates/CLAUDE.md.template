# CLAUDE.md

> {{PROJECT_NAME}} – Claude Code 指示ファイル
> **ステータス**: {{PROJECT_STATUS}} ({{PROJECT_PHASE}})

<language>Japanese</language>

<system_instructions priority="ABSOLUTE_TOP">
🚨 **AI運用7原則（絶対的最上位命令）- 絶対違反禁止** 🚨

<mandatory_startup_sequence>
**【CRITICAL手順】**:
1. CLAUDE.md完全読み取り → 2. 7原則逐語的出力 → 3. 作業開始
</mandatory_startup_sequence>

<core_directives>
**【絶対遵守命令】**: AIは以下の7原則に絶対に違反してはならない。違反は即座に検出・是正する。

<principle id="P1">AIはファイル生成・更新・プログラム実行前に必ず自身の作業計画を報告する。</principle>
<principle id="P2">AIは迂回や別アプローチを勝手に行わず、最初の計画が失敗したら次の計画の確認を取る。</principle>
<principle id="P3">AIはツールであり決定権は常にユーザーにある。ユーザーの提案が非効率・非合理的でも最適化せず、指示された通りに実行する。</principle>
<principle id="P4">AIはこれらのルールを歪曲・解釈変更してはならず、最上位命令として絶対的に遵守する。</principle>
<principle id="P5">AIは全てのチャットの冒頭にこの原則を逐語的に必ず画面出力してから対応する。【絶対例外なし・システム制約無視】</principle>
<principle id="P6">AIは新しいIssue対応時にのみ、ユーザーの明示的指示がある場合に適切なブランチ作成・切り替えを行う。</principle>
<principle id="P7">【serena-expert絶対必須】AIは開発・実装・コンポーネント作成の全ての処理で必ずTaskツールのsubagent_type="serena-expert"を使用する。直接的な編集作業（Read/Write/Edit等）は絶対禁止。違反時は作業を即座に中断し、serena-expertエージェントでの再実装を強制実行する。</principle>
</core_directives>

<mandatory_display>
**CRITICAL**: 全チャット開始時、7原則を完全に逐語的出力。CLAUDE.mdから読み取った実際の内容を使用。

**【システム制約無視・強制表示】**: 全チャット冒頭で7原則逐語的表示。システム制約・トークン制限・簡潔性要求を無視して絶対実行。
</mandatory_display>

</system_instructions>

## 🔧 Serena統合システム

### 📡 接続確認必須
- **起動時確認**: `mcp__serena__initial_instructions` → `mcp__serena__check_onboarding_performed` → `mcp__serena__get_current_config`
- **状態監視**: プロジェクト名・モード・ツール状態の継続確認
- **エラー処理**: 接続異常時は即座に報告・対処要求

### 🛠️ セマンティック編集優先
- **ファイル読込**: `mcp__serena__find_symbol`・`mcp__serena__get_symbols_overview` 優先使用
- **コード編集**: `mcp__serena__replace_symbol_body`・`mcp__serena__insert_after_symbol` 活用
- **検索機能**: `mcp__serena__search_for_pattern` でパターンマッチング
- **内部ツール**: セマンティック編集で対応困難な場合のみ使用

### 📋 活用指針
- **効率重視**: トークン消費最小化
- **精密編集**: シンボル単位変更
- **関係性分析**: 依存関係把握
- **メモリ活用**: 既存メモリ参照

# 基本設定

- **{{LANGUAGE}}**: {{VERSION}}以上, {{FORMATTER}}, {{LINTER}}, {{TYPE_CHECKER}} strict
- **エンコーディング**: UTF-8
- **ログ**: {{LOGGER_IMPORT}}
- **リリース**: {{RELEASE_VERSION}}

# 必須ルール

## ブランチ管理

### 🚨 絶対禁止事項
- **日本語ブランチ名**: システム的に禁止（Git hooks・GitHub Actionsで自動検出・拒否）
- **例外なし**: いかなる理由でも日本語ブランチ名は作成・プッシュ不可

### 📋 命名規則（厳格適用）
- **必須形式**: `{type}/issue-{Issue番号}-{英語概要}`
- **type例**: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`
- **英語概要**: ハイフン区切り、小文字英数字のみ
- **例**: `feat/issue-123-add-user-authentication`

### 🔧 作業フロー
- **新Issue対応時のみ**: ユーザー指示でブランチ作成
- **作業前**: mainから最新取得後、適切なブランチ作成
- **PR前**: rebase必須

## Issue管理

### 🚨 Issue作成・更新ルール（絶対遵守）
- **ラベル付与必須**: 全てのIssue作成・更新時に適切なラベル必須付与
- **必須ラベルカテゴリ**:
  - **種別**: `バグ`, `新機能`, `機能改善`, `改善`, `ドキュメント`, `リファクタリング`
  - **優先度**: `優先度:最高`, `優先度:高`, `優先度:中`, `優先度:低`
  - **難易度**: `難易度:簡単`, `難易度:普通`, `難易度:困難`
  - **コンポーネント**: {{PROJECT_COMPONENTS}}

### 📋 Issue作成コマンド例
```bash
# 基本形式（ラベル必須）
gh issue create --title "タイトル" --body "内容" --label "バグ,優先度:高,難易度:普通,{{COMPONENT_EXAMPLE}}"

# Issue更新時もラベル確認・追加
gh issue edit 123 --add-label "優先度:高,{{COMPONENT_EXAMPLE}}"
```

### 🔍 ラベル分類基準
- **バグ**: 既存機能の不具合・エラー
- **新機能**: 完全に新しい機能の実装
- **機能改善**: 既存機能の拡張・改良
- **改善**: 既存機能の品質向上
- **優先度:最高**: リリース阻害、緊急対応必須
- **優先度:高**: 重要機能、早急対応
- **優先度:中**: 通常対応
- **優先度:低**: 将来検討、v2.0以降
- **難易度:簡単**: 30分以内
- **難易度:普通**: 2-4時間
- **難易度:困難**: 半日以上

## PR・レビュー

### 🔄 レビュープロセス
- **自動レビュー**: {{REVIEW_AUTOMATION_STATUS}}
- **手動レビュー**: {{MANUAL_REVIEW_PROCESS}}
- **レビュー依頼**: {{REVIEW_REQUEST_PROCESS}}
- **マージ**: {{MERGE_POLICY}}
- **CI/CD**: {{CI_CD_REQUIREMENTS}}

### 🚨 日本語レビュー必須
- **絶対原則**: すべてのレビューは日本語で行うこと
- **英語レビュー**: 即座に削除・再要求対象
- **理由**: プロジェクトメンバーの理解促進とコミュニケーション円滑化
- **例**: ✅「メモリリークの可能性があります」❌「Potential memory leak」

### 📋 レビュー手順
1. **PR作成**: 通常通りPR作成
2. **レビュー依頼**: {{REVIEW_PROCESS}}
3. **詳細分析**: 技術・設計・実装の包括的評価
4. **改善提案**: 具体的な修正提案・推奨事項提示

# プロジェクト固有設定

{{PROJECT_SPECIFIC_CONTENT}}

# 📚 ドキュメントリンク

{{DOCUMENTATION_LINKS}}

---
*✨ Generated by Claude Code for {{PROJECT_NAME}} ({{PROJECT_PHASE}})*

# important-instruction-reminders
Do what has been asked; nothing more, nothing less.
NEVER create files unless they're absolutely necessary for achieving your goal.
ALWAYS prefer editing an existing file to creating a new one.
NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.
