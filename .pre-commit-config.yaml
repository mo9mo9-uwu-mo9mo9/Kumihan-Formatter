# Kumihan-Formatter Pre-commit Hooks
# Issue #371対応: 段階的チェック体制
# 必須フック（毎回実行）+ 推奨フック（CI時実行）

repos:
  # 標準的な品質チェック
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=500']
      - id: check-merge-conflict

  # Python コードフォーマット
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]

  # Import整理（必須フック）
  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # 基本的な構文チェック（必須フック）
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: ['--max-line-length=127', '--select=E9,F63,F7,F82']
        files: ^(kumihan_formatter|tests)/.*\.py$

# --- 軽量化設定（Issue #371対応）---
# 以下のフックは重いため、CI実行時のみ有効化
# ローカル開発では `SKIP=heavy-checks pre-commit run` で除外可能

  # Kumihan-Formatter 推奨チェック（重いフック）
  - repo: local
    hooks:
      # 軽量テストチェック（必須フック）
      - id: quick-test
        name: ⚡ 軽量テストチェック
        entry: bash
        args: [-c, 'python -m pytest -x --ff -q tests/ || echo "⚠️ テスト失敗: 詳細はCIで確認してください"']
        language: system
        pass_filenames: false
        always_run: true
        stages: [commit]

      # アーキテクチャ原則チェック（推奨フック）
      - id: architecture-validator
        name: 🏗️ アーキテクチャ原則チェック
        entry: python dev/tools/architecture_validator.py --fail-on-error
        language: python
        files: ^kumihan_formatter/.*\.py$
        pass_filenames: false
        additional_dependencies: []
        stages: [manual, pre-push]
        alias: heavy-checks

      # ファイルサイズ制限チェック（推奨フック）
      - id: file-size-limit
        name: 📏 ファイルサイズ制限チェック (300行)
        entry: python dev/tools/check_file_size.py --max-lines=300 --warning-lines=240
        language: python
        files: ^kumihan_formatter/.*\.py$
        pass_filenames: false
        stages: [manual, pre-push]
        alias: heavy-checks

      # 複雑度チェック（推奨フック）
      - id: complexity-check
        name: 🧠 複雑度チェック
        entry: python -m radon cc kumihan_formatter/ --min=B --show-complexity
        language: python
        files: ^kumihan_formatter/.*\.py$
        pass_filenames: false
        additional_dependencies: [radon]
        stages: [manual, pre-push]
        alias: heavy-checks

      # フルテスト（推奨フック）
      - id: full-test
        name: 🧪 フルテストスイート
        entry: python -m pytest --cov=kumihan_formatter --cov-report=term-missing
        language: python
        pass_filenames: false
        stages: [manual, pre-push]
        alias: heavy-checks

      # 型チェック（strict mode必須）
      - id: mypy-strict
        name: 🔍 mypy strict mode型チェック
        entry: python
        args: [-m, mypy, --strict, kumihan_formatter/, tests/]
        language: python
        files: ^(kumihan_formatter|tests)/.*\.py$
        pass_filenames: false
        additional_dependencies: [mypy, pydantic]
        stages: [commit, manual, pre-push]
        always_run: true
