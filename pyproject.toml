[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "kumihan-formatter"
version = "0.3.0"
description = "CoC6th同人シナリオなどのテキストファイルをワンコマンドで配布可能なHTMLに自動組版するCLIツール"
authors = [{name = "mo9mo9-uwu-mo9mo9"}]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "click>=8.0",
    "jinja2>=3.0",
    "rich>=13.0",
    "watchdog>=3.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "isort>=5.0",
    "flake8>=6.0",
    "beautifulsoup4>=4.9",
]

[tool.setuptools.packages.find]
exclude = ["dev*"]

[project.scripts]
kumihan = "kumihan_formatter.cli:main"

[tool.black]
line-length = 88
target-version = ['py39']

[tool.isort]
profile = "black"
line_length = 88

[tool.pytest.ini_options]
testpaths = ["dev/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# バージョン管理設定
[tool.bumpversion]
current_version = "0.3.0"
commit = true
tag = true
tag_name = "v{new_version}"
message = "release: bump version to {new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "kumihan_formatter/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

# テストカバレッジ設定
[tool.coverage.run]
source = ["kumihan_formatter"]
omit = [
    "*/tests/*",
    "*/dev/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "kumihan_formatter/cli_original.py",  # レガシーファイル
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"