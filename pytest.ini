[pytest]
# 基本設定
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
minversion = 6.0

# 実行設定
addopts =
    --verbose
    --strict-markers
    --strict-config
    --tb=short
    --durations=10
    --maxfail=3
    --cov=kumihan_formatter
    --cov-report=term:skip-covered
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=0
    # CI/CD最適化: HTMLレポートとXMLレポート除外
    # --cov-report=html
    # --cov-report=xml
    # --showlocals

# ログ設定
log_cli = false
log_cli_level = WARNING
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# ファイルログ設定
log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# 警告フィルター
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:tkinter.*
    ignore::RuntimeWarning:.*
    ignore::ResourceWarning

# テストマーカー
markers =
    unit: Unit tests - fast, isolated tests
    integration: Integration tests - tests component interactions
    e2e: End-to-end tests - full system tests
    slow: Slow running tests (>1s)
    performance: Performance benchmark tests
    gui: GUI-related tests requiring display
    skip_ci: Tests to skip in CI environment
    mock_heavy: Tests that use extensive mocking
    file_io: Tests that perform file I/O operations
    network: Tests that require network access
    tdd_green: TDD Green phase tests
    tdd_red: TDD Red phase tests
    tdd_refactor: TDD Refactor phase tests

# テストタイムアウト設定 (pytest-timeout required)
# timeout = 300
# timeout_method = thread

# テスト実行環境設定
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = true

# 並行実行設定 (pytest-xdist があれば有効)
# -n auto を addopts に追加することで並行実行可能

# テストディスカバリー最適化
norecursedirs = .git .tox dist build *.egg

# メモリ使用量最適化
cache_dir = .pytest_cache
