{
  "sql_injection": {
    "dangerous_patterns": {
      "string_concatenation": {
        "pattern": "[\"']?\\s*\\+\\s*[\"']",
        "description": "String concatenation in SQL query"
      },
      "string_formatting": {
        "pattern": "[\"']?\\s*%\\s*[\"']",
        "description": "String formatting in SQL query"
      },
      "format_method": {
        "pattern": "\\.format\\s*\\(",
        "description": "String.format() in SQL context"
      },
      "f_string": {
        "pattern": "f[\"'][^\"']*\\{[^}]*\\}",
        "description": "f-string with variables in SQL"
      },
      "dynamic_select": {
        "pattern": "SELECT.*\\+.*FROM",
        "description": "Dynamic SELECT query construction"
      },
      "dynamic_insert": {
        "pattern": "INSERT.*\\+.*VALUES",
        "description": "Dynamic INSERT query construction"
      },
      "dynamic_update": {
        "pattern": "UPDATE.*\\+.*SET",
        "description": "Dynamic UPDATE query construction"
      },
      "dynamic_delete": {
        "pattern": "DELETE.*\\+.*WHERE",
        "description": "Dynamic DELETE query construction"
      },
      "exec_function": {
        "pattern": "exec\\s*\\(",
        "description": "exec() function usage"
      },
      "eval_function": {
        "pattern": "eval\\s*\\(",
        "description": "eval() function usage"
      },
      "os_system": {
        "pattern": "os\\.system\\s*\\(",
        "description": "os.system() function usage"
      },
      "cursor_execute_concat": {
        "pattern": "cursor\\.execute\\s*\\([^?]*[\"'].*\\+",
        "description": "Non-parameterized cursor.execute()"
      },
      "execute_format": {
        "pattern": "\\.execute\\s*\\([^?]*[\"'].*%",
        "description": "String formatting in execute()"
      }
    },
    "safe_patterns": {
      "parameterized_tuple": {
        "pattern": "cursor\\.execute\\s*\\([^,]*,\\s*\\(",
        "description": "Parameterized query with tuple"
      },
      "parameterized_list": {
        "pattern": "cursor\\.execute\\s*\\([^,]*,\\s*\\[",
        "description": "Parameterized query with list"
      },
      "parameterized_dict": {
        "pattern": "\\.execute\\s*\\([^,]*,\\s*\\{",
        "description": "Parameterized query with dict"
      },
      "placeholder": {
        "pattern": "\\?\\s*,",
        "description": "Parameterized placeholder usage"
      }
    }
  },
  "xss": {
    "dangerous_html_patterns": {
      "direct_html_print": {
        "pattern": "print\\s*\\(\\s*[\"']<[^\"']*[\"']",
        "description": "Direct HTML output without escaping"
      },
      "html_template_injection": {
        "pattern": "return\\s+[\"']<[^\"']*[{][^}]*[}]",
        "description": "HTML template with variable injection"
      },
      "html_write_concat": {
        "pattern": "\\.write\\s*\\(\\s*[\"']<[^\"']*\\+",
        "description": "HTML write with string concatenation"
      },
      "inner_html": {
        "pattern": "\\.innerHTML\\s*=",
        "description": "Direct innerHTML assignment"
      },
      "document_write": {
        "pattern": "document\\.write\\s*\\(",
        "description": "document.write() usage"
      },
      "script_tag": {
        "pattern": "[\"']<script[^\"']*[\"']",
        "description": "Script tag in template"
      },
      "javascript_protocol": {
        "pattern": "[\"']javascript:[^\"']*[\"']",
        "description": "javascript: protocol usage"
      },
      "inline_event": {
        "pattern": "[\"']on\\w+\\s*=[^\"']*[\"']",
        "description": "Inline event handlers"
      },
      "iframe_tag": {
        "pattern": "[\"']<iframe[^\"']*[\"']",
        "description": "Iframe tag usage"
      },
      "dynamic_src": {
        "pattern": "[\"']<[^>]*\\ssrc\\s*=\\s*[\"'][^\"']*\\{",
        "description": "Dynamic src attribute"
      },
      "dynamic_href": {
        "pattern": "[\"']<[^>]*\\shref\\s*=\\s*[\"'][^\"']*\\{",
        "description": "Dynamic href attribute"
      },
      "dynamic_action": {
        "pattern": "[\"']<[^>]*\\saction\\s*=\\s*[\"'][^\"']*\\{",
        "description": "Dynamic action attribute"
      },
      "variable_in_html": {
        "pattern": "[\"']<[^>]*>[^<]*\\{[^}]*\\}[^<]*</",
        "description": "Variable in HTML content"
      },
      "html_in_format": {
        "pattern": "\\.format\\s*\\([^)]*<[^>]*>",
        "description": "HTML in string format"
      },
      "f_string_html": {
        "pattern": "f[\"'][^\"']*<[^>]*\\{[^}]*\\}[^>]*>",
        "description": "f-string with HTML and variables"
      }
    },
    "safe_html_patterns": {
      "html_escape": {
        "pattern": "html\\.escape\\s*\\(",
        "description": "HTML escape function usage"
      },
      "cgi_escape": {
        "pattern": "cgi\\.escape\\s*\\(",
        "description": "CGI escape function usage"
      },
      "generic_escape": {
        "pattern": "escape\\s*\\([^)]*\\)",
        "description": "Generic escape function"
      },
      "escaped_html": {
        "pattern": "[\"']&lt;[^\"']*&gt;[\"']",
        "description": "Already escaped HTML"
      },
      "markup_usage": {
        "pattern": "Markup\\s*\\([^)]*\\)",
        "description": "Flask Markup usage"
      },
      "safe_string": {
        "pattern": "safe_string\\s*\\(",
        "description": "Safe string function"
      }
    },
    "javascript_patterns": {
      "eval": {
        "pattern": "eval\\s*\\(",
        "description": "eval() function usage"
      },
      "setTimeout_concat": {
        "pattern": "setTimeout\\s*\\(\\s*[\"'][^\"']*\\+",
        "description": "setTimeout with string concatenation"
      },
      "setInterval_concat": {
        "pattern": "setInterval\\s*\\(\\s*[\"'][^\"']*\\+",
        "description": "setInterval with string concatenation"
      },
      "function_constructor": {
        "pattern": "Function\\s*\\(\\s*[\"'][^\"']*\\+",
        "description": "Function constructor with concatenation"
      },
      "execScript": {
        "pattern": "execScript\\s*\\(",
        "description": "execScript usage (IE)"
      }
    },
    "url_patterns": {
      "dynamic_url": {
        "pattern": "[\"']https?://[^\"']*\\{[^}]*\\}",
        "description": "Dynamic URL construction"
      },
      "location_concat": {
        "pattern": "window\\.location\\s*=\\s*[^;]*\\+",
        "description": "Location assignment with concatenation"
      },
      "document_location": {
        "pattern": "document\\.location\\s*=\\s*[^;]*\\+",
        "description": "Document location with concatenation"
      }
    }
  },
  "csrf": {
    "state_changing_methods": ["POST", "PUT", "PATCH", "DELETE"],
    "flask_route_patterns": {
      "app_route": {
        "pattern": "@app\\.route\\s*\\(\\s*[\"']([^\"']+)[\"'](?:.*methods\\s*=\\s*\\[([^\\]]+)\\])?",
        "description": "Flask route definition"
      },
      "blueprint_route": {
        "pattern": "@blueprint\\.route\\s*\\(\\s*[\"']([^\"']+)[\"'](?:.*methods\\s*=\\s*\\[([^\\]]+)\\])?",
        "description": "Flask blueprint route"
      },
      "add_url_rule": {
        "pattern": "app\\.add_url_rule\\s*\\(\\s*[\"']([^\"']+)[\"']",
        "description": "Flask URL rule"
      }
    },
    "django_url_patterns": {
      "path": {
        "pattern": "path\\s*\\(\\s*[\"']([^\"']+)[\"']",
        "description": "Django path"
      },
      "url": {
        "pattern": "url\\s*\\(\\s*r?[\"']([^\"']+)[\"']",
        "description": "Django URL pattern"
      },
      "re_path": {
        "pattern": "re_path\\s*\\(\\s*r?[\"']([^\"']+)[\"']",
        "description": "Django regex path"
      }
    },
    "csrf_protection_patterns": {
      "csrf_token": {
        "pattern": "csrf_token",
        "description": "CSRF token usage"
      },
      "csrf_protect": {
        "pattern": "@csrf_protect",
        "description": "CSRF protect decorator"
      },
      "csrf_protect_class": {
        "pattern": "CSRFProtect",
        "description": "CSRF protection class"
      },
      "csrf_exempt": {
        "pattern": "csrf\\.exempt",
        "description": "CSRF exemption"
      },
      "verify_csrf": {
        "pattern": "verify_csrf_token",
        "description": "CSRF token verification"
      },
      "check_csrf": {
        "pattern": "check_csrf",
        "description": "CSRF check function"
      },
      "template_csrf": {
        "pattern": "{% csrf_token %}",
        "description": "Template CSRF token"
      },
      "csrf_header": {
        "pattern": "X-CSRFToken",
        "description": "CSRF header"
      },
      "csrf_field": {
        "pattern": "_csrf_token",
        "description": "CSRF token field"
      }
    },
    "form_patterns": {
      "post_form": {
        "pattern": "<form[^>]*method\\s*=\\s*[\"']?post[\"']?[^>]*>",
        "description": "POST form without CSRF"
      },
      "put_form": {
        "pattern": "<form[^>]*method\\s*=\\s*[\"']?put[\"']?[^>]*>",
        "description": "PUT form without CSRF"
      },
      "delete_form": {
        "pattern": "<form[^>]*method\\s*=\\s*[\"']?delete[\"']?[^>]*>",
        "description": "DELETE form without CSRF"
      }
    },
    "ajax_patterns": {
      "jquery_post": {
        "pattern": "\\.post\\s*\\(",
        "description": "JavaScript POST request"
      },
      "jquery_put": {
        "pattern": "\\.put\\s*\\(",
        "description": "JavaScript PUT request"
      },
      "jquery_delete": {
        "pattern": "\\.delete\\s*\\(",
        "description": "JavaScript DELETE request"
      },
      "fetch_post": {
        "pattern": "fetch\\s*\\([^)]*method\\s*:\\s*[\"']POST[\"']",
        "description": "Fetch POST request"
      },
      "xhr": {
        "pattern": "XMLHttpRequest.*\\.send",
        "description": "XMLHttpRequest usage"
      }
    },
    "security_header_patterns": {
      "samesite_strict": {
        "pattern": "SameSite\\s*=\\s*[\"']?Strict[\"']?",
        "description": "SameSite Strict cookie"
      },
      "samesite_lax": {
        "pattern": "SameSite\\s*=\\s*[\"']?Lax[\"']?",
        "description": "SameSite Lax cookie"
      },
      "secure_flag": {
        "pattern": "Secure\\s*=\\s*True",
        "description": "Secure cookie flag"
      },
      "httponly_flag": {
        "pattern": "HttpOnly\\s*=\\s*True",
        "description": "HttpOnly cookie flag"
      }
    }
  },
  "file_upload": {
    "dangerous_extensions": [
      ".exe", ".bat", ".cmd", ".com", ".scr", ".vbs", ".vbe", ".js", ".jse",
      ".ws", ".wsf", ".wsc", ".wsh", ".ps1", ".ps1xml", ".ps2", ".ps2xml",
      ".psc1", ".psc2", ".msh", ".msh1", ".msh2", ".mshxml", ".msh1xml",
      ".msh2xml", ".scf", ".lnk", ".inf", ".reg",
      ".php", ".php3", ".php4", ".php5", ".phtml", ".asp", ".aspx", ".jsp",
      ".jspx", ".cfm", ".cfml", ".cfc", ".pl", ".py", ".rb", ".sh",
      ".jar", ".war", ".ear",
      ".docm", ".dotm", ".xlsm", ".xltm", ".xlam", ".pptm", ".potm",
      ".ppam", ".ppsm", ".sldm"
    ],
    "upload_handler_patterns": {
      "flask_files": {
        "pattern": "request\\.files\\[",
        "description": "Flask file upload handler"
      },
      "django_files": {
        "pattern": "request\\.FILES\\[",
        "description": "Django file upload handler"
      },
      "form_file": {
        "pattern": "request\\.form\\.get.*file",
        "description": "Form file input handler"
      },
      "file_storage": {
        "pattern": "werkzeug.*FileStorage",
        "description": "Werkzeug FileStorage usage"
      },
      "file_save": {
        "pattern": "\\.save\\s*\\(",
        "description": "File save operation"
      },
      "binary_write": {
        "pattern": "with\\s+open\\([^)]*[\"']wb[\"']",
        "description": "Binary file write operation"
      },
      "file_write": {
        "pattern": "\\.write\\s*\\([^)]*file",
        "description": "File write with file data"
      },
      "pil_image": {
        "pattern": "PIL\\.Image\\.open",
        "description": "PIL Image file processing"
      },
      "opencv_image": {
        "pattern": "cv2\\.imread",
        "description": "OpenCV image processing"
      },
      "pandas_read": {
        "pattern": "pandas\\.read_",
        "description": "Pandas file reading"
      }
    },
    "security_validation_patterns": {
      "extension_check": {
        "pattern": "\\.lower\\(\\)\\.endswith\\(",
        "description": "File extension validation"
      },
      "splitext": {
        "pattern": "os\\.path\\.splitext",
        "description": "File extension extraction"
      },
      "pathlib_suffix": {
        "pattern": "pathlib\\.Path\\([^)]*\\)\\.suffix",
        "description": "Pathlib suffix check"
      },
      "mime_type": {
        "pattern": "mimetypes\\.guess_type",
        "description": "MIME type validation"
      },
      "magic_file": {
        "pattern": "magic\\.from_file",
        "description": "File magic number check"
      },
      "imghdr": {
        "pattern": "imghdr\\.what",
        "description": "Image header validation"
      },
      "content_length": {
        "pattern": "content_length|Content-Length",
        "description": "File size check"
      },
      "size_comparison": {
        "pattern": "len\\([^)]*\\)\\s*[<>]",
        "description": "Size comparison"
      },
      "max_file_size": {
        "pattern": "MAX_FILE_SIZE|max_file_size",
        "description": "File size limit constant"
      },
      "secure_filename": {
        "pattern": "secure_filename",
        "description": "Secure filename function"
      },
      "path_traversal": {
        "pattern": "[\"']\\.\\.[\"']\\s+not\\s+in",
        "description": "Path traversal prevention"
      },
      "filename_regex": {
        "pattern": "re\\.match.*filename",
        "description": "Filename pattern validation"
      }
    },
    "malicious_file_patterns": {
      "script_injection": {
        "pattern": "<script[^>]*>.*</script>",
        "description": "HTML script injection in filename"
      },
      "javascript_protocol": {
        "pattern": "javascript:",
        "description": "JavaScript protocol in filename"
      },
      "data_uri": {
        "pattern": "data:.*base64",
        "description": "Data URI with base64 in filename"
      },
      "path_traversal": {
        "pattern": "\\.\\.[\\\\/]",
        "description": "Path traversal attempt"
      },
      "special_chars": {
        "pattern": "[<>&\"']",
        "description": "HTML/XML special characters in filename"
      }
    }
  }
}