================================================================================
  Kumihan-Formatter 詳細使用ガイド
  Version: 0.3.0
  最終更新: 2025-06-24
================================================================================

目次
================================================================================
1. はじめに
2. 動作環境と前提条件
3. インストール手順（詳細版）
4. 基本的な使い方
5. 記法リファレンス（完全版）
6. 実践的な使用例
7. トラブルシューティング
8. よくある質問（FAQ）
9. エラーメッセージ一覧と対処法
10. 上級者向け機能
11. 用語集
12. 付録

================================================================================
1. はじめに
================================================================================

Kumihan-Formatterは、CoC6th同人シナリオなどのテキストファイルを、
ワンコマンドで配布可能なHTMLに自動組版するクロスプラットフォーム
CLIツールです。

【このガイドの特徴】
・コマンドライン初心者でも理解できる詳細な説明
・実践的な使用例とトラブル解決方法
・エラー対処法の完全網羅

【対象読者レベル】
★☆☆ 初心者: ダブルクリック実行のみ使用
★★☆ 中級者: コマンドライン基本操作を習得
★★★ 上級者: 設定ファイル等のカスタマイズ活用

【クイックスタート】
最も簡単な使い方は以下の手順です：
1. setup_desktop_launcher.bat（Windows）をダブルクリック
2. .txtファイルをデスクトップのアイコンにドラッグ&ドロップ
3. 自動的にHTMLに変換されブラウザで表示

詳細な手順は「4. 基本的な使い方」をご覧ください。

================================================================================
2. 動作環境と前提条件
================================================================================

【必須環境】
・OS: Windows 10/11 または macOS 10.15以降
・Python: 3.9以上
・メモリ: 2GB以上（推奨4GB以上）
・ディスク容量: 100MB以上の空き容量

【推奨ツール】
・テキストエディタ: 
  - Windows: メモ帳、Notepad++、VS Code
  - macOS: テキストエディット、VS Code
・ブラウザ: Chrome、Firefox、Safari、Edge（HTML確認用）

【Python確認方法】
■ Windows
1. Windowsキー + R を押す
2. "cmd" と入力してEnterキー
3. 以下を入力して実行：
   python --version
   または
   python3 --version

■ macOS
1. アプリケーション > ユーティリティ > ターミナル を開く
2. 以下を入力して実行：
   python3 --version

【Pythonの結果判定】
✓ 正常: "Python 3.9.x" 以上が表示される
✗ 異常: "command not found" や "3.8.x" 以下が表示される

【Pythonインストール方法】
■ Windows
1. https://www.python.org/downloads/ にアクセス
2. 黄色い「Download Python 3.x.x」ボタンをクリック
3. ダウンロードされたファイル（python-3.x.x-amd64.exe）を実行
4. 【重要】「Add Python to PATH」にチェックを入れる
5. 「Install Now」をクリック
6. インストール完了後、PCを再起動
7. 上記の確認方法で再度チェック

■ macOS
方法1: 公式インストーラー使用
1. https://www.python.org/downloads/ にアクセス
2. macOS向けのインストーラーをダウンロード
3. ダウンロードしたファイルを実行してインストール

方法2: Homebrew使用（開発者向け）
1. ターミナルで以下を実行：
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
2. 次に以下を実行：
   brew install python3

================================================================================
3. インストール手順（詳細版）
================================================================================

【事前確認】
□ Python 3.9以上がインストール済み
□ インターネット接続が利用可能
□ 管理者権限でのインストールが可能

【Windows向け完全手順】
■ ステップ1: ソースコードの取得
1. ブラウザで以下にアクセス：
   https://github.com/mo9mo9-uwu-mo9mo9/Kumihan-Formatter
2. 緑色の「Code」ボタンをクリック
3. 「Download ZIP」を選択
4. ダウンロードしたZIPファイルを任意の場所に展開
   （推奨: C:\Users\ユーザー名\Documents\Kumihan-Formatter）

■ ステップ2: コマンドプロンプトを開く
1. Windowsキー + R を押す
2. "cmd" と入力してEnterキー
3. 黒い画面（コマンドプロンプト）が開く

■ ステップ3: フォルダに移動
1. 以下のコマンドを入力（パスは展開した場所に合わせる）：
   cd C:\Users\ユーザー名\Documents\Kumihan-Formatter
2. Enterキーを押して実行
3. プロンプトが変わることを確認

■ ステップ4: 仮想環境の作成
1. 以下のコマンドを入力：
   python -m venv .venv
2. Enterキーを押して実行
3. 処理完了まで1-2分待機

■ ステップ5: 仮想環境の有効化
1. 以下のコマンドを入力：
   .venv\Scripts\activate
2. Enterキーを押して実行
3. プロンプトの先頭に "(.venv)" が表示されることを確認

■ ステップ6: Kumihan-Formatterのインストール
1. 以下のコマンドを入力：
   pip install -e .
2. Enterキーを押して実行
3. 複数のパッケージがダウンロード・インストールされる
4. "Successfully installed" で終わることを確認

【macOS向け完全手順】
■ ステップ1: ソースコードの取得
1. ブラウザで以下にアクセス：
   https://github.com/mo9mo9-uwu-mo9mo9/Kumihan-Formatter
2. 緑色の「Code」ボタンをクリック
3. 「Download ZIP」を選択
4. ダウンロードしたZIPファイルを展開
   （推奨: /Users/ユーザー名/Documents/Kumihan-Formatter）

■ ステップ2: ターミナルを開く
1. アプリケーション > ユーティリティ > ターミナル
2. 黒い画面（ターミナル）が開く

■ ステップ3: フォルダに移動
1. 以下のコマンドを入力（パスは展開した場所に合わせる）：
   cd /Users/ユーザー名/Documents/Kumihan-Formatter
2. Enterキーを押して実行

■ ステップ4: 仮想環境の作成
1. 以下のコマンドを入力：
   python3 -m venv .venv
2. Enterキーを押して実行

■ ステップ5: 仮想環境の有効化
1. 以下のコマンドを入力：
   source .venv/bin/activate
2. Enterキーを押して実行
3. プロンプトの先頭に "(.venv)" が表示されることを確認

■ ステップ6: Kumihan-Formatterのインストール
1. 以下のコマンドを入力：
   pip install -e .
2. Enterキーを押して実行

【インストール確認】
■ 動作確認コマンド
python -m kumihan_formatter.cli --help

■ 期待される結果
使用方法やオプションの説明が表示される

■ エラーの場合
"ModuleNotFoundError" が表示される場合は、
ステップ6のインストールが正常に完了していません。
以下を再実行してください：
pip install -e .

【初期設定】
インストール完了後、以下を実行してデスクトップランチャーを作成：

■ Windows
setup_desktop_launcher.bat をダブルクリック

■ macOS
setup_desktop_launcher.command をダブルクリック
（セキュリティ警告が出た場合は「開く」を選択）

これにより、デスクトップにKumihan-Formatterのショートカットが作成され、
ドラッグ&ドロップでの簡単変換が可能になります。

================================================================================
4. 基本的な使い方
================================================================================

Kumihan-Formatterには複数の使用方法があります。
まずは「機能ショーケース」で何ができるか確認し、
その後「方法1」から順にお試しください。

【機能ショーケース（初めての方向け）】
どんなことができるか、まずはサンプルで確認してみましょう。

■ サンプル生成方法
1. コマンドプロンプト（Windows）またはターミナル（macOS）を開く
2. 以下のコマンドを入力して実行：
   kumihan --generate-sample

■ 生成されるもの
- showcase.txt：すべての記法を含むサンプルテキスト
- showcase.html：変換後のHTML（自動的にブラウザで開きます）
- images/：サンプル画像ファイル

■ 含まれる機能
- 見出しと文字装飾（太字、イタリック、複合スタイル）
- 各種リスト（箇条書き、番号付き、キーワード付き）
- 枠線とハイライト（色指定可能）
- 画像の埋め込み（PNG、JPEG、GIF等）
- 目次（TOC）の自動生成
- 複雑なレイアウトの組み合わせ

【方法1: ダブルクリック実行（初心者推奨★☆☆）】
最も簡単で確実な方法です。

■ 準備（初回のみ）
Windows: setup_desktop_launcher.bat をダブルクリック
macOS: setup_desktop_launcher.command をダブルクリック
→ デスクトップに「Kumihan-Formatter」アイコンが作成される

■ 日常的な使用
1. 変換したい.txtファイルをデスクトップのアイコンにドラッグ&ドロップ
2. 自動的に変換処理が開始される
3. 完了すると「dist」フォルダにHTMLファイルが作成される
4. ブラウザが自動で開き、変換結果が表示される

■ ファイルの場所
変換前: あなたの原稿.txt
変換後: dist/あなたの原稿.html

【方法2: コマンドライン基本実行（中級者向け★★☆）】
コマンドラインに慣れた方向けの方法です。

■ 事前準備
1. コマンドプロンプト（Windows）またはターミナル（macOS）を開く
2. Kumihan-Formatterのフォルダに移動：
   cd /path/to/Kumihan-Formatter
3. 仮想環境を有効化：
   Windows: .venv\Scripts\activate
   macOS: source .venv/bin/activate

■ 基本的な変換コマンド
python -m kumihan_formatter.cli 入力ファイル.txt

例:
python -m kumihan_formatter.cli my_scenario.txt

■ 出力先を指定する場合
python -m kumihan_formatter.cli 入力ファイル.txt -o 出力フォルダ/

例:
python -m kumihan_formatter.cli my_scenario.txt -o output/

■ ブラウザを開かずに変換する場合
python -m kumihan_formatter.cli 入力ファイル.txt --no-preview

【方法3: ファイル監視モード（上級者向け★★★）】
ファイルを保存するたびに自動で再変換される便利な機能です。

■ 監視モードの開始
python -m kumihan_formatter.cli 入力ファイル.txt --watch

■ 監視モードの特徴
・ファイルを保存するたびに自動変換
・ブラウザで確認しながらリアルタイム編集可能
・Ctrl+C（Windows）またはCmd+C（macOS）で終了

■ 使用例（執筆中の確認に便利）
python -m kumihan_formatter.cli draft.txt --watch -o preview/

【フォルダ構成の理解】
Kumihan-Formatter/
├── あなたの原稿.txt       ← ここにテキストファイルを置く
├── dist/                  ← 変換結果のHTMLが出力される
│   ├── あなたの原稿.html
│   └── （他の変換ファイル）
├── examples/              ← サンプルファイル
├── kumihan_formatter/     ← プログラム本体
└── （その他のファイル）

【初回テスト実行】
動作確認のため、付属のサンプルファイルで試してみましょう：

■ サンプルファイルでテスト
python -m kumihan_formatter.cli examples/sample.txt

または

examples/sample.txt をデスクトップアイコンにドラッグ&ドロップ

■ 期待される結果
・dist/sample.html が作成される
・ブラウザでHTMLが表示される
・見出し、太字、枠線などが正しく表示される

【次のステップ】
基本的な使い方をマスターしたら、「5. 記法リファレンス」で
詳細な記法を学んでみましょう。

================================================================================
5. 記法リファレンス（完全版）
================================================================================

Kumihan-Formatterでは、シンプルな記法で美しいHTMLを生成できます。
以下では、すべての記法を例とともに詳しく説明します。

【基本ルール】
・テキストファイルはUTF-8で保存
・記号は半角文字を使用
・空行で段落を区切る
・;;; は必ず半角コロン3つ

--------------------------------------------------------------------------------
5.1 段落と改行
--------------------------------------------------------------------------------

【通常の段落】
テキストをそのまま書きます。
段落内での改行は維持されます。

空行を入れると新しい段落になります。

この部分は2つ目の段落です。
複数行で書くこともできます。

【変換結果イメージ】
<p>テキストをそのまま書きます。<br>段落内での改行は維持されます。</p>
<p>この部分は2つ目の段落です。<br>複数行で書くこともできます。</p>

--------------------------------------------------------------------------------
5.2 リスト
--------------------------------------------------------------------------------

【箇条書きリスト】
■ 基本的な書き方
- 項目1
- 項目2
- 項目3

■ 長い項目の例
- この項目は長いテキストでも問題ありません。自動的に適切に表示されます。
- 2番目の項目
- 最後の項目

【番号付きリスト】
■ 基本的な書き方
1. 最初の項目
2. 2番目の項目
3. 3番目の項目

■ 番号は自動で調整される
1. 項目番号は1から始める
2. 連続した番号でなくても自動調整される
3. HTMLでは正しい番号で表示される

【混在パターン】
通常のテキストの後に：

- 箇条書き項目1
- 箇条書き項目2

続いて番号付きリスト：

1. 番号付き項目1
2. 番号付き項目2

さらに説明文が続きます。

--------------------------------------------------------------------------------
5.3 ブロック記法（基本）
--------------------------------------------------------------------------------

ブロック記法は、;;;キーワード と ;;; で囲んで使用します。

【太字ブロック】
;;;太字
ここに太字にしたいテキストを書きます。
複数行でも問題ありません。
;;;

→ 結果: <strong>～</strong> で囲まれた太字表示

【イタリック（斜体）ブロック】
;;;イタリック
斜体で表現したいテキストです。
英語では italic、日本語では斜めの文字になります。
;;;

→ 結果: <em>～</em> で囲まれた斜体表示

【枠線ブロック】
;;;枠線
重要な情報を枠線で囲みます。
注意事項や重要なルールなどに使用します。
;;;

→ 結果: 境界線付きのボックス表示

【ハイライトブロック】
;;;ハイライト
背景色をつけて強調表示します。
目立たせたい情報に使用します。
;;;

→ 結果: 背景色付きの強調表示

【色指定ハイライト】
;;;ハイライト color=#ff0
黄色の背景で表示されます。
;;;

;;;ハイライト color=#fdd
淡いピンクの背景で表示されます。
;;;

;;;ハイライト color=#dfd
淡い緑の背景で表示されます。
;;;

■ 使用可能な色指定
・#ff0 (黄色)
・#fdd (淡いピンク)
・#dfd (淡い緑)
・#ddf (淡い青)
・#ffe (淡い黄色)
・#ffcccc (明るいピンク)
・その他の16進数カラーコード（#で始まる6文字）

--------------------------------------------------------------------------------
5.4 見出し
--------------------------------------------------------------------------------

見出しは5段階のレベルがあります。

【見出し1（最大レベル）】
;;;見出し1
メインタイトル
;;;

→ 結果: <h1>～</h1> 最も大きな見出し

【見出し2】
;;;見出し2
章タイトル・大見出し
;;;

→ 結果: <h2>～</h2> 大きな見出し

【見出し3】
;;;見出し3
節タイトル・中見出し
;;;

→ 結果: <h3>～</h3> 中サイズの見出し

【見出し4】
;;;見出し4
項目タイトル・小見出し
;;;

→ 結果: <h4>～</h4> 小さな見出し

【見出し5（最小レベル）】
;;;見出し5
最小の見出し
;;;

→ 結果: <h5>～</h5> 最も小さな見出し

【見出しの使い分けの例】
見出し1: ドキュメント全体のタイトル
見出し2: 章（第1章、第2章など）
見出し3: 節（1.1、1.2など）
見出し4: 項（1.1.1、1.1.2など）
見出し5: より細かい分類

--------------------------------------------------------------------------------
5.5 複合キーワード（組み合わせ）
--------------------------------------------------------------------------------

複数のキーワードを「+」記号で組み合わせることができます。

【見出し + 太字】
;;;見出し2+太字
太字の見出し
;;;

→ 結果: 太字で表示される見出し2

【枠線 + ハイライト】
;;;枠線+ハイライト
枠線とハイライトの両方が適用されます。
;;;

→ 結果: 枠線で囲まれ、かつ背景色がついた表示

【太字 + イタリック】
;;;太字+イタリック
太字かつ斜体で表示されます。
;;;

→ 結果: 太字と斜体の両方が適用された表示

【複雑な組み合わせ例】
;;;見出し3+枠線+太字
3つの効果を組み合わせた見出し
;;;

;;;ハイライト+太字+イタリック color=#ffe
背景色付きで太字かつ斜体
;;;

【組み合わせのルール】
・キーワードの順序は関係ありません
・最大で4-5個のキーワードまで組み合わせ可能
・同じ種類のキーワード（例：見出し1+見出し2）は使用不可
・色指定は最後に書く

--------------------------------------------------------------------------------
5.6 キーワード付きリスト
--------------------------------------------------------------------------------

リスト項目に個別にスタイルを適用できます。

【基本的なキーワード付きリスト】
- :太字: この項目だけ太字になります
- :枠線: この項目が枠線で囲まれます
- :ハイライト: この項目が強調表示されます
- 通常の項目（キーワードなし）

【複合キーワード付きリスト】
- :太字+枠線: 太字かつ枠線付きの項目
- :見出し3+太字: 見出し3サイズで太字の項目
- :ハイライト+太字 color=#fdd: 色付き背景で太字
- 通常の項目

【実用例】
重要度に応じた項目表示：
- :ハイライト color=#fdd: 【重要】必ず確認すべき項目
- :太字: 【注意】覚えておくべき項目  
- :枠線: 【参考】追加情報
- 通常の説明項目

--------------------------------------------------------------------------------
5.7 ブロック内のリスト
--------------------------------------------------------------------------------

ブロック記法の中にリストを含めることができます。

【枠線内のリスト】
;;;枠線
重要なルール：

- ルール1: 必ず守ること
- ルール2: 推奨事項
- ルール3: 禁止事項

以上のルールを遵守してください。
;;;

【ハイライト内のリスト】
;;;ハイライト color=#dfd
成功条件：

1. 条件1をクリア
2. 条件2を満たす
3. 条件3を達成

すべて満たせば成功です。
;;;

【複合ブロック内のリスト】
;;;見出し2+枠線
探索可能な場所

- 1階: ロビー、受付、待合室
- 2階: 診察室、病室、ナースステーション
- 地下: 研究室、倉庫、機械室

各階で手がかりを探してください。
;;;

【混在パターン】
;;;枠線
シナリオの流れ：

まず導入部分で状況を説明します。

- 導入: 事件の概要説明
- 情報収集: 手がかり集め
- 推理: 真相の解明

次に具体的な行動フェーズに移ります：

1. 現場調査
2. 関係者への聞き込み
3. 証拠の照合
4. 犯人の特定

最後に解決フェーズです。
;;;

--------------------------------------------------------------------------------
5.8 画像埋め込み
--------------------------------------------------------------------------------

テキスト内に画像を埋め込むことができます。

【基本的な書き方】
;;;ファイル名.png;;;

;;;ファイル名.jpg;;;

【画像ファイルの配置】
画像ファイルは以下のように配置します：

あなたのプロジェクト/
├── scenario.txt    ← テキストファイル
└── images/         ← 画像フォルダ
    ├── map.png
    ├── npc.jpg
    └── item.gif

【対応画像形式】
- PNG (.png)
- JPEG (.jpg, .jpeg)
- GIF (.gif)
- WebP (.webp)
- SVG (.svg)

【使用例】
次の地図を参照してください：

;;;map.png;;;

この地図は探索エリアを示しています。

【他の記法との組み合わせ】
;;;枠線
重要なNPC:

;;;npc_portrait.jpg;;;

このNPCがキーパーソンです。
;;;

【注意事項】
- 画像ファイル名にはパス区切り文字（/ や \）を含められません
- HTML変換時に、imagesフォルダも出力先にコピーされます
- 同名ファイルが複数回参照された場合、警告が表示されます

--------------------------------------------------------------------------------
5.9 目次（TOC）
--------------------------------------------------------------------------------

長い文書に目次を追加して、ナビゲーションを改善できます。

【基本的な書き方】
;;;目次;;;

この記法を文書の先頭付近に追加するだけで、自動的に目次が生成されます。

【目次の特徴】
- 見出し（見出し1〜見出し5）から自動生成
- 左サイドバーに固定表示
- クリックで該当箇所へジャンプ
- 表示/非表示の切り替え可能（状態を記憶）
- 現在読んでいる位置を自動ハイライト

【使用例】
;;;目次;;;

;;;見出し1
第1章：はじめに
;;;

本文テキスト...

;;;見出し2
1.1 概要
;;;

詳細説明...

【注意事項】
- PC（16:9ディスプレイ）とタブレットでのみ表示
- モバイル環境では非表示
- 印刷時も非表示になります

【レイアウト】
画面幅1920pxの場合：
- 左サイドバー：250px（目次）
- メインコンテンツ：800px
- 右サイドバー：250px（将来の拡張用）

--------------------------------------------------------------------------------
5.10 コメント行
--------------------------------------------------------------------------------

「#」で始まる行はコメントとして扱われ、HTMLには出力されません。

【コメントの例】
# これはコメント行です（HTMLに出力されません）
# ============================================
# ここは執筆者向けのメモです
# ============================================

通常のテキストはそのまま出力されます。

# TODO: この部分は後で修正する
# 注意: この記法は読者には見えません

【コメントの活用法】
・執筆メモ
・TODO項目
・バージョン管理情報
・セクション区切り
・一時的にテキストを無効化

【注意事項】
・行の先頭に # を書く（行の途中は無効）
・半角の # を使用
・スペースがあってもコメントとして認識される

例:
   # この行もコメントです（先頭にスペースがあってもOK）

--------------------------------------------------------------------------------
5.11 記法の組み合わせ例
--------------------------------------------------------------------------------

実際の執筆でよく使用される記法の組み合わせパターンです。

【シナリオ執筆パターン】
;;;見出し1
廃病院の怪異
;;;

# ここは導入部分
舞台設定の説明を書きます。

;;;見出し2+太字
導入
;;;

探索者たちが事件に関わるきっかけを説明します。

;;;枠線
【重要な手がかり】
- 1階受付: 古い診察記録
- 2階病室: 血痕の残るベッド
- 地下研究室: 実験資料

これらを見つけることでシナリオが進行します。
;;;

;;;ハイライト color=#fdd
【SAN値チェック】
成功: 1ポイント減少
失敗: 1d4ポイント減少

恐怖の内容を詳しく描写してください。
;;;

【ルールブック記載パターン】
;;;見出し2
戦闘ルール
;;;

基本的な戦闘の流れを説明します。

;;;見出し3+枠線
攻撃の手順
;;;

1. 命中判定を行う
2. 成功した場合、ダメージを決定
3. 防御側は回避または防御を選択
4. 最終ダメージを適用

;;;太字
重要: 攻撃側が先にダイスを振ること
;;;

【FAQ形式パターン】
;;;見出し2+太字
よくある質問
;;;

- :太字: Q1. キャラクター作成の手順は？
- A1. 基本能力値を決定後、技能を振り分けます。

- :太字: Q2. 経験値はいつ獲得できますか？
- A2. セッション終了時に自動的に獲得されます。

;;;ハイライト color=#ffe
【注意】
ルール解釈で迷った場合は、GMの判断を優先してください。
;;;

これらの例を参考に、用途に応じて記法を使い分けてください。

================================================================================
6. 実践的な使用例
================================================================================

ここでは、Kumihan-Formatterを実際の執筆で活用する方法を、具体的な
シナリオと共に説明します。

--------------------------------------------------------------------------------
6.1 CoC6thシナリオ作成での活用
--------------------------------------------------------------------------------

【シナリオタイトルと基本情報】
;;;見出し1
廃病院の怪異
;;;

;;;枠線
【基本情報】
- 推奨人数: 2-4名
- 推奨時間: 4-6時間
- 難易度: ★★★☆☆
- 必要技能: 図書館、医学、心理学
;;;

# ここから導入部分
;;;見出し2+太字
導入
;;;

探索者たちは、古い新聞記事で廃病院の話を知る。
5年前に閉鎖されたその病院では、患者の不可解な失踪事件が
複数発生していた。

;;;ハイライト color=#fdd
【重要な背景情報】
- 病院は突然閉鎖された
- 患者3名が行方不明
- 医師1名も同時に失踪
;;;

【探索可能な場所】
;;;枠線
探索者が調査できる場所：

1. 1階: 受付、待合室、診察室
2. 2階: 病室、ナースステーション、医師控室
3. 地下: 研究室、薬品庫、霊安室

各場所で手がかりを発見し、真相に迫ってください。
;;;

【SANチェックポイント】
- :ハイライト color=#ffe: 地下研究室で実験記録発見時: 1/1d4 SAN減少
- :ハイライト color=#ffe: 霊安室で異形の死体発見時: 1d4/1d8 SAN減少
- :ハイライト color=#fdd: 最終的な真相判明時: 1d6/1d10 SAN減少

--------------------------------------------------------------------------------
6.2 ルールブック・サプリメント作成
--------------------------------------------------------------------------------

【技能解説の例】
;;;見出し2
技能詳細解説
;;;

;;;見出し3+枠線
〈図書館〉技能
;;;

図書館や資料室での情報収集に使用する技能です。

【基本的な使用方法】
1. 図書館や資料室で調査する際に使用
2. 成功すると有用な情報を発見
3. 失敗しても基本的な情報は得られる

【判定の目安】
- :太字: 通常判定: 一般的な情報の調査
- :太字: 困難判定: 専門的・秘匿性の高い情報
- :太字: 極限判定: 禁断の知識・危険な情報

;;;ハイライト color=#dfd
【成功例】
- 歴史的事件の詳細
- 人物の経歴・関係性
- 過去の新聞記事
- 学術論文の内容
;;;

;;;ハイライト color=#fdd
【注意事項】
クトゥルフ神話に関する情報を発見した場合、
SANチェックが必要になることがあります。
;;;

【応用的な使用例】
;;;枠線
シナリオでの活用パターン：

- 事件の背景調査
- 登場人物の過去調べ
- 怪異現象の前例調査
- 古代遺跡・建造物の歴史調査
;;;

--------------------------------------------------------------------------------
6.3 設定資料・世界観資料作成
--------------------------------------------------------------------------------

【組織・団体の解説】
;;;見出し2+太字
秘密結社「黄昏の調査団」
;;;

# 基本情報セクション
;;;見出し3
組織概要
;;;

黄昏の調査団は、超常現象の調査を専門とする秘密組織である。
表向きは学術研究団体として活動している。

;;;枠線
【組織データ】
- 設立年: 1923年
- 本部所在地: ロンドン
- 構成員数: 約150名（世界各地）
- 主な活動: 超常現象調査、古代遺跡発掘
- 資金源: 篤志家からの寄付、政府からの秘密資金
;;;

【階級制度】
;;;見出し4+枠線
構成員の階級
;;;

1. 見習い調査員: 新人メンバー、基礎訓練中
2. 正規調査員: 一般的な調査任務を担当
3. 上級調査員: 危険度の高い任務を担当
4. 地域責任者: 各地域の統括責任者
5. 本部幹部: 組織全体の意思決定に参加

【特殊装備】
- :太字: 聖別された銀の短剣: 一部の怪異に有効
- :太字: 防護符: SANチェック時に+1ボーナス
- :太字: 秘匿通信機: 暗号化された通信が可能
- :太字: 調査キット: 各種調査道具一式

;;;ハイライト color=#ffe
【重要】
この組織に関する情報は、探索者が特定の条件を
満たした場合にのみ開示してください。
;;;

--------------------------------------------------------------------------------
6.4 ハンドアウト作成
--------------------------------------------------------------------------------

【探索者用ハンドアウトの例】
;;;見出し3+枠線
探索者A: 医師
;;;

# 背景設定
あなたは総合病院で勤務する医師です。
最近、同僚から奇妙な話を聞きました。

;;;ハイライト color=#dfd
【あなたが知っている情報】
- 5年前に閉鎖された私立病院がある
- その病院では複数の患者が失踪した
- 担当医師も同時に姿を消している
- 閉鎖の理由は「経営難」とされている
;;;

【あなたの動機】
;;;枠線
医師として、患者の失踪という異常事態を
看過することはできません。
真相を突き止め、医療倫理に反する
何らかの行為があったのか確認したいのです。
;;;

【使用可能技能ボーナス】
- :太字: 医学: +20%
- :太字: 生物学: +10%
- :太字: 薬学: +10%
- :太字: 心理学: +5%

;;;ハイライト color=#fdd
【秘密】
実は、あなたは失踪した医師と大学時代の同期でした。
彼から最後に届いた手紙には、「重大な発見をした」
という内容が記されていました。
この情報は、適切なタイミングでGMが開示します。
;;;

--------------------------------------------------------------------------------
6.5 FAQ・説明書形式での活用
--------------------------------------------------------------------------------

【よくある質問形式】
;;;見出し2+太字
ルール運用に関するFAQ
;;;

- :太字: Q1. 技能判定で1が出た場合はどうなりますか？
- A1. 1は必ずしもファンブルではありません。技能値が95%の場合、1-5が成功になります。

- :太字: Q2. SANチェックのタイミングはいつですか？
- A2. 以下のような場合にSANチェックが発生します：

;;;枠線
SANチェックが必要な状況：
- 怪物を目撃した時
- 異常な現象を体験した時
- 衝撃的な真実を知った時
- 神話的存在と遭遇した時
;;;

- :太字: Q3. 戦闘で0HPになった場合は即死ですか？
- A3. いいえ、気絶状態になります。応急手当などで回復可能です。

;;;ハイライト color=#ffe
【GM向け重要事項】
プレイヤーの楽しみを最優先に、ルールは柔軟に
運用してください。ルールブックは指針であり、
絶対的な法則ではありません。
;;;

--------------------------------------------------------------------------------
6.6 連載記事・コラム形式での活用
--------------------------------------------------------------------------------

【連載コラムの例】
;;;見出し2
CoC初心者のためのシナリオ作成講座 第1回
;;;

# 今回のテーマ
;;;見出し3+枠線
「魅力的な導入を作る3つのポイント」
;;;

シナリオの導入は、プレイヤーの興味を引く最重要部分です。
今回は、効果的な導入を作るためのコツをご紹介します。

【ポイント1: 身近な異常から始める】
;;;太字
プレイヤーが「自分だったらどうするだろう？」と
考えられるような、日常の延長線上の導入が効果的です。
;;;

具体例：
- 友人からの奇妙な相談
- 新聞の小さな記事
- 職場で起きた不可解な出来事

【ポイント2: 複数の動機を用意する】
;;;枠線
探索者ごとに異なる動機を設定することで、
全員が積極的にシナリオに参加できます。

例：
- 医師: 職業的な義務感
- 記者: スクープへの欲求
- 学者: 学術的な興味
- 警察官: 事件解決への使命感
;;;

【ポイント3: 情報の小出しで興味を維持】
;;;ハイライト color=#dfd
一度にすべての情報を提示せず、段階的に
真相を明かすことで、プレイヤーの興味を
最後まで維持できます。
;;;

;;;見出し4
次回予告
;;;

次回は「効果的な手がかりの配置方法」について
解説します。お楽しみに！

--------------------------------------------------------------------------------
6.7 商品説明・カタログでの活用
--------------------------------------------------------------------------------

【同人誌紹介の例】
;;;見出し2+太字
新刊紹介: CoC6thシナリオ集「都市の影」
;;;

;;;ハイライト color=#ffe
【即売会限定！特別価格500円】
通常価格800円 → 500円（税込）
;;;

【収録シナリオ一覧】
;;;枠線
1. 「消えた研究者」（推奨3-4人、3-4時間）
2. 「地下鉄の怪談」（推奨2-3人、2-3時間）
3. 「古書店の秘密」（推奨3-5人、4-5時間）
4. 「病院の夜勤」（推奨2-4人、3-4時間）
;;;

【特徴・おすすめポイント】
- :太字: 初心者GM対応: 詳細な進行指針付き
- :太字: ハンドアウト完備: すぐにセッション開始可能
- :太字: 豊富なNPC: 個性的なキャラクター多数登場
- :太字: 応用可能: 現代日本設定で展開しやすい

;;;見出し3+枠線
読者の声
;;;

「初めてGMをしましたが、解説が丁寧で助かりました！」
「プレイヤーも楽しんでくれて、大成功でした」
「NPCの設定が秀逸で、セッションが盛り上がります」

【購入方法】
;;;ハイライト color=#dfd
■ イベント会場: A-12 「夜風工房」
■ オンライン: Booth店舗で通販対応
■ 電子版: PDF版も同時販売中
;;;

このように、Kumihan-Formatterの記法を活用することで、
様々な用途の文書を美しくレイアウトできます。

================================================================================
7. トラブルシューティング
================================================================================

【インストール関連】
■ 問題: "python: command not found" エラー
原因: Pythonがインストールされていないか、PATHが通っていません。

解決方法:
1. Python公式サイトから再インストール
2. インストール時に"Add Python to PATH"にチェック
3. PCを再起動
4. 再度 python --version で確認

■ 問題: "pip: command not found" エラー
原因: pipが利用できない状態です。

解決方法:
1. python -m pip --version で確認
2. python -m ensurepip でpipをインストール
3. 仮想環境内で再度確認

■ 問題: "ModuleNotFoundError: No module named 'kumihan_formatter'"
原因: プログラムが正しくインストールされていません。

解決方法:
1. 仮想環境が有効化されているか確認
   (.venv) がプロンプトに表示されているか
2. pip install -e . を再実行
3. インストールログでエラーがないか確認

【変換関連】
■ 問題: 文字化けする
原因: ファイルの文字コードがUTF-8でない可能性があります。

解決方法:
1. テキストエディタで開く
2. 「名前を付けて保存」を選択
3. 文字コードを「UTF-8」に指定して保存
4. 再度変換を実行

■ 問題: ブロックが正しく表示されない
原因: 記法の書き方に誤りがある可能性があります。

チェックポイント:
- 開始の ;;; と終了の ;;; が対応しているか
- キーワードのスペルが正しいか（太字、枠線、ハイライト等）
- 全角文字を使っていないか（;;;は半角）
- キーワードの前後に余分なスペースがないか

■ 問題: "[ERROR: 未知のキーワード]" が表示される
原因: 存在しないキーワードが指定されています。

解決方法:
使用可能なキーワード一覧:
- 太字
- イタリック
- 枠線
- ハイライト
- 見出し1〜見出し5

【実行関連】
■ 問題: ブラウザが開かない
原因: プレビュー機能が無効化されているか、ブラウザ設定の問題です。

解決方法:
1. --no-preview オプションを指定していないか確認
2. デフォルトブラウザが設定されているか確認
3. 手動でdist/フォルダ内のHTMLファイルを開く

■ 問題: 出力先が見つからない
原因: 出力フォルダの場所が分からない。

解決方法:
1. デフォルトでは dist/ フォルダに出力されます
2. エクスプローラー/Finderで dist フォルダを確認
3. -o オプションで出力先を明示的に指定:
   python -m kumihan_formatter.cli input.txt -o my_output/

■ 問題: ドラッグ&ドロップが動作しない
原因: デスクトップランチャーの設定に問題がある。

解決方法:
1. setup_desktop_launcher.bat（またはcommand）を再実行
2. セキュリティ警告が出た場合は「許可」を選択
3. デスクトップアイコンが作成されているか確認
4. 管理者権限で実行してみる

================================================================================
8. よくある質問（FAQ）
================================================================================

【基本的な質問】
Q: 画像は挿入できますか？
A: 現バージョンではテキストのみ対応です。画像機能は今後追加予定です。

Q: PDFに出力できますか？
A: 現在はHTML出力のみです。ブラウザの印刷機能でPDF化は可能です。

Q: 複数ファイルを一括変換できますか？
A: 現在は1ファイルずつの変換となります。バッチ処理機能は開発中です。

Q: スマートフォンで見られるHTMLになりますか？
A: はい、レスポンシブデザインでスマートフォンでも見やすく表示されます。

【使用方法に関する質問】
Q: 既存のHTMLファイルは上書きされますか？
A: デフォルトでは警告が表示されます。--force オプションで強制上書き可能です。

Q: ファイル監視モードとは何ですか？
A: ファイルを保存するたびに自動で再変換される機能です。執筆中の確認に便利です。
   使用方法: python -m kumihan_formatter.cli input.txt --watch

Q: 変換にかかる時間はどれくらいですか？
A: 10,000文字程度のファイルで1秒以内に完了します。

【記法に関する質問】
Q: Markdownと同じ記法ですか？
A: いいえ、Kumihan-Formatter独自の記法です。より直感的で使いやすく設計されています。

Q: ネストしたリストは作れますか？
A: 現バージョンでは1階層のリストのみサポートしています。

Q: 表（テーブル）は作れますか？
A: 現バージョンでは未対応です。今後の実装を検討しています。

【ライセンス・商用利用】
Q: 商用利用は可能ですか？
A: MITライセンスのため、商用利用も可能です。

Q: 生成されたHTMLの著作権は？
A: 生成されたHTMLの著作権は元のテキストファイルの作者に帰属します。

【技術的な質問】
Q: Windows以外でも動きますか？
A: macOS、Linuxでも動作します。Python 3.9以上が必要です。

Q: カスタムCSSは適用できますか？
A: 上級者向け機能として設定ファイルでカスタマイズ可能です（セクション10参照）。

Q: HTMLのテンプレートは変更できますか？
A: 設定ファイルでテンプレートをカスタマイズできます（上級者向け）。

================================================================================
9. エラーメッセージ一覧と対処法
================================================================================

【パーサーエラー】
■ "[ERROR: 未知のキーワード: XXX]"
意味: 指定されたキーワードが認識できません
対処: キーワードのスペルを確認（太字、枠線、ハイライト等）

■ "[ERROR: 閉じマーカー ';;;' が見つかりません]"
意味: ブロックの終了マーカーがありません
対処: ;;; で正しく閉じているか確認

■ "[ERROR: 複合キーワードの組み合わせが無効です]"
意味: 同じ種類のキーワードが重複しているか、無効な組み合わせです
対処: 重複を削除（例: 見出し1+見出し2 → 見出し1）

【ファイルエラー】
■ "FileNotFoundError: [Errno 2] No such file or directory"
意味: 指定されたファイルが見つかりません
対処: 
1. ファイルパスとファイル名を確認
2. 拡張子（.txt）を含めているか確認
3. 相対パスまたは絶対パスが正しいか確認

■ "UnicodeDecodeError: 'utf-8' codec can't decode byte"
意味: 文字コードが正しく読み取れません
対処: ファイルをUTF-8で保存し直す

■ "PermissionError: [Errno 13] Permission denied"
意味: ファイルへのアクセス権限がありません
対処: 
1. ファイルが他のプログラムで開かれていないか確認
2. 書き込み権限があるか確認
3. 管理者権限で実行してみる

【システムエラー】
■ "ModuleNotFoundError: No module named 'click'"
意味: 必要なライブラリがインストールされていません
対処: pip install -e . を再実行して依存関係をインストール

■ "ImportError: cannot import name 'Parser' from 'kumihan_formatter.parser'"
意味: プログラムの構造に問題があります
対処: 
1. 最新版を再ダウンロード
2. インストールし直す

【出力エラー】
■ "OSError: [Errno 28] No space left on device"
意味: ディスクの空き容量が不足しています
対処: 不要なファイルを削除して空き容量を確保

■ "Warning: 出力ファイルが既に存在します"
意味: 同名のHTMLファイルが既に存在します
対処: 
1. 既存ファイルを別名で保存
2. --force オプションで上書き
3. -o オプションで別の出力先を指定

================================================================================
10. 上級者向け機能
================================================================================

注意: このセクションは通常の使用では不要な高度な機能を扱います。
初心者の方はスキップして構いません。

【ファイル監視モード】
ファイルを保存するたびに自動で再変換される機能です。

使用方法:
python -m kumihan_formatter.cli input.txt --watch

特徴:
- ファイルの変更を自動検知
- 即座に再変換・ブラウザ更新
- Ctrl+C（Windows）またはCmd+C（macOS）で終了
- 執筆しながらリアルタイムで確認可能

【カスタム設定ファイル】
YAMLまたはJSON形式で詳細な設定が可能です。

基本的な使用方法:
python -m kumihan_formatter.cli input.txt --config my_config.yaml

設定可能な項目:
- カスタムキーワードの追加
- CSS スタイルの変更
- HTMLテンプレートのカスタマイズ
- 出力形式の調整

設定ファイルの例（config.yaml）:
```yaml
# カスタムキーワードの定義
custom_keywords:
  重要:
    tag: div
    class: important
    style: "background-color: #ff6b6b; color: white; padding: 10px;"
  
  メモ:
    tag: div
    class: memo
    style: "background-color: #f0f0f0; border-left: 3px solid #666;"

# テーマ設定
theme:
  font_family: "游ゴシック, YuGothic, sans-serif"
  base_font_size: 16px
  line_height: 1.8
  max_width: 800px
```

詳細な設定例は examples/config-sample.yaml を参照してください。

【テスト用記法網羅ファイル生成】
開発者向け機能：全記法パターンのテストファイルを生成します。

使用方法:
python -m dev.tools.generate_test_file

これにより、comprehensive-test.txt が生成され、
すべての記法パターンをテストできます。

【バッチ処理（実験的機能）】
複数ファイルの一括変換（開発中）:

```bash
# フォルダ内の全txtファイルを変換（将来実装予定）
python -m kumihan_formatter.cli --batch *.txt
```

【デバッグモード】
詳細なログ出力を有効にする:

```bash
python -m kumihan_formatter.cli input.txt --debug
```

出力される情報:
- パース処理の詳細
- ASTの構造
- レンダリング過程
- エラーの詳細スタックトレース

================================================================================
11. 用語集
================================================================================

【基本用語】
AST（抽象構文木）
  パーサーが内部で使用するデータ構造。テキストを解析して
  構造化された形式に変換したもの。

CLI（Command Line Interface）
  コマンドラインインターフェース。キーボードで命令を入力して
  操作する方式。

HTML（HyperText Markup Language）
  ウェブページを記述する言語。ブラウザで表示される。

UTF-8
  文字エンコーディング方式の一つ。日本語を含む多言語対応。

【技術用語】
Jinja2
  PythonのHTMLテンプレートエンジン。動的にHTMLを生成する。

YAML（YAML Ain't Markup Language）
  人間が読みやすい設定ファイル形式。

JSON（JavaScript Object Notation）
  データ交換形式。設定ファイルにも使用される。

Markdown
  軽量マークアップ言語。本ツールは独自記法を採用。

【Kumihan-Formatter固有用語】
ブロック記法
  ;;; で囲む本ツール独自の記法。太字、枠線などを指定。

キーワード付きリスト
  リスト項目に個別にスタイルを適用する記法。- :太字: のように記述。

複合キーワード
  + 記号で複数のキーワードを組み合わせる機能。

レンダラー
  ASTをHTMLに変換する処理部分。

パーサー
  テキストファイルを解析してASTに変換する処理部分。

【環境関連用語】
仮想環境（Virtual Environment）
  Pythonの独立した実行環境。プロジェクトごとに異なる
  パッケージバージョンを管理できる。

pip
  Pythonのパッケージ管理ツール。ライブラリのインストールに使用。

PATH
  実行ファイルの検索パス。コマンドを実行する際に参照される。

================================================================================
12. 付録
================================================================================

【ショートカットキー一覧】
Windows:
  Ctrl+C: 実行中のプログラムを停止
  Ctrl+V: テキストを貼り付け
  Ctrl+S: ファイルを保存
  Windowsキー+R: ファイル名を指定して実行

macOS:
  Cmd+C: 実行中のプログラムを停止
  Cmd+V: テキストを貼り付け
  Cmd+S: ファイルを保存
  Cmd+Space: Spotlight検索

【コマンドライン基本操作】
共通:
  cd フォルダ名: フォルダに移動
  cd ..: 一つ上のフォルダに移動
  ls（またはdir）: ファイル一覧表示
  pwd: 現在のフォルダを表示

【関連リンク】
公式リポジトリ:
  https://github.com/mo9mo9-uwu-mo9mo9/Kumihan-Formatter

Issues（不具合報告・要望）:
  https://github.com/mo9mo9-uwu-mo9mo9/Kumihan-Formatter/issues

Python公式サイト:
  https://www.python.org/

Pythonチュートリアル（日本語）:
  https://docs.python.org/ja/3/tutorial/

【更新履歴】
2025-01-21: 初版作成（v0.1.0対応）
  - 基本機能の詳細説明
  - トラブルシューティング追加
  - FAQ充実
  - エラーメッセージ一覧
  - 上級者向け機能の説明

【謝辞】
Kumihan-Formatterの開発にあたり、多くの方々からフィードバックを
いただきました。この場を借りて感謝申し上げます。

【ライセンス】
MIT License

Copyright (c) 2025 mo9mo9-uwu-mo9mo9

本ソフトウェアは「現状のまま」で提供され、明示的または暗黙的な
保証はありません。詳細はLICENSEファイルをご確認ください。

================================================================================
                              ～ END OF DOCUMENT ～
================================================================================
