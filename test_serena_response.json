[{"name_path": "MarkdownParser", "kind": "Class", "body_location": {"start_line": 11, "end_line": 141}, "body": "class MarkdownParser:\n    \"\"\"Markdown parsing functionality\n\n    Handles pattern compilation and basic markdown syntax parsing\n    including headings, lists, and inline elements.\n    \"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Initialize parser with compiled patterns\"\"\"\n        self.patterns = self._compile_patterns()\n\n    def _compile_patterns(self) -> dict[str, Pattern[str]]:\n        \"\"\"\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\"\"\"\n        return {\n            # \u898b\u51fa\u3057\n            \"h1\": re.compile(r\"^# (.+)$\", re.MULTILINE),\n            \"h2\": re.compile(r\"^## (.+)$\", re.MULTILINE),\n            \"h3\": re.compile(r\"^### (.+)$\", re.MULTILINE),\n            \"h4\": re.compile(r\"^#### (.+)$\", re.MULTILINE),\n            \"h5\": re.compile(r\"^##### (.+)$\", re.MULTILINE),\n            \"h6\": re.compile(r\"^###### (.+)$\", re.MULTILINE),\n            # \u5f37\u8abf\n            \"strong\": re.compile(r\"\\*\\*(.+?)\\*\\*\"),\n            \"em\": re.compile(r\"\\*(.+?)\\*\"),\n            \"strong_alt\": re.compile(r\"__(.+?)__\"),\n            \"em_alt\": re.compile(r\"_(.+?)_\"),\n            # \u30ea\u30f3\u30af\n            \"link\": re.compile(r\"\\[([^\\]]+)\\]\\(([^)]+)\\)\"),\n            # \u30b3\u30fc\u30c9\uff08\u30a4\u30f3\u30e9\u30a4\u30f3\uff09\n            \"code\": re.compile(r\"`([^`]+)`\"),\n            # \u6c34\u5e73\u7dda\n            \"hr\": re.compile(r\"^---+$\", re.MULTILINE),\n            # \u756a\u53f7\u4ed8\u304d\u30ea\u30b9\u30c8\n            \"ol_item\": re.compile(r\"^\\d+\\.\\s+(.+)$\", re.MULTILINE),\n            # \u756a\u53f7\u306a\u3057\u30ea\u30b9\u30c8\n            \"ul_item\": re.compile(r\"^[-*+]\\s+(.+)$\", re.MULTILINE),\n        }\n\n    def _convert_headings(self, text: str) -> str:\n        \"\"\"\u898b\u51fa\u3057\u3092\u5909\u63db\"\"\"\n        for level in range(1, 7):  # h1\u304b\u3089h6\u307e\u3067\n            pattern_name = f\"h{level}\"\n            if pattern_name in self.patterns:\n\n                def make_heading_replacer(h_level: int) -> Any:\n                    def replace_heading(match: Any) -> str:\n                        heading_text = match.group(1).strip()\n                        # ID\u751f\u6210\uff08\u30ea\u30f3\u30af\u7528\uff09\n                        heading_id = self._generate_heading_id(heading_text)\n                        return (\n                            f'<h{h_level} id=\"{heading_id}\">{heading_text}</h{h_level}>'\n                        )\n\n                    return replace_heading\n\n                text = self.patterns[pattern_name].sub(\n                    make_heading_replacer(level), text\n                )\n        return text\n\n    def _generate_heading_id(self, heading_text: str) -> str:\n        \"\"\"\u898b\u51fa\u3057\u304b\u3089ID\u3092\u751f\u6210\"\"\"\n        # \u82f1\u6570\u5b57\u4ee5\u5916\u3092\u9664\u53bb\u3057\u3066ID\u3092\u751f\u6210\n        clean_text = re.sub(r\"[^\\w\\s-]\", \"\", heading_text.lower())\n        clean_text = re.sub(r\"[-\\s]+\", \"-\", clean_text)\n        return clean_text.strip(\"-\")\n\n    def _convert_lists(self, text: str) -> str:\n        \"\"\"\u30ea\u30b9\u30c8\u3092\u5909\u63db\"\"\"\n        lines = text.split(\"\\n\")\n        result = []\n        in_ul = False\n        in_ol = False\n\n        for line in lines:\n            ul_match = self.patterns[\"ul_item\"].match(line)\n            ol_match = self.patterns[\"ol_item\"].match(line)\n\n            if ul_match:\n                if not in_ul:\n                    if in_ol:\n                        result.append(\"</ol>\")\n                        in_ol = False\n                    result.append(\"<ul>\")\n                    in_ul = True\n                result.append(f\"<li>{ul_match.group(1)}</li>\")\n            elif ol_match:\n                if not in_ol:\n                    if in_ul:\n                        result.append(\"</ul>\")\n                        in_ul = False\n                    result.append(\"<ol>\")\n                    in_ol = True\n                result.append(f\"<li>{ol_match.group(1)}</li>\")\n            else:\n                if in_ul:\n                    result.append(\"</ul>\")\n                    in_ul = False\n                if in_ol:\n                    result.append(\"</ol>\")\n                    in_ol = False\n                result.append(line)\n\n        # \u6700\u5f8c\u306e\u30ea\u30b9\u30c8\u3092\u9589\u3058\u308b\n        if in_ul:\n            result.append(\"</ul>\")\n        if in_ol:\n            result.append(\"</ol>\")\n\n        return \"\\n\".join(result)\n\n    def _convert_inline_elements(self, text: str) -> str:\n        \"\"\"\u30a4\u30f3\u30e9\u30a4\u30f3\u8981\u7d20\u3092\u5909\u63db\"\"\"\n        # \u30ea\u30f3\u30af\n        text = self.patterns[\"link\"].sub(r'<a href=\"\\2\">\\1</a>', text)\n\n        # \u5f37\u8abf\uff08\u592a\u5b57\uff09\n        text = self.patterns[\"strong\"].sub(r\"<strong>\\1</strong>\", text)\n        text = self.patterns[\"strong_alt\"].sub(r\"<strong>\\1</strong>\", text)\n\n        # \u5f37\u8abf\uff08\u30a4\u30bf\u30ea\u30c3\u30af\uff09\n        text = self.patterns[\"em\"].sub(r\"<em>\\1</em>\", text)\n        text = self.patterns[\"em_alt\"].sub(r\"<em>\\1</em>\", text)\n\n        # \u30a4\u30f3\u30e9\u30a4\u30f3\u30b3\u30fc\u30c9\n        text = self.patterns[\"code\"].sub(r\"<code>\\1</code>\", text)\n\n        # \u6c34\u5e73\u7dda\n        text = self.patterns[\"hr\"].sub(\"<hr>\", text)\n\n        return text", "children": [{"name": "__init__", "name_path": "MarkdownParser/__init__", "kind": "Method", "location": {"line": 18, "column": 8}, "body_location": {"start_line": 18, "end_line": 20}}, {"name": "_compile_patterns", "name_path": "MarkdownParser/_compile_patterns", "kind": "Method", "location": {"line": 22, "column": 8}, "body_location": {"start_line": 22, "end_line": 47}}, {"name": "_convert_headings", "name_path": "MarkdownParser/_convert_headings", "kind": "Method", "location": {"line": 49, "column": 8}, "body_location": {"start_line": 49, "end_line": 69}}, {"name": "_generate_heading_id", "name_path": "MarkdownParser/_generate_heading_id", "kind": "Method", "location": {"line": 71, "column": 8}, "body_location": {"start_line": 71, "end_line": 76}}, {"name": "_convert_lists", "name_path": "MarkdownParser/_convert_lists", "kind": "Method", "location": {"line": 78, "column": 8}, "body_location": {"start_line": 78, "end_line": 120}}, {"name": "_convert_inline_elements", "name_path": "MarkdownParser/_convert_inline_elements", "kind": "Method", "location": {"line": 122, "column": 8}, "body_location": {"start_line": 122, "end_line": 141}}, {"name": "patterns", "name_path": "MarkdownParser/patterns", "kind": "Variable", "location": {"line": 20, "column": 8}, "body_location": {"start_line": 20, "end_line": 20}}], "relative_path": "kumihan_formatter/core/markdown_parser.py"}]
